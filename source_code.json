[{"language":"kotlin","path":"BrowserDrawResource.kt","content":"package org.dweb_browser.browser\n\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.graphics.ColorFilter\nimport dweb_browser_kmp.browser.generated.resources.Res\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_360\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_baidu\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_bing\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_sogou\nimport dweb_browser_kmp.browser.generated.resources.ic_launcher_foreground\nimport dweb_browser_kmp.browser.generated.resources.ic_main_star\nimport dweb_browser_kmp.browser.generated.resources.ic_scanner\nimport dweb_browser_kmp.browser.generated.resources.ic_web\nimport org.jetbrains.compose.resources.DrawableResource\nimport org.jetbrains.compose.resources.ExperimentalResourceApi\nimport org.jetbrains.compose.resources.painterResource\n\n\n@OptIn(ExperimentalResourceApi::class)\nenum class BrowserDrawResource(\n  val urls: List<String>,\n  val res: DrawableResource,\n  val monochrome: Boolean = false,\n) {\n  Web(\"content://drawable/web\", Res.drawable.ic_web, true),//\n  Star(\"content://drawable/star\", Res.drawable.ic_main_star, true),//\n  Logo(\"content://drawable/dweb-browser\", Res.drawable.ic_launcher_foreground),//\n  Scanner(\"content://drawable/scanner\", Res.drawable.ic_scanner),//\n\n  WebEngineBaidu(\"https://www.baidu.com/favicon.ico\", Res.drawable.ic_engine_baidu),//\n  WebEngineBing(\n    \"https://www.bing.com/sa/simg/favicon-2x.ico\",\n    Res.drawable.ic_engine_bing// Res.drawable.ic_engine_bing_fluent\n  ),//\n  WebEngineSogou(\n    \"https://sogou.com/images/logo/new/favicon.ico?v=4\",\n    Res.drawable.ic_engine_sogou\n  ),//\n  WebEngine360(\"https://www.so.com/favicon.ico\", Res.drawable.ic_engine_360),//\n  ;\n\n  constructor(url: String, res: DrawableResource, monochrome: Boolean = false) : this(\n    listOf(url),\n    res,\n    monochrome\n  )\n\n  companion object {\n    val ALL_VALUES = mutableMapOf<String, BrowserDrawResource>().also { map ->\n      for (item in entries) {\n        for (url in item.urls) {\n          map[url] = item\n        }\n      }\n    }\n  }\n\n  val id = urls.first()\n\n  @Composable\n  fun painter() = painterResource(res)\n\n  @Composable\n  fun getContentColorFilter() =\n    if (monochrome) ColorFilter.tint(LocalContentColor.current) else null\n}\n\n"},{"language":"kotlin","path":"BrowserI18nResource.kt","content":"package org.dweb_browser.browser\n\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.helper.compose.I18n\nimport org.dweb_browser.helper.compose.Language\nimport org.dweb_browser.helper.compose.OneParamI18nResource\n\nobject BrowserI18nResource : I18n() {\n  val application_name = zh(\"Dweb Browser\", \"Dweb Browser\")\n  val dialog_title_webview_upgrade = zh(\"更新提示\", \"Update tip\")\n\n  class WebViewVersions(var currentVersion: String, var requiredVersion: String)\n\n  val dialog_text_webview_upgrade = OneParamI18nResource(\n    { WebViewVersions(\"\", \"\") },\n    Language.ZH to { \"当前系统中的 Android System Webview 版本过低 ($currentVersion)，所安装扩展软件可能无法正确运行。\\n如果遇到此类情况，请优先将 Android System Webview 版本更新至 $requiredVersion 以上再重试。\" },\n    Language.EN to { \"The Android System Webview version in the current system is too low ($currentVersion), and the installed extension software may not run correctly.\\nIf you encounter this situation, please upgrade the Android System Webview version to $requiredVersion or above and try again. \" },\n  )\n  val dialog_confirm_webview_upgrade =\n    zh(\"确定\", \"Confirm\")\n  val dialog_dismiss_webview_upgrade =\n    zh(\"帮助文档\", \"Help\")\n\n  val install_button_install = zh(\"安装\", \"Install\")\n  val install_button_update = zh(\"升级\", \"Upgrade\")\n  val install_button_downloading = zh(\"下载中\", \"Downloading\")\n  val install_button_paused = zh(\"暂停\", \"Pause\")\n  val install_button_installing = zh(\"安装中\", \"Installing\")\n  val install_button_open = zh(\"打开\", \"Open\")\n  val install_button_lower = zh(\"版本降级\", \"Downgrade\")\n  val install_button_retry = zh(\"重载失效资源\", \"Retry\")\n  val install_button_retry2 = zh(\"重试\", \"Retry\")\n  val install_button_incompatible = zh(\n    \"软件不兼容\", \"Software Incompatible\"\n  )\n  val install_button_jump_home = zh(\n    \"打开来源页\", \"Go to Referring Page\"\n  )\n  val install_tooltip_warning = zh(\"警告\", \"WARING\")\n\n  val install_tooltip_lower_version_tip = zh(\n    \"该目标版本低于当前已安装的版本，确定要进行降级安装吗？\",\n    \"The target version is lower than the currently installed version. Are you sure you want to downgrade?\"\n  )\n\n  val install_tooltip_install_lower_action = zh(\"降级安装\", \"Downgrade and install\")\n\n  val no_download_links = zh(\"暂无下载数据\", \"There are no download links yet\")\n  val no_apps_data = zh(\"没有应用数据\", \"There are no Apps\")\n  val button_name_confirm = zh(\"确定\", \"Confirm\")\n  val button_name_cancel = zh(\"取消\", \"Cancel\")\n  val top_bar_title_download = zh(\"下载列表\", \"All Downloads\")\n  val top_bar_title_down_detail = zh(\"下载详情\", \"Download Detail\")\n  val time_today = zh(\"今天\", \"Today\")\n  val time_yesterday = zh(\"昨天\", \"Yesterday\")\n  val privacy_title = zh(\"温馨提示\", \"Tips\")\n  val privacy_content = zh(\n    \"欢迎使用 Dweb Browser，在您使用的时候，需要连接网络，产生的流量费用请咨询当地运营商。\\n在使用 Dweb Browser 前，请认真阅读《隐私协议》。您需要同意并接受全部条款后再开始使用该软件。\",\n    \"Welcome to Dweb Browser. Please note that an internet connection is required for use. Please consult your local operator for any data charges that may apply.\\nBefore using Dweb Browser, please carefully read the 'Privacy Policy'. You must agree to and accept all terms and conditions before using the software.\"\n  )\n  val privacy_policy =\n    zh(\"《隐私协议》\", \"'Privacy Policy'\")\n  val privacy_content_deny = zh(\n    \"本产品需要同意相关协议后才能使用哦\",\n    \"This product can only be used after agreeing to the relevant agreement\"\n  )\n  val privacy_button_refuse = zh(\"不同意\", \"Refuse\")\n  val privacy_button_agree = zh(\"同意\", \"Agree\")\n  val privacy_button_exit = zh(\"退出\", \"Exit\")\n  val privacy_button_i_know = zh(\"已知晓\", \"I Know\")\n\n  val browser_short_name = zh(\"浏览器\", \"Browser\")\n  val browser_search_chat = zh(\"对话\", \"Chat\")\n  val browser_search_web_page = zh(\"网页\", \"Web\")\n  val browser_search_web2 = zh(\"Web2\", \"Web2\")\n  val browser_search_web3 = zh(\"Web3\", \"Web3\")\n  val browser_search_local_resources = zh(\"本地资源\", \"Local Resources\")\n  val browser_search_engine = zh(\"搜索引擎\", \"Search Engine\")\n  val browser_search_dwebapp = zh(\"Dweb应用\", \"Search Engine\")\n  val browser_search_title = zh(\"搜索\", \"Search\")\n  val browser_search_hint = zh(\"搜索或输入网址\", \"Search or Input Website\")\n  val browser_empty_list = zh(\"暂无数据\", \"No Data\")\n  val browser_bookmark_edit_dialog_title = zh(\"编辑书签\", \"Edit Bookmark\")\n  val browser_search_keyword = zh1({ \"搜索 “$value”\" }, { \"Search '${value}'\" })\n  val browser_engine_inactive = zh(\"未启用\", \"Inactive\")\n  val browser_search_noFound = zh(\n    \"未检索到符合关键字的本地资源\", \"No local resource matching the keyword was retrieved\"\n  )\n  val browser_search_comingSoon = zh(\"即将开放\", \"Coming Soon\")\n  val browser_web3_found_dwebapps = zh1({ \"找到了 ${value}个 dweb应用\" },\n    { \"Found $value dweb application${if (value == \"1\") \"s\" else \"\"}\" })\n  val browser_web3_search_logs = zh(\"搜索日志\", \"Search Logs\")\n\n  object Web3Search : I18n() {\n    val preview_logs_lines = zh1({ \"总共 $value 条日志\" }, { \"$value logs in total\" })\n    val log_start_dwebapps = zh(\"正在搜索 Dweb应用\", \"Scraping Dwebapps\")\n    val log_end = zh(\"搜索结束\", \"End of search\")\n    val log_fetch_dwebapps = zh1({ \"加载 $value\" }, { \"fetching $value\" })\n    val log_parse_dwebapps = zh1({ \"分析 $value\" }, { \"parsing $value\" })\n    val log_fail_dwebapps = zh1({ \"无效 $value\" }, { \"unable $value\" })\n    val log_discover_dwebapps =\n      zh2({ \"发现 $value1 Dweb应用 入口: $value2\" }, { \"Discover $value1 Dwebapp portal: $value2\" })\n    val log_error_cors_dwebapps =\n      zh1({ \"失败 $value Dweb应用存在跨域限制\" }, { \"Fail $value dwebapp cors limit\" })\n    val log_error_integrity_dwebapps =\n      zh1({ \"警告 $value 正确性验证不通过\" }, { \"Warn $value integrity hash not match\" })\n    val log_error_dwebapps = zh2({ \"错误 $value1 : $value2\" }, { \"Error $value1 : $value2\" })\n    val log_success_found_dwebapps =\n      zh2({ \"成功 $value1 找到 Dweb应用: $value2\" }, { \"Success $value1 found dwebapp: $value2\" })\n  }\n\n  val browser_bookmark_title = zh(\"书签标题\", \"Bookmark Title\")\n  val browser_bookmark_url = zh(\"链接地址\", \"Bookmark Url\")\n  val browser_add_bookmark = zh(\"添加书签\", \"Add Bookmark\")\n  val browser_remove_bookmark = zh(\"移除书签\", \"Remove Bookmark\")\n  val browser_options_share = zh(\"分享\", \"Share\")\n  val browser_options_noTrace = zh(\"无痕浏览\", \"NoTrace\")\n  val browser_options_privacy = zh(\"隐私政策\", \"Privacy Policy\")\n  val browser_menu_scanner = zh(\"扫一扫\", \"Scan\")\n  val browser_menu_add_to_desktop = zh(\"添加到桌面\", \"Add To Desktop\")\n  val browser_web_go_back = zh(\"后退\", \"Back\")\n  val browser_web_go_forward = zh(\"前进\", \"Forward\")\n  val browser_web_refresh = zh(\"刷新\", \"Refresh\")\n  val browser_multi_count = zh(\"个标签页\", \"tabs\")\n  val browser_multi_done = zh(\"完成\", \"Done\")\n  val search_short_name = zh(\"搜索引擎\", \"Search\")\n\n  val toast_message_add_bookmark = zh(\"添加书签成功\", \"Add Bookmark Success\")\n  val toast_message_remove_bookmark = zh(\"移除书签成功\", \"Remove Bookmark Success\")\n  val toast_message_update_bookmark = zh(\"修改书签成功\", \"Change Bookmark Success\")\n  val toast_message_add_desk_success = zh(\"添加到桌面成功\", \"Add to Desktop Success\")\n  val toast_message_add_desk_exist = zh(\n    \"桌面已存在该链接\", \"Desktop Already Exist The Link\"\n  )\n  val toast_message_download_unzip_fail = zh(\"安装失败\", \"Installed Fail\")\n  val toast_message_download_download_fail = zh(\"下载失败\", \"Download Fail\")\n  val toast_message_download_downloading = zh(\"正在下载中...\", \"Downloading...\")\n\n  object JsProcess {\n    val short_name = zh(\"程序运行时\", \"App Runtime\")\n  }\n\n  object JsMM {\n    class CanNotSupportTargetParams(\n      var appName: String = \"\",\n      var appId: MMID = \"\",\n      var currentVersion: Int = -1,\n      var minTarget: Int = -1,\n      var maxTarget: Int = -1,\n    )\n\n    val canNotSupportMinTarget = OneParamI18nResource({ CanNotSupportTargetParams() },\n      Language.ZH to { \"应用：$appName($appId) 与容器版本不匹配，当前版本：${currentVersion}，应用最低要求：${minTarget}\" },\n      Language.EN to { \"App: $appName($appId) is incompatible with the container version. Current version: ${currentVersion}, app minimum requirement: ${minTarget}.\" })\n    val canNotSupportMaxTarget = OneParamI18nResource({ CanNotSupportTargetParams() },\n      Language.ZH to { \"应用：$appName($appId) 与容器版本不匹配，当前版本：${currentVersion}，应用最高兼容到：${maxTarget}\" },\n      Language.EN to { \"App: $appName($appId) is incompatible with the container version. Current version: ${currentVersion}, app maximum compatibility: ${maxTarget}.\" })\n\n  }\n\n  val download_shore_name = zh(\"下载管理\", \"Download Manager\")\n\n  val dialog_version_title = zh(\"版本更新\", \"Version Upgrade\")\n  val dialog_downloading_title = zh(\"下载中...\", \"Downloading...\")\n  val dialog_install_title = zh(\"安装提醒\", \"Install Reminder\")\n  val dialog_upgrade_description =\n    zh(\"发现新版本，请及时更新！\", \"Find a new version, please update!\")\n  val dialog_install_description = zh(\n    \"安装应用需要授权，请移步授权，再尝试！\",\n    \"Authorization is required to install the application, please move to authorization and try again!\"\n  )\n  val dialog_upgrade_button_upgrade = zh(\"升级\", \"Upgrade\")\n  val dialog_upgrade_button_delay = zh(\"推迟\", \"Defer\")\n  val dialog_upgrade_button_background = zh(\"后台下载\", \"Background\")\n  val dialog_upgrade_button_setting = zh(\"设置\", \"Setting\")\n\n  object Home {\n    val page_title = zh(\"起始页\", \"Home Page\")\n    val search_error = zh(\"没有与您搜索相关的数据！\", \"No data relevant to your search！\")\n  }\n\n  object Web {\n    val page_title = zh(\"网页\", \"Web\")\n    val web_page_loading = zh(\"加载中……\", \"Loading...\")\n  }\n\n  object Bookmark {\n    val page_title = zh(\"书签\", \"Bookmark\")\n    val tip_edit = zh(\"点击书签可以进行修改\", \"You can edit in dialog by tap bookmark\")\n  }\n\n  object History {\n    val page_title = zh(\"历史记录\", \"History Record\")\n  }\n\n  object Engine {\n    val page_title = zh(\"搜索引擎\", \"Engines\")\n    val status_enable = zh(\"开启\", \"Enable\")\n    val status_disable = zh(\"关闭\", \"Disable\")\n  }\n\n  object Download {\n    val page_title = zh(\"下载内容\", \"Downloads\")\n\n    val page_title_manage = zh(\"下载管理\", \"Download Manager\")\n    val unknownSize = zh(\"未知\", \"unknown\")\n    val dialog_download_title = zh(\"下载文件\", \"Download File\")\n\n    val dialog_retry_title = zh(\"是否重新下载文件？\", \"Do you want to re-download the file?\")\n\n    val dialog_retry_message = zh(\n      \"您想再次下载 %s ((%s)) 吗？\", \"Would you like to download %s ((%s)) again?\"\n    )\n\n    val dialog_confirm = zh(\"再次下载\", \"Download Again\")\n    val dialog_cancel = zh(\"取消\", \"Cancel\")\n\n    val button_title_init = zh(\"下载\", \"Download\")\n    val button_title_resume = zh(\"继续\", \"Resume\")\n    val button_title_pause = zh(\"暂停\", \"Pause\")\n    val button_title_install = zh(\"安装\", \"Install\")\n    val button_title_open = zh(\"打开\", \"Open\")\n    val sheet_download_tip_cancel = zh(\"取消\", \"Cancel\")\n    val sheet_download_tip_continue = zh(\"继续下载\", \"Continue\")\n    val sheet_download_tip_reload = zh(\"重新下载\", \"Re-Download\")\n\n    val tip_empty = zh(\"暂无下载任务和记录\", \"No Download Tasks And Records\")\n    val dropdown_delete = zh(\"删除\", \"Delete\")\n    val dropdown_share = zh(\"分享\", \"Share\")\n    val dropdown_rename = zh(\"重命名\", \"Rename\")\n    val chip_all = zh(\"所有\", \"All\")\n    val chip_image = zh(\"图片\", \"Photo\")\n    val chip_video = zh(\"视频\", \"Video\")\n    val chip_audio = zh(\"音频\", \"Audio\")\n    val chip_doc = zh(\"文档\", \"Documents\")\n    val chip_package = zh(\"压缩包\", \"Archives\")\n    val chip_other = zh(\"其它\", \"Other\")\n  }\n\n  object Setting {\n    val page_title = zh(\"设置\", \"Setting\")\n  }\n\n  object QRCode {\n    val short_name = zh(\"智能扫码\", \"Smart Scan\")\n    val select_QR_code = zh(\"选择一张二维码图片\", \"Select a QR code image\")\n    val toast_mismatching = zh(\"无法解析的数据 -> %s\", \"no support data -> %s\")\n    val permission_tip_camera_title = zh(\"授权相机权限\", \"Authorize camera permissions\")\n    val permission_tip_camera_message = zh(\n      \"DwebBrowser正在向您获取“相机”权限，同意后，将用于为您提供扫描二维码服务\",\n      \"DwebBrowser is asking you for \\\"Camera\\\" permissions, and if you agree, it will be used to provide you with scanning QR code services\"\n    )\n\n    val permission_denied = zh(\n      \"获取“相机”权限失败，无法提供扫码服务\",\n      \"Failed to obtain the Camera permission and cannot provide the code scanning service\"\n    )\n\n    val noFoundWindow = zh(\n      \"无法找到承载的窗口信息\",\n      \"Failed to obtain the Camera permission and cannot provide the code scanning service\"\n    )\n\n    val Action = zh(\"打开\", \"Open\")\n\n    val emptyResult = zh(\"没有识别到条形码\", \"No barcode recognized\")\n\n    val confirm = zh(\"确定\", \"Confirm\")\n    val dismiss = zh(\"关闭\", \"Dismiss\")\n    val Back = zh(\"返回\", \"Back\")\n    val photo_album = zh(\"相册\", \"Album\")\n    val photo_endoscopic = zh(\"内窥\", \"Endoscopic\")\n    val simulator_title = zh(\"在模拟器上不可用\", \"not available on simulator\")\n    val simulator_body = zh(\n      \"\"\"\n        相机在模拟器上不可用。\n        请尝试在真正的iOS设备上运行。 \"\"\".trimIndent(), \"\"\" Camera is not available on simulator.\n      Please try to run on a real iOS device.\n      \"\"\"\n    )\n    val webcam_detected_title = zh(\"没有检测到摄像头\", \"Camera not detected\")\n    val webcam_detected_body = zh(\"是否切换为内窥模式？\", \"Switch to Endoscopic Mode?\")\n    val tip_no_camera = zh(\n      \"没有检测到摄像头，请连接摄像头或者通过文件选择器选择图片\",\n      \"No camera detected, please connect camera or use file selector\"\n    )\n  }\n\n  object IconDescription {\n    val verified = zh(\"已认证\", \"Verified\")\n\n    val unverified = zh(\"未认证\", \"Unverified\")\n  }\n\n  object Desk {\n    val short_name = zh(\"我的桌面\", \"My Desk\")\n  }\n\n  object Desktop {\n    val quit = zh(\"退出\", \"Close\")\n\n    val detail = zh(\"应用详情\", \"App Info\")\n\n    val delete = zh(\"删除\", \"Delete\")\n\n    val share = zh(\"分享\", \"Share\")\n  }\n}"},{"language":"kotlin","path":"DwebBrowserLauncher.kt","content":"package org.dweb_browser.browser\n\nimport org.dweb_browser.browser.about.AboutNMM\nimport org.dweb_browser.browser.data.DataNMM\nimport org.dweb_browser.browser.desk.DeskNMM\nimport org.dweb_browser.browser.download.DownloadNMM\nimport org.dweb_browser.browser.http.installDevRenderer\nimport org.dweb_browser.browser.jmm.JmmNMM\nimport org.dweb_browser.browser.jsProcess.JsProcessNMM\nimport org.dweb_browser.browser.mwebview.MultiWebViewNMM\nimport org.dweb_browser.browser.nativeui.torch.TorchNMM\nimport org.dweb_browser.browser.scan.SmartScanNMM\nimport org.dweb_browser.browser.search.SearchNMM\nimport org.dweb_browser.browser.web.BrowserNMM\nimport org.dweb_browser.browser.zip.ZipNMM\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.boot.BootNMM\nimport org.dweb_browser.core.std.dns.DnsNMM\nimport org.dweb_browser.core.std.file.FileNMM\nimport org.dweb_browser.core.std.http.HttpNMM\nimport org.dweb_browser.core.std.http.MultipartNMM\nimport org.dweb_browser.core.std.permission.debugPermission\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.helper.SuspendOnce\nimport org.dweb_browser.helper.addDebugTags\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.sys.biometrics.BiometricsNMM\nimport org.dweb_browser.sys.clipboard.ClipboardNMM\nimport org.dweb_browser.sys.configure.ConfigNMM\nimport org.dweb_browser.sys.contact.ContactNMM\nimport org.dweb_browser.sys.device.DeviceNMM\nimport org.dweb_browser.sys.filechooser.FileChooserNMM\nimport org.dweb_browser.sys.haptics.HapticsNMM\nimport org.dweb_browser.sys.keychain.KeychainNMM\nimport org.dweb_browser.sys.location.LocationNMM\nimport org.dweb_browser.sys.media.MediaNMM\nimport org.dweb_browser.sys.mediacapture.MediaCaptureNMM\nimport org.dweb_browser.sys.motionSensors.MotionSensorsNMM\nimport org.dweb_browser.sys.notification.NotificationNMM\nimport org.dweb_browser.sys.permission.PermissionApplicantTMM\nimport org.dweb_browser.sys.permission.PermissionNMM\nimport org.dweb_browser.sys.permission.PermissionProviderTNN\nimport org.dweb_browser.sys.share.ShareNMM\nimport org.dweb_browser.sys.shortcut.ShortcutNMM\nimport org.dweb_browser.sys.toast.ToastNMM\n\n\nclass DwebBrowserLauncher(\n  debugTags: List<String> = listOf(),\n  private val extMM: List<ExtMicroModule<*>> = listOf(),\n) {\n  constructor(\n    debugTag: String?,\n    extMM: List<ExtMicroModule<*>> = listOf(),\n  ) : this(\n    debugTags = when (debugTag) {\n      null -> emptyList()\n      \"*\", \"true\" -> listOf(\"/.+/\")\n      else -> listOf(debugTag)\n    },\n    extMM = extMM,\n  )\n\n  class ExtMicroModule<out T : MicroModule>(\n    factory: () -> T,\n    val boot: Boolean,\n    internal val onSetup: (@UnsafeVariance T) -> Unit = {},\n  ) {\n    internal val instance by lazy { factory() }\n  }\n\n  init {/*when (DEVELOPER.CURRENT) {\n      DEVELOPER.GAUBEE -> addDebugTags(listOf(\"/.+/\"))\n      DEVELOPER.WaterbangXiaoMi -> addDebugTags(listOf(\"/.+/\"))\n      DEVELOPER.WaterBang -> addDebugTags(listOf(\"/.+/\"))\n      DEVELOPER.Kingsword09 -> addDebugTags(listOf(\"/.+/\"))\n      DEVELOPER.HLOppo -> addDebugTags(listOf(\"/.+/\"))\n      else -> addDebugTags(listOf())\n    }*/\n\n    addDebugTags(debugTags)\n  }\n\n  /// 初始化DNS服务\n  val dnsNMM = DnsNMM()\n\n  suspend fun <T : MicroModule> T.setup() = this.also {\n    dnsNMM.install(this)\n  }\n\n  suspend fun launch(): DnsNMM.DnsRuntime {\n    val permissionNMM = PermissionNMM().setup()\n\n    /// 安装系统应用\n    val jsProcessNMM = JsProcessNMM().setup()\n    val multiWebViewNMM = MultiWebViewNMM().setup()\n    val httpNMM = HttpNMM().setup()\n    httpNMM.installDevRenderer()\n\n    /// 安装系统桌面\n    val browserNMM = BrowserNMM().setup()\n\n    /// 下载功能\n    val downloadNMM = DownloadNMM().setup()\n    val zipNMM = ZipNMM().setup()\n\n    val mediaCaptureNMM = MediaCaptureNMM().setup()\n    val contactNMM = ContactNMM().setup()\n    val shortcutNMM = ShortcutNMM().setup()\n    val searchNMM = SearchNMM().setup()\n    /// 扫码\n    val smartScanNMM = SmartScanNMM().setup()\n    ///安装剪切板\n    val clipboardNMM = ClipboardNMM().setup()\n    ///设备信息\n    val deviceNMM = DeviceNMM().setup()\n    val configNMM = ConfigNMM().setup()\n    ///位置\n    val locationNMM = LocationNMM().setup()\n//    /// 蓝牙\n//    val bluetoothNMM = BluetoothNMM().setup()\n    // 标准文件模块\n    val fileNMM = FileNMM().setup()\n    /// NFC\n//  val nfcNMM = NfcNMM().setup()\n    /// 通知\n    val notificationNMM = NotificationNMM().setup()\n    /// 弹窗\n    val toastNMM = ToastNMM().setup()\n    /// 分享\n    val shareNMM = ShareNMM().setup()\n    /// 振动效果\n    val hapticsNMM = HapticsNMM().setup()\n    /// 手电筒\n    val torchNMM = TorchNMM().setup()\n    /// 生物识别\n    val biometricsNMM = BiometricsNMM().setup()\n    /// 运动传感器\n    val motionSensorsNMM = MotionSensorsNMM().setup()\n    /// 媒体操作\n    val mediaNMM = MediaNMM().setup()\n    /// multipart\n    val multipartNMM = MultipartNMM().setup()\n    /// file chooser\n    val fileChooser = FileChooserNMM().setup()\n\n    val aboutNMM = AboutNMM().setup()\n\n\n    /// 安装Jmm\n    val jmmNMM = JmmNMM().setup()\n\n    /// 安装存储管理\n    val storeNMMSetup = SuspendOnce { DataNMM().setup() }\n    envSwitch.watch(ENV_SWITCH_KEY.DWEBVIEW_PROFILE) {\n      if (IDWebView.isEnableProfile) {\n        storeNMMSetup()\n      }\n    }\n    val keyChainNMM = KeychainNMM().setup()\n    val deskNMM = DeskNMM().setup()\n    val bootMmidList = mutableListOf(\n      deviceNMM.mmid, // 为了直接初始化设备ID\n      downloadNMM.mmid, // 为了让jmmNMM判断是，download已具备\n      jmmNMM.mmid,// 为了使得桌面能够显示模块管理，以及安装的相应应用图标\n      browserNMM.mmid, // 为了启动后能够顺利加载添加到桌面的哪些数据，不加载browser界面\n      deskNMM.mmid,// 桌面\n      shortcutNMM.mmid, // 为了启动时，注入快捷内容\n      httpNMM.mmid,// 启动时，初始化 pingPong\n    )\n\n    for (mm in extMM) {\n      mm.instance.also {\n        it.setup()\n        mm.onSetup(it)\n        if (mm.boot) {\n          bootMmidList.add(it.mmid)\n        }\n      }\n    }\n\n    /// 启动程序\n    val bootNMM = BootNMM(bootMmidList).setup()\n\n\n    /// 内部测试模块\n    if (debugPermission.isEnable) {\n      PermissionProviderTNN().setup()\n      PermissionApplicantTMM().setup()\n    }\n\n\n    /// 启动\n    val dnsRuntime = dnsNMM.bootstrap()\n    dnsRuntime.boot(bootNMM)\n    return dnsRuntime\n  }\n}"},{"language":"kotlin","path":"about/AboutI18nResource.kt","content":"package org.dweb_browser.browser.about\n\nimport org.dweb_browser.helper.compose.Language\nimport org.dweb_browser.helper.compose.SimpleI18nResource\n\nobject AboutI18nResource {\n  val shortName = SimpleI18nResource(Language.ZH to \"关于\", Language.EN to \"About\")\n  val pageTitle = SimpleI18nResource(\n    Language.ZH to \"设备的信息与设置\",\n    Language.EN to \"Device Information and Settings\",\n  )\n  val appName = SimpleI18nResource(Language.ZH to \"应用名\", Language.EN to \"App Name\")\n  val appVersion = SimpleI18nResource(Language.ZH to \"应用版本号\", Language.EN to \"App Version\")\n  val os = SimpleI18nResource(Language.ZH to \"操作系统\", Language.EN to \"OS\")\n  val arch = SimpleI18nResource(Language.ZH to \"架构\", Language.EN to \"Arch Name\")\n  val brand = SimpleI18nResource(Language.ZH to \"品牌\", Language.EN to \"Brand\")\n  val modelName = SimpleI18nResource(Language.ZH to \"型号\", Language.EN to \"Model\")\n  val osName = SimpleI18nResource(Language.ZH to \"系统名\", Language.EN to \"OS Name\")\n  val osVersion = SimpleI18nResource(Language.ZH to \"系统版本号\", Language.EN to \"OS Version\")\n  val webviewVersion =\n    SimpleI18nResource(Language.ZH to \"WebView 版本\", Language.EN to \"WebView Version\")\n  val cpuCoresNumber =\n    SimpleI18nResource(Language.ZH to \"核心数\", Language.EN to \"Cores Number\")\n  val cpuPerformanceCoresNumber =\n    SimpleI18nResource(Language.ZH to \"高效核心数\", Language.EN to \"Performance Cores Number\")\n  val cpuEfficiencyCoresNumber =\n    SimpleI18nResource(Language.ZH to \"节能核心数\", Language.EN to \"Efficiency Cores Number\")\n  val cpuLogicalProcessorsNumber = SimpleI18nResource(Language.ZH to \"逻辑处理器数\", Language.EN to \"Logical Processors Number\")\n  val totalMemory =\n    SimpleI18nResource(Language.ZH to \"JVM总内存\", Language.EN to \"JVM Total Memory\")\n  val freeMemory =\n    SimpleI18nResource(Language.ZH to \"JVM剩余内存\", Language.EN to \"JVM Free Memory\")\n  val maximumMemory =\n    SimpleI18nResource(Language.ZH to \"JVM最大内存\", Language.EN to \"JVM Maximum Memory\")\n  val javaVersion = SimpleI18nResource(Language.ZH to \"Java 版本\", Language.EN to \"Java Version\")\n  val javaVendor = SimpleI18nResource(Language.ZH to \"Java 提供商\", Language.EN to \"Java Vendor\")\n  val sdkInt = SimpleI18nResource(Language.ZH to \"SDK 版本\", Language.EN to \"SDK Version\")\n  val deviceName = SimpleI18nResource(Language.ZH to \"设备名\", Language.EN to \"Device Name\")\n  val hardware = SimpleI18nResource(Language.ZH to \"硬件\", Language.EN to \"Hardware\")\n  val supportAbis = SimpleI18nResource(Language.ZH to \"支持的Abis\", Language.EN to \"Support Abis\")\n  val manufacturer = SimpleI18nResource(Language.ZH to \"制造商\", Language.EN to \"Manufacturer\")\n  val display = SimpleI18nResource(Language.ZH to \"屏幕尺寸\", Language.EN to \"Display\")\n  val resolution = SimpleI18nResource(Language.ZH to \"屏幕分辨率\", Language.EN to \"Resolution\")\n  val density = SimpleI18nResource(Language.ZH to \"屏幕像素密度\", Language.EN to \"DensityDpi\")\n  val refreshRate = SimpleI18nResource(Language.ZH to \"屏幕最高帧率\", Language.EN to \"Refresh Rate\")\n  val memory =\n    SimpleI18nResource(Language.ZH to \"内存 已用/全部\", Language.EN to \"Memory Usage/Total\")\n  val ram = SimpleI18nResource(Language.ZH to \"运行内存\", Language.EN to \"RAM\")\n  val storage =\n    SimpleI18nResource(Language.ZH to \"存储 已用/全部\", Language.EN to \"Storage Usage/Total\")\n  val status = SimpleI18nResource(Language.ZH to \"状态\", Language.EN to \"Status\")\n  val charging = SimpleI18nResource(Language.ZH to \"充电中\", Language.EN to \"Charging\")\n  val discharging = SimpleI18nResource(Language.ZH to \"放电中\", Language.EN to \"Discharging\")\n  val health = SimpleI18nResource(Language.ZH to \"健康\", Language.EN to \"Health\")\n  val percent = SimpleI18nResource(Language.ZH to \"百分比\", Language.EN to \"Percent\")\n  val version = SimpleI18nResource(Language.ZH to \"版本\", Language.EN to \"Version\")\n  val patch = SimpleI18nResource(Language.ZH to \"补丁\", Language.EN to \"Patch\")\n  val app = SimpleI18nResource(Language.ZH to \"应用\", Language.EN to \"Application\")\n  val webview = SimpleI18nResource(Language.ZH to \"WebView 特性\", Language.EN to \"WebView Features\")\n  val html5test = SimpleI18nResource(Language.ZH to \"HTML5 测试\", Language.EN to \"HTML5 Test\")\n  val system = SimpleI18nResource(Language.ZH to \"系统\", Language.EN to \"System\")\n  val battery = SimpleI18nResource(Language.ZH to \"电池\", Language.EN to \"Battery\")\n  val experimental = SimpleI18nResource(Language.ZH to \"实验性功能\", Language.EN to \"Experimental\")\n  val experimentalChangedTip = SimpleI18nResource(\n    Language.ZH to \"您的更改将在您下次重新启动 DwebBrowser 时生效。\",\n    Language.EN to \"Your changes will take effect the next time you relaunch DwebBrowser.\"\n  )\n  val brightness = SimpleI18nResource(Language.ZH to \"亮度\", Language.EN to \"Brightness\")\n  val dynamicIsland = SimpleI18nResource(Language.ZH to \"灵动岛\", Language.EN to \"Dynamic Island\")\n  val isTrue = SimpleI18nResource(Language.ZH to \"有\", Language.EN to \"True\")\n  val isFalse = SimpleI18nResource(Language.ZH to \"无\", Language.EN to \"False\")\n  val chip = SimpleI18nResource(Language.ZH to \"芯片\", Language.EN to \"Chip\")\n  val hostName = SimpleI18nResource(Language.ZH to \"主机名\", Language.EN to \"Host Name\")\n  val adapterRam = SimpleI18nResource(Language.ZH to \"内存容量\", Language.EN to \"Adapter RAM\")\n  val capacity = SimpleI18nResource(Language.ZH to \"容量\", Language.EN to \"Capacity\")\n  val speed = SimpleI18nResource(Language.ZH to \"速度\", Language.EN to \"Speed\")\n  val disk = SimpleI18nResource(Language.ZH to \"磁盘\", Language.EN to \"Disk\")\n}"},{"language":"kotlin","path":"about/AboutNMM.kt","content":"package org.dweb_browser.browser.about\n\nimport dweb_browser_kmp.browser.generated.resources.Res\nimport io.ktor.http.HttpStatusCode\nimport io.ktor.http.path\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlinx.coroutines.Deferred\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.first\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.file.ext.ResponseLocalFileBase\nimport org.dweb_browser.core.std.http.DwebHttpServerOptions\nimport org.dweb_browser.core.std.http.createHttpDwebServer\nimport org.dweb_browser.dwebview.DWebViewOptions\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.dwebview.create\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.UUID\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.pure.http.PureResponse\nimport org.dweb_browser.sys.window.core.helper.setStateFromManifest\nimport org.dweb_browser.sys.window.ext.getMainWindow\nimport org.dweb_browser.sys.window.ext.onRenderer\nimport org.jetbrains.compose.resources.ExperimentalResourceApi\n\nclass AboutNMM : NativeMicroModule(\"about.browser.dweb\", \"About\") {\n  init {\n    name = AboutI18nResource.shortName.text\n    short_name = AboutI18nResource.shortName.text\n    categories = listOf(\n      MICRO_MODULE_CATEGORY.Application\n    )\n    icons = listOf(\n      ImageResource(src = \"file:///sys/browser-icons/$mmid.svg\", type = \"image/svg+xml\")\n    )\n    val brandMap = ENV_SWITCH_KEY.entries.mapNotNull { it.experimental }.associate { brandData ->\n      brandData.brand to brandData.disableVersion\n    }.toMutableMap()\n    ENV_SWITCH_KEY.entries.forEach { switchKey ->\n      val brandData = switchKey.experimental ?: return@forEach\n      if (envSwitch.isEnabled(switchKey)) {\n        brandMap[brandData.brand] = brandData.enableVersion\n      }\n    }\n    brandMap.forEach { (brand, version) ->\n      IDWebView.Companion.brands.add(IDWebView.UserAgentBrandData(brand, version))\n    }\n  }\n\n  inner class AboutRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n    override suspend fun _bootstrap() {\n      scopeLaunch(cancelable = true) {\n        startHtml5TestServer()\n      }\n      onRenderer {\n        getMainWindow().apply {\n          setStateFromManifest(manifest)\n          openAboutPage(id)\n        }\n      }\n    }\n\n    @OptIn(ExperimentalResourceApi::class)\n    private suspend fun startHtml5TestServer() {\n      val html5testServer = createHttpDwebServer(DwebHttpServerOptions(subdomain = \"html5test\"))\n      val serverIpc = html5testServer.listen()\n      serverIpc.onRequest(\"html5test server\").collectIn(mmScope) { event ->\n        val request = event.consume()\n        val filePath = request.uri.encodedPath\n        val response = runCatching {\n          val resBinary = Res.readBytes(\"files/browser-html5test${filePath}\")\n          ResponseLocalFileBase(filePath, false).returnFile(resBinary)\n        }.getOrNull()\n        serverIpc.postResponse(request.reqId, response ?: PureResponse(HttpStatusCode.NotFound))\n      }\n      onShutdown { scopeLaunch(cancelable = true) { html5testServer.close() } }\n      val webview = IDWebView.create(this,\n        DWebViewOptions(url = html5testServer.startResult.urlInfo.buildInternalUrl { path(\"index.html\") }\n          .toString()))\n\n      _html5testWebView.complete(webview)\n      webview.onReady.first()\n      scopeLaunch(cancelable = true) {\n        val scoreMessageChannel = webview.createMessageChannel()\n        webview.postMessage(\"score-channel\", listOf(scoreMessageChannel.port2))\n        for (event in scoreMessageChannel.port1.onMessage) {\n          _html5testScore.value = event.text\n        }\n      }\n    }\n\n    private val _html5testWebView = CompletableDeferred<IDWebView>()\n    val html5testWebView get() = _html5testWebView as Deferred<IDWebView>\n    private val _html5testScore = MutableStateFlow<String?>(null)\n    val html5testScore = _html5testScore as StateFlow<String?>\n\n    override suspend fun _shutdown() {}\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = AboutRuntime(bootstrapContext)\n}\n\nexpect suspend fun AboutNMM.AboutRuntime.openAboutPage(id: UUID)\n\n"},{"language":"kotlin","path":"about/AboutRender.kt","content":"package org.dweb_browser.browser.about\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxScope\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.heightIn\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ArrowForwardIos\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Switch\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.produceState\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.common.WindowControllerBinding\nimport org.dweb_browser.browser.jmm.JsMicroModule\nimport org.dweb_browser.dwebview.RenderWithScale\nimport org.dweb_browser.helper.UUID\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.helper.compose.hex\nimport org.dweb_browser.helper.getCompletedOrNull\nimport org.dweb_browser.sys.window.core.LocalWindowController\nimport org.dweb_browser.sys.window.core.WindowContentRenderScope\nimport org.dweb_browser.sys.window.core.WindowContentScaffoldWithTitleText\nimport org.dweb_browser.sys.window.core.constant.LocalWindowMM\nimport org.dweb_browser.sys.window.core.windowAdapterManager\nimport org.dweb_browser.sys.window.helper.LocalWindowControllerTheme\n\ninternal fun provideAboutRender(\n  wid: UUID,\n  render: @Composable (modifier: Modifier) -> Unit,\n) {\n  windowAdapterManager.provideRender(wid) { modifier ->\n    AboutPage(modifier, AboutI18nResource.pageTitle(), content = render)\n  }\n}\n\nprivate val darkBg = Color.Black\nprivate val lightBg = Color.hex(\"#F5F5FA\") ?: Color.Gray\n\n@Composable\ninternal fun WindowContentRenderScope.AboutPage(\n  modifier: Modifier,\n  title: String,\n  content: @Composable (Modifier) -> Unit,\n) {\n  WindowContentScaffoldWithTitleText(\n    modifier = modifier,\n    containerColor = when {\n      LocalWindowControllerTheme.current.isDark -> darkBg\n      else -> lightBg\n    },\n    topBarTitleText = title,\n  ) { paddingValues ->\n    content(Modifier.padding(paddingValues).fillMaxSize())\n  }\n}\n\n\n@Composable\nfun AboutDetailsBase(modifier: Modifier = Modifier, content: @Composable RowScope.() -> Unit) {\n  Row(\n    modifier = modifier.fillMaxWidth().padding(8.dp).heightIn(min = 16.dp),\n    horizontalArrangement = Arrangement.SpaceBetween,\n    verticalAlignment = Alignment.CenterVertically,\n    content = content,\n  )\n}\n\n@Composable\nfun AboutDetailsItem(modifier: Modifier = Modifier, labelName: String, text: String) {\n  AboutDetailsBase(modifier) {\n    Text(\n      text = labelName,\n      style = MaterialTheme.typography.labelMedium,\n    )\n    Text(\n      text = text,\n      style = MaterialTheme.typography.bodySmall,\n      softWrap = false,\n      overflow = TextOverflow.Ellipsis\n    )\n  }\n}\n\n@Composable\nfun AboutDetailsNav(\n  onClick: () -> Unit,\n  enabled: Boolean = true,\n  modifier: Modifier = Modifier,\n  labelName: String,\n  text: String,\n  icon: (@Composable () -> Unit)? = null,\n) {\n  AboutDetailsBase(modifier.clickable(onClick = onClick, enabled = enabled)) {\n    Text(\n      text = labelName,\n      style = MaterialTheme.typography.labelMedium,\n    )\n    Row(verticalAlignment = Alignment.CenterVertically) {\n      Text(\n        text = text,\n        style = MaterialTheme.typography.bodySmall,\n        softWrap = false,\n        overflow = TextOverflow.Ellipsis\n      )\n      when (icon) {\n        null -> Icon(\n          Icons.AutoMirrored.Filled.ArrowForwardIos,\n          contentDescription = \"more\",\n          modifier = Modifier.padding(start = 8.dp).height(16.dp),\n        )\n\n        else -> icon()\n      }\n    }\n  }\n}\n\n@Composable\nfun AboutDetailsListItem(modifier: Modifier = Modifier, labelName: String, textList: List<String>) {\n  textList.forEachIndexed { index, text ->\n    if (index == 0) {\n      AboutDetailsItem(modifier = modifier, labelName = labelName, text = text)\n    } else {\n      AboutDetailsItem(modifier = modifier, labelName = \"\", text = text)\n    }\n  }\n}\n\n@Composable\nfun AboutTitle(title: String) {\n  Text(\n    modifier = Modifier.padding(start = 16.dp, top = 8.dp),\n    text = title,\n    style = MaterialTheme.typography.labelMedium,\n  )\n}\n\n\n@Composable\nfun AboutColumnContainer(\n  modifier: Modifier = Modifier,\n  content: @Composable ColumnScope.() -> Unit,\n) {\n  Column(\n    modifier = modifier.padding(horizontal = 16.dp, vertical = 8.dp).fillMaxWidth()\n      .clip(RoundedCornerShape(8.dp)).background(color = MaterialTheme.colorScheme.background),\n    content = content,\n  )\n}\n\n@Composable\nfun AboutContainer(modifier: Modifier = Modifier, content: @Composable BoxScope.() -> Unit) {\n  Box(\n    modifier = modifier.padding(horizontal = 16.dp, vertical = 8.dp).fillMaxWidth().background(\n      color = MaterialTheme.colorScheme.background, shape = RoundedCornerShape(8.dp)\n    ), content = content\n  )\n}\n\n@Composable\nfun AboutHorizontalDivider() {\n  Spacer(Modifier.height(8.dp))\n}\n\ndata class AboutAppInfo(\n  val appName: String = \"Dweb Browser\",\n  val appVersion: String,\n  val webviewVersion: String,\n  val jmmVersion: Int = JsMicroModule.VERSION,\n  val jmmPatch: Int = JsMicroModule.PATCH,\n)\n\n@Composable\nfun AboutAppInfoRender(\n  appInfo: AboutAppInfo,\n  webViewFeaturesContent: @Composable ColumnScope.() -> Unit = {},\n) {\n  Column(\n    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp).fillMaxWidth().background(\n      color = MaterialTheme.colorScheme.background, shape = RoundedCornerShape(8.dp)\n    )\n  ) {\n    AboutDetailsItem(labelName = AboutI18nResource.appName(), text = appInfo.appName)\n    AboutDetailsItem(\n      labelName = AboutI18nResource.appVersion(), text = appInfo.appVersion\n    )\n    AboutDetailsItem(\n      labelName = AboutI18nResource.webviewVersion(), text = appInfo.webviewVersion\n    )\n    webViewFeaturesContent()\n    val nav = LocalWindowController.current.navigation\n    val aboutNMM = LocalWindowMM.current as AboutNMM.AboutRuntime\n    val score by aboutNMM.html5testScore.collectAsState()\n    AboutDetailsNav(\n      onClick = {\n        nav.pushPage { modifier ->\n          Html5TestRender(modifier)\n        }\n      }, labelName = AboutI18nResource.html5test(), text = score ?: \"\", icon = when (score) {\n        null -> ({ CircularProgressIndicator(Modifier.size(16.dp), strokeWidth = 2.dp) })\n        else -> null\n      }\n    )\n    AboutDetailsItem(\n      labelName = \"JMM ${AboutI18nResource.version()}\", text = appInfo.jmmVersion.toString()\n    )\n    AboutDetailsItem(\n      labelName = \"JMM ${AboutI18nResource.patch()}\", text = appInfo.jmmPatch.toString()\n    )\n  }\n}\n\n@Composable\nfun EnvSwitcherRender() {\n  val changedKeys = remember { mutableListOf<ENV_SWITCH_KEY>() }\n  AboutTitle(AboutI18nResource.experimental())\n  if (changedKeys.isNotEmpty()) {\n    Text(\n      modifier = Modifier.padding(start = 24.dp, top = 8.dp),\n      text = AboutI18nResource.experimentalChangedTip(),\n      style = MaterialTheme.typography.labelSmall,\n      color = MaterialTheme.colorScheme.primary,\n    )\n  }\n  Column(\n    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp).fillMaxWidth().background(\n      color = MaterialTheme.colorScheme.background, shape = RoundedCornerShape(8.dp)\n    )\n  ) {\n    for (switchKey in ENV_SWITCH_KEY.entries) {\n      val experimental = switchKey.experimental?.findExperimentalKey() ?: continue\n      key(switchKey) {\n        Row(\n          modifier = Modifier.fillMaxWidth().padding(8.dp),\n          horizontalArrangement = Arrangement.SpaceBetween,\n          verticalAlignment = Alignment.CenterVertically\n        ) {\n          Column(Modifier.weight(1f).padding(end = 8.dp)) {\n            Text(\n              text = experimental.title(),\n              style = MaterialTheme.typography.labelMedium,\n              modifier = Modifier.padding(bottom = 8.dp)\n            )\n            Text(\n              experimental.description(),\n              modifier = Modifier.padding(start = 8.dp),\n              style = MaterialTheme.typography.bodySmall\n            )\n          }\n          val originEnabled = remember { envSwitch.isEnabled(switchKey) }\n          var isEnabled by remember { mutableStateOf(originEnabled) }\n          Switch(checked = isEnabled, onCheckedChange = {\n            isEnabled = !isEnabled\n            if (isEnabled != originEnabled) {\n              changedKeys.add(switchKey)\n            } else {\n              changedKeys.remove(switchKey)\n            }\n            when {\n              isEnabled -> envSwitch.enable(switchKey)\n              else -> envSwitch.disable(switchKey)\n            }\n          })\n        }\n      }\n    }\n\n  }\n}\n\n@Composable\nfun WindowContentRenderScope.Html5TestRender(modifier: Modifier) {\n  AboutPage(modifier = modifier, title = AboutI18nResource.html5test()) { pageContentModifier ->\n    val aboutNMM = LocalWindowMM.current as AboutNMM.AboutRuntime\n    when (val webview = produceState(aboutNMM.html5testWebView.getCompletedOrNull()) {\n      value = aboutNMM.html5testWebView.await()\n    }.value) {\n      null -> Box(\n        pageContentModifier, contentAlignment = Alignment.Center\n      ) { CircularProgressIndicator(Modifier.size(64.dp)) }\n\n      else -> {\n        webview.RenderWithScale(scale, pageContentModifier)\n        webview.WindowControllerBinding()\n      }\n    }\n  }\n}\n"},{"language":"kotlin","path":"common/CommonTextField.ext.kt","content":"package org.dweb_browser.browser.common\n\nimport androidx.compose.foundation.text.KeyboardActionScope\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.input.TextFieldValue\n\n@Composable\nexpect fun CommonTextField(\n  value: TextFieldValue,\n  onValueChange: (TextFieldValue) -> Unit,\n  modifier: Modifier = Modifier,\n  enabled: Boolean = true,\n  readOnly: Boolean = false,\n  textStyle: TextStyle = TextStyle.Default,\n  singleLine: Boolean = false,\n  maxLines: Int = if (singleLine) 1 else Int.MAX_VALUE,\n  minLines: Int = 1,\n  onKeyboardSearch: KeyboardActionScope.() -> Unit,\n  decorationBox: @Composable (innerTextField: @Composable () -> Unit) -> Unit =\n    @Composable { innerTextField -> innerTextField() },\n)"},{"language":"kotlin","path":"common/CommonTopBar.kt","content":"package org.dweb_browser.browser.common\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBackIosNew\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\n\n@Composable\nfun CommonSimpleTopBar(title: String, onBack: () -> Unit) {\n  Box(\n    modifier = Modifier\n      .fillMaxWidth()\n      .height(64.dp),\n    contentAlignment = Alignment.CenterStart\n  ) {\n    IconButton(onClick = { onBack() }) {\n      Icon(\n        imageVector = Icons.Default.ArrowBackIosNew,\n        contentDescription = \"Back\",\n        modifier = Modifier\n          .size(48.dp)\n          .padding(8.dp)\n      )\n    }\n    Text(\n      text = title,\n      modifier = Modifier\n        .fillMaxWidth()\n        .padding(start = 48.dp, end = 48.dp),\n      textAlign = TextAlign.Center,\n      fontSize = 18.sp,\n      fontWeight = FontWeight.W700\n    )\n  }\n}"},{"language":"kotlin","path":"common/PureViewController.ext.kt","content":"package org.dweb_browser.browser.common\n\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.dwebview.DWebViewOptions\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.helper.platform.IPureViewController\n\nexpect suspend fun IPureViewController.createDwebView(\n  remoteMM: MicroModule.Runtime,\n  options: DWebViewOptions,\n): IDWebView\n"},{"language":"kotlin","path":"common/SplashView.kt","content":"package org.dweb_browser.browser.common\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.updateTransition\nimport androidx.compose.animation.slideInVertically\nimport androidx.compose.animation.slideOutVertically\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.navigationBarsPadding\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.widthIn\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.FilledTonalButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Surface\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.LinkAnnotation\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.withLink\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.zIndex\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.helper.PrivacyUrl\nimport org.dweb_browser.helper.compose.iosTween\nimport org.dweb_browser.helper.platform.theme.dimens\n\n@Composable\nfun SplashPrivacyDialog(\n  openHome: () -> Unit, openWebView: (String) -> Unit, closeApp: () -> Unit,\n) {\n  var showPrivacyDeny by remember { mutableStateOf(false) }\n  val showPrivacyView by remember(showPrivacyDeny) { mutableStateOf(!showPrivacyDeny) }\n\n  Box(modifier = Modifier.fillMaxSize()) {\n    Box(modifier = Modifier.widthIn(max = 600.dp).align(Alignment.BottomCenter)) {\n      updateTransition(showPrivacyView, \"PrivacyView\").AnimatedVisibility(\n        visible = { it },\n        modifier = Modifier.zIndex(if (showPrivacyView) 1f else 0f),\n        enter = slideInVertically(\n          initialOffsetY = { it }, animationSpec = iosTween(durationIn = showPrivacyView)\n        ),\n        exit = slideOutVertically(\n          targetOffsetY = { it }, animationSpec = iosTween(durationIn = showPrivacyView)\n        ),\n      ) {\n        SplashPrivacyView(\n          openWebView = openWebView,\n          onConfirm = openHome,\n          onDismiss = { showPrivacyDeny = true },\n        )\n      }\n    }\n    Box(modifier = Modifier.widthIn(max = 600.dp).align(Alignment.BottomCenter)) {\n      updateTransition(showPrivacyDeny, \"PrivacyDeny\").AnimatedVisibility(\n        visible = { it },\n        modifier = Modifier.zIndex(if (showPrivacyDeny) 1f else 0f),\n        enter = slideInVertically(\n          initialOffsetY = { it }, animationSpec = iosTween(durationIn = showPrivacyDeny)\n        ),\n        exit = slideOutVertically(\n          targetOffsetY = { it }, animationSpec = iosTween(durationIn = showPrivacyDeny)\n        ),\n      ) {\n        SplashPrivacyDeny(Modifier, closeApp) { showPrivacyDeny = false }\n      }\n    }\n  }\n}\n\n@Composable\nprivate fun SplashPrivacyView(\n  openWebView: (String) -> Unit, onConfirm: () -> Unit, onDismiss: () -> Unit,\n  modifier: Modifier = Modifier,\n) {\n  BottomSheet(modifier) {\n    Text(\n      text = BrowserI18nResource.privacy_title(),\n      style = MaterialTheme.typography.titleMedium,\n    )\n    Spacer(modifier = Modifier.height(12.dp))\n\n    val privacyContent = BrowserI18nResource.privacy_content()\n    val privacyPolicy = BrowserI18nResource.privacy_policy()\n    val annotatedString = buildAnnotatedString {\n      privacyContent.split(privacyPolicy).also { parts ->\n        parts.forEachIndexed { index, part ->\n          if (index > 0) {\n            withStyle(SpanStyle(MaterialTheme.colorScheme.primary)) {\n              withLink(LinkAnnotation.Clickable(privacyPolicy) {\n                openWebView(PrivacyUrl)\n              }) {\n                append(privacyPolicy)\n              }\n            }\n          }\n          append(part)\n        }\n      }\n    }\n    // Use Text or BasicText and pass an AnnotatedString that contains a LinkAnnotation\n    Text(\n      text = annotatedString,\n      style = MaterialTheme.typography.bodyMedium,\n    )\n    Spacer(modifier = Modifier.height(24.dp))\n\n    BottomButton(\n      dismissStr = BrowserI18nResource.privacy_button_refuse(),\n      confirmStr = BrowserI18nResource.privacy_button_agree(),\n      onDismiss = onDismiss,\n      onConfirm = onConfirm\n    )\n  }\n}\n\n\n/**\n * 这个是不同意协议后，弹出的再次确认框\n */\n@Composable\nprivate fun SplashPrivacyDeny(modifier: Modifier, onDismiss: () -> Unit, onConfirm: () -> Unit) {\n  BottomSheet(modifier) {\n    Text(\n      text = BrowserI18nResource.privacy_title(),\n      style = MaterialTheme.typography.titleMedium,\n    )\n    Spacer(modifier = Modifier.height(12.dp))\n\n    Text(\n      text = BrowserI18nResource.privacy_content_deny(),\n      style = MaterialTheme.typography.bodyMedium,\n    )\n    Spacer(modifier = Modifier.height(24.dp))\n\n    BottomButton(\n      dismissStr = BrowserI18nResource.privacy_button_exit(),\n      confirmStr = BrowserI18nResource.privacy_button_i_know(),\n      onDismiss = onDismiss,\n      onConfirm = onConfirm\n    )\n  }\n}\n\n\n@Composable\nprivate fun BottomSheet(modifier: Modifier, content: @Composable ColumnScope.() -> Unit) {\n  Surface(\n    modifier = modifier.fillMaxWidth(),\n    shape = RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp),\n    shadowElevation = MaterialTheme.dimens.medium,\n  ) {\n    Column(\n      modifier = Modifier.fillMaxWidth().padding(24.dp), content = content\n    )\n  }\n}\n\n@Composable\nprivate fun BottomButton(\n  dismissStr: String, confirmStr: String, onDismiss: () -> Unit, onConfirm: () -> Unit,\n) {\n  BoxWithConstraints(Modifier.fillMaxWidth()) {\n    val highEmphasisButtonSize = maxWidth * 0.385f\n    Row(\n      modifier = Modifier.fillMaxWidth().navigationBarsPadding(),\n      horizontalArrangement = Arrangement.End\n    ) {\n      TextButton(onDismiss) {\n        Text(text = dismissStr)\n      }\n      Spacer(modifier = Modifier.width(24.dp))\n      FilledTonalButton(onConfirm, modifier = Modifier.widthIn(highEmphasisButtonSize)) {\n        Text(confirmStr)\n      }\n    }\n  }\n}"},{"language":"kotlin","path":"common/WebViewInWindowEffect.kt","content":"package org.dweb_browser.browser.common\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.sys.window.core.LocalWindowController\nimport org.dweb_browser.sys.window.helper.LocalWindowControllerTheme\nimport org.dweb_browser.sys.window.helper.watchedState\n\n@Composable\nfun IDWebView.WindowControllerBinding() {\n  val win = LocalWindowController.current\n  val colorScheme by win.watchedState { colorScheme }\n  /// 绑定暗色模式\n  LaunchedEffect(colorScheme) {\n    setPrefersColorScheme(colorScheme.toWebColorScheme())\n  }\n  /// 绑定默认背景色\n  val themeColor = LocalWindowControllerTheme.current.themeColor\n  LaunchedEffect(themeColor) {\n    backgroundColor = themeColor\n  }\n}"},{"language":"kotlin","path":"common/WindowController.ext.kt","content":"package org.dweb_browser.browser.common\n\n\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.dwebview.WebColorScheme\nimport org.dweb_browser.sys.window.core.WindowController\nimport org.dweb_browser.sys.window.core.constant.WindowColorScheme\n\nexpect suspend fun WindowController.createDwebView(\n  remoteMM: MicroModule.Runtime,\n  url: String,\n): IDWebView\n\nfun WindowColorScheme.toWebColorScheme() = when (this) {\n  WindowColorScheme.Dark -> WebColorScheme.Dark\n  WindowColorScheme.Light -> WebColorScheme.Light\n  WindowColorScheme.Normal -> WebColorScheme.Normal\n}"},{"language":"kotlin","path":"data/DataController.kt","content":"package org.dweb_browser.browser.data\n\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.browser.data.render.Render\nimport org.dweb_browser.core.help.types.IMicroModuleManifest\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.dwebview.ProfileName\nimport org.dweb_browser.dwebview.getDwebProfileStoreInstance\nimport org.dweb_browser.helper.SuspendOnce\nimport org.dweb_browser.sys.window.core.WindowController\nimport org.dweb_browser.sys.window.core.windowAdapterManager\n\nclass DataController(val storeNMM: DataNMM.DataRuntime) {\n  private val dWebProfileStore = SuspendOnce { getDwebProfileStoreInstance() }\n  val refreshFlow = MutableStateFlow(0f)\n  fun refresh() {\n    refreshFlow.value += 1\n  }\n\n  fun openRender(win: WindowController) {\n    windowAdapterManager.provideRender(win.id) { modifier ->\n      Render(modifier = modifier, windowRenderScope = this)\n    }\n  }\n\n  sealed interface ProfileInfo {\n    val profileName: ProfileName\n    val mmid: MMID\n  }\n\n  @Serializable\n  class ProfileDetail(override val profileName: ProfileName, val mm: IMicroModuleManifest) :\n    ProfileInfo,\n    IMicroModuleManifest by mm\n\n  class ProfileBase(override val profileName: ProfileName, override val mmid: MMID) : ProfileInfo\n\n  suspend fun loadProfileInfos() =\n    dWebProfileStore().getAllProfileNames().mapNotNull { profileName ->\n      profileName.mmid?.let { mmid ->\n        storeNMM.bootstrapContext.dns.queryAll(mmid).firstOrNull { it.mmid == mmid }.let { mm ->\n          when (mm) {\n            null -> ProfileBase(profileName, mmid)\n            else -> ProfileDetail(profileName, mm)\n          }\n        }\n      }\n    }\n\n  val deleteProfileFlow = MutableStateFlow<ProfileInfo?>(null)\n  var isRunningFlow = MutableStateFlow(false)\n  suspend fun openDeleteDialog(info: ProfileInfo) {\n    isRunningFlow.value = storeNMM.bootstrapContext.dns.isRunning(info.mmid)\n    deleteProfileFlow.value = info\n  }\n\n  fun closeDeleteDialog() {\n    deleteProfileFlow.value = null\n    deleteJobFlow.value?.invokeOnCompletion {\n      deleteJobFlow.value = null\n    }\n  }\n\n  val deleteJobFlow = MutableStateFlow<Job?>(null)\n  suspend fun deleteProfile(info: ProfileInfo) {\n    dWebProfileStore().deleteProfile(info.profileName)\n    refresh()\n  }\n}"},{"language":"kotlin","path":"data/DataI18n.kt","content":"package org.dweb_browser.browser.data\n\nimport org.dweb_browser.helper.compose.I18n\n\nobject DataI18n : I18n() {\n  val short_name = zh(\"数据管理\", \"Store Manager\")\n\n  val uninstalled = zh(\"应用已卸载\", \"The application has been uninstalled\")\n  val uninstall_running_app_title = zh(\"程序正在运行\", \"The application is running\")\n  val uninstall_running_app_tip =\n    zh1({ \"$value 正在运行，如果要清除它的数据，将会先关停应用，然后执行数据清理工作。\" },\n      { \"$value is currently running. If you want to clear its data, the application will first be shut down, and then the data cleanup process will be executed.\" })\n  val uninstall_app_tip = zh1({ \"确定要清除 $value 的应用数据吗？\" },\n    { \"Confirm to clear the application data for $value?\" })\n\n  val select_profile_for_detail_view =\n    zh(\"请选择一项数据\", \"Please select one item to view the details\")\n  val no_support_detail_view =\n    zh(\"暂时不支持数据详情的查看\", \"The data details view is not supported at present\")\n}"},{"language":"kotlin","path":"data/DataNMM.kt","content":"package org.dweb_browser.browser.data\n\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.sys.window.core.helper.setStateFromManifest\nimport org.dweb_browser.sys.window.ext.getMainWindow\nimport org.dweb_browser.sys.window.ext.onRenderer\n\n\nclass DataNMM : NativeMicroModule(\"data.browser.dweb\", DataI18n.short_name.text) {\n\n  init {\n    short_name = DataI18n.short_name.text\n    categories = listOf(\n      MICRO_MODULE_CATEGORY.Service,\n      MICRO_MODULE_CATEGORY.Database_Service,\n    ).let {\n      when {\n        envSwitch.isEnabled(ENV_SWITCH_KEY.DATA_MANAGER_GUI) -> it + MICRO_MODULE_CATEGORY.Application\n        else -> it\n      }\n    }\n    icons = listOf(\n      ImageResource(\n        src = \"file:///sys/browser-icons/data.browser.dweb.svg\",\n        type = \"image/svg+xml\",\n        // purpose = \"monochrome\"\n      )\n    )\n  }\n\n  inner class DataRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n    private val storeController = DataController(this)\n\n    override suspend fun _bootstrap() {\n      routes(\n        /** 打开渲染 */\n        \"/open\" bind PureMethod.GET by defineBooleanResponse {\n          return@defineBooleanResponse true\n        },\n      ).cors()\n\n\n      onRenderer {\n        getMainWindow().apply {\n          setStateFromManifest(manifest)\n          storeController.openRender(this)\n        }\n      }\n    }\n\n    override suspend fun _shutdown() {\n\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = DataRuntime(bootstrapContext)\n}\n"},{"language":"kotlin","path":"desk/ActivityController.kt","content":"package org.dweb_browser.browser.desk\n\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport org.dweb_browser.browser.desk.model.ActivityItem\nimport org.dweb_browser.core.module.MicroModule\n\nclass ActivityController(val deskNMM: DeskNMM.DeskRuntime) {\n  private val listFlow = MutableStateFlow(emptyList<ActivityItem>())\n  val list = listFlow.asStateFlow()\n\n  fun request(activityItem: ActivityItem): String {\n    listFlow.value += activityItem\n    return activityItem.id\n  }\n\n  private fun find(owner: MicroModule.Runtime, id: String): ActivityItem? {\n    val activityItem = listFlow.value.find { it.id == id } ?: return null\n    if (activityItem.owner.id != owner.id) return null\n    return activityItem\n  }\n\n  fun update(\n    owner: MicroModule.Runtime,\n    id: String,\n    leadingIcon: ActivityItem.Icon? = null,\n    trailingIcon: ActivityItem.Icon? = null,\n    centerTitle: ActivityItem.Content? = null,\n    bottomActions: List<ActivityItem.Action>? = null,\n  ): Boolean {\n    val activityItem = find(owner, id) ?: return false\n    leadingIcon?.also { activityItem.leadingIcon = leadingIcon }\n    trailingIcon?.also { activityItem.trailingIcon = trailingIcon }\n    centerTitle?.also { activityItem.centerTitle = centerTitle }\n    bottomActions?.also { activityItem.bottomActions = bottomActions }\n    // 修改后，强制进行显示。可以考虑挪到最前面\n    activityItem.renderProp.open = true\n    return true\n  }\n\n  fun end(owner: MicroModule.Runtime, id: String): Boolean {\n    val activityItem = find(owner, id) ?: return false\n    listFlow.value -= activityItem\n    return true\n  }\n}"},{"language":"kotlin","path":"desk/ActivitySysProtocol.kt","content":"package org.dweb_browser.browser.desk\n\nimport org.dweb_browser.browser.desk.model.ActivityItem\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.helper.randomUUID\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.queryAs\nimport org.dweb_browser.pure.http.queryAsOrNull\n\nsuspend fun DeskNMM.DeskRuntime.activityProtocol() {\n  val activityController = deskController.activityController\n  protocol(\"activity.sys.dweb\") {\n    routes(\n      /// 请求一次实时活动\n      \"/requestActivity\" bind PureMethod.GET by defineStringResponse {\n        activityController.request(\n          ActivityItem(\n            key = request.queryAsOrNull(\"key\") ?: randomUUID(),\n            owner = getRemoteRuntime(),\n            leadingIcon = request.queryAsOrNull(\"leadingIcon\") ?: ActivityItem.NoneIcon,\n            trailingIcon = request.queryAsOrNull(\"trailingIcon\") ?: ActivityItem.NoneIcon,\n            centerTitle = request.queryAs(\"centerTitle\"),\n            bottomActions = request.queryAsOrNull(\"bottomActions\") ?: emptyList(),\n          )\n        )\n      },\n      \"/updateActivity\" bind PureMethod.GET by defineBooleanResponse {\n        activityController.update(\n          owner = getRemoteRuntime(),\n          id = request.query(\"id\"),\n          leadingIcon = request.queryAsOrNull(\"leadingIcon\"),\n          trailingIcon = request.queryAsOrNull(\"trailingIcon\"),\n          centerTitle = request.queryAsOrNull(\"centerTitle\"),\n          bottomActions = request.queryAsOrNull(\"bottomActions\"),\n        )\n      },\n      \"/endActivity\" bind PureMethod.GET by defineBooleanResponse {\n        activityController.end(\n          owner = getRemoteRuntime(),\n          id = request.query(\"id\"),\n        )\n      },\n    )\n  }\n}"},{"language":"kotlin","path":"desk/AlertController.kt","content":"package org.dweb_browser.browser.desk\n\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport org.dweb_browser.helper.getValue\nimport org.dweb_browser.helper.setValue\n\nclass AlertController {\n  data class AlertMessage(val title: String?, val message: String)\n\n  val alertMessagesFlow = MutableStateFlow(listOf<AlertMessage>())\n  var alertMessages by alertMessagesFlow\n  fun showAlert(reason: Throwable) {\n    val title = reason.message\n    val message = reason.stackTraceToString()\n    alertMessages += AlertMessage(title, message)\n  }\n}"},{"language":"kotlin","path":"desk/DeskController.kt","content":"package org.dweb_browser.browser.desk\n\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.core.module.channelRequest\nimport org.dweb_browser.helper.ChangeState\nimport org.dweb_browser.helper.SuspendOnce\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.randomUUID\nimport org.dweb_browser.pure.http.PureTextFrame\n\nclass DeskController(val deskNMM: DeskNMM.DeskRuntime) {\n  val sessionId = randomUUID()\n  private val vcDeferred = CompletableDeferred<IPureViewController>()\n  fun setPureViewController(vc: IPureViewController) {\n    vcDeferred.complete(vc)\n  }\n\n  private val isV2 by lazy { envSwitch.isEnabled(ENV_SWITCH_KEY.DESKTOP_STYLE_COMPOSE) }\n\n  val getDesktopController = SuspendOnce {\n    val vc = vcDeferred.await()\n    when {\n      isV2 -> DesktopV2Controller.create(deskNMM, vc)\n      else -> DesktopV1Controller.create(deskNMM, vc)\n    }\n  }\n  val getTaskbarController = SuspendOnce {\n    val desktopController = getDesktopController()\n    when {\n      isV2 -> {\n        TaskbarV2Controller(\n          deskNMM = deskNMM,\n          deskSessionId = sessionId,\n          desktopController = desktopController,\n        )\n      }\n\n      else -> TaskbarV1Controller.create(\n        deskNMM = deskNMM,\n        deskSessionId = sessionId,\n        desktopController = desktopController,\n      )\n    }\n  }\n  val alertController = AlertController()\n\n  /**\n   * 应用变更的数据流\n   */\n  internal val dnsInstallAppsFlow = MutableSharedFlow<ChangeState<MMID>>().apply {\n    deskNMM.scopeLaunch(cancelable = true) {\n      val response = deskNMM.channelRequest(\"file://dns.std.dweb/observe/install-apps\") {\n        for (frame in income) {\n          when (frame) {\n            is PureTextFrame -> {\n              Json.decodeFromString<ChangeState<MMID>>(frame.text).also {\n                emit(it)\n              }\n            }\n\n            else -> {}\n          }\n        }\n      }\n      debugDesk(\"doObserve error\", response.status)\n    }\n  }\n\n  // app排序\n  val appSortList = DeskSortStore(deskNMM).also { appSortList ->\n    deskNMM.scopeLaunch(cancelable = true) {\n      dnsInstallAppsFlow.collect { changeState ->\n        // 强制触发一次变更\n        deskNMM.runningApps = deskNMM.runningApps.toMap()\n        // 对排序app列表进行更新\n        changeState.removes.map {\n          getDesktopController().updateFlow.emit(\"delete\")\n          appSortList.delete(it)\n        }\n        changeState.adds.map {\n          if (!appSortList.has(it)) {\n            appSortList.push(it)\n          }\n          getDesktopController().updateFlow.emit(\"add\")\n        }\n      }\n    }\n  }\n\n  suspend fun awaitReady() {\n    vcDeferred.await()\n  }\n\n  val activityController = ActivityController(deskNMM)\n}"},{"language":"kotlin","path":"desk/DeskI18n.kt","content":"package org.dweb_browser.browser.desk\n\nimport org.dweb_browser.helper.compose.I18n\n\nobject DeskI18n : I18n() {\n  val uninstall = zh(\"卸载\", \"Uninstall\")\n\n  //  val delete_weblink_title =\n//    zh1({ \"确定要删除网页链接：《$value》\" }, { \"Confirm to delete the web link: '$value'\" })\n//  val delete_app_title = zh1({ \"确定要卸载应用：$value\" }, { \"Confirm to uninstall app: $value\" })\n  val delete_weblink_title = zh(\"确定要删除网页链接\", \"Confirm to delete the web link\")\n  val delete_app_title = zh(\"确定要卸载应用\", \"Confirm to uninstall the app\")\n  val delete_app_tip = zh(\"其所有数据也将被删除\", \"All its data will also be deleted!\")\n}"},{"language":"kotlin","path":"desk/DeskNMM.kt","content":"package org.dweb_browser.browser.desk\n\nimport io.ktor.http.HttpStatusCode\nimport kotlinx.coroutines.coroutineScope\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.debugBrowser\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.core.http.router.IHandlerContext\nimport org.dweb_browser.core.http.router.ResponseException\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.http.router.bindPrefix\nimport org.dweb_browser.core.ipc.Ipc\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.dns.ext.onActivity\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.helper.Debugger\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.ReasonLock\nimport org.dweb_browser.helper.buildUrlString\nimport org.dweb_browser.helper.getValue\nimport org.dweb_browser.helper.setValue\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.PureResponse\nimport org.dweb_browser.pure.http.PureStringBody\nimport org.dweb_browser.pure.http.initCors\nimport org.dweb_browser.pure.http.queryAs\nimport org.dweb_browser.pure.http.queryAsOrNull\nimport org.dweb_browser.sys.toast.ext.showToast\nimport org.dweb_browser.sys.window.core.WindowController\nimport org.dweb_browser.sys.window.core.modal.ModalState\nimport org.dweb_browser.sys.window.core.windowInstancesManager\n\nval debugDesk = Debugger(\"desk\")\n\nclass DeskNMM : NativeMicroModule(\"desk.browser.dweb\", \"Desk\") {\n  init {\n    name = BrowserI18nResource.Desk.short_name.text\n    short_name = BrowserI18nResource.Desk.short_name.text\n    categories = listOf(MICRO_MODULE_CATEGORY.Service, MICRO_MODULE_CATEGORY.Desktop)\n    dweb_protocols = listOf(\"window.sys.dweb\", \"window.std.dweb\", \"activity.sys.dweb\")\n    icons = listOf(\n      ImageResource(\n        src = \"file:///sys/browser-icons/desk.browser.dweb.svg\",\n        type = \"image/svg+xml\",\n        // purpose = \"monochrome\"\n      )\n    )\n  }\n\n  companion object {\n    internal val controllersMap = mutableMapOf<String, DeskController>()\n  }\n\n  inner class DeskRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n    val runningAppsFlow = MutableStateFlow(mapOf<MMID, RunningApp>())\n    var runningApps by runningAppsFlow\n\n    /**\n     * 将ipc作为Application实例进行打开\n     */\n    private suspend fun getRunningApp(ipc: Ipc): RunningApp? {\n      val mmid = ipc.remote.mmid\n      /// 如果成功打开，将它“追加”到列表中\n      return when (val runningApp = runningApps[mmid]) {\n        null -> {\n          if (ipc.remote.categories.contains(MICRO_MODULE_CATEGORY.Application)) {\n            RunningApp(ipc, bootstrapContext).also { app ->\n              runningApps += mmid to app\n              /// 如果应用关闭，将它从列表中移除\n              app.ipc.onClosed {\n                runningApps -= mmid\n              }\n            }\n          } else null\n        }\n\n        else -> runningApp\n      }\n    }\n\n    private suspend fun IHandlerContext.getRunningApp(ipc: Ipc) = openAppLock.withLock(\"app\") {\n      this@DeskRuntime.getRunningApp(ipc) ?: throwException(\n        HttpStatusCode.NotFound, \"microModule(${ipc.remote.mmid}) is not an application\"\n      )\n    }\n\n    private val openAppLock = ReasonLock()\n    suspend fun IHandlerContext.openOrActivateAppWindow(\n      ipc: Ipc, desktopController: DesktopControllerBase,\n    ): WindowController {\n      val appId = ipc.remote.mmid\n      debugDesk(\"ActivateAppWindow\", appId)\n      try {\n        /// desk直接为应用打开窗口，因为窗口由desk统一管理，所以由desk窗口，并提供句柄\n        val appMainWindow = getAppMainWindow(ipc)\n        /// 将所有的窗口聚焦\n        desktopController.getDesktopWindowsManager().focusWindow(appId)\n        return appMainWindow\n      } catch (e: Exception) {\n        deskController.alertController.showAlert(e)\n        e.printStackTrace()\n        throwException(cause = e)\n      }\n    }\n\n    suspend fun IHandlerContext.getAppMainWindow(ipc: Ipc = this.ipc) =\n      openAppLock.withLock(\"window\") {\n        getWindow {\n          val runningApp = getRunningApp(ipc)\n          /// desk直接为应用打开窗口，因为窗口由desk统一管理，所以由desk窗口，并提供句柄\n          runningApp.tryOpenMainWindow()\n        }\n      }\n\n    suspend fun IHandlerContext.createModal(ipc: Ipc) = openAppLock.withLock(\"write-modal\") {\n      request.queryAs<ModalState>().also {\n        saveAndTryOpenModal(ipc, it)\n      }\n    }\n\n    private suspend fun IHandlerContext.saveAndTryOpenModal(\n      ipc: Ipc,\n      modal: ModalState,\n    ) {\n      val appMainWindow = getAppMainWindow(ipc)\n      appMainWindow.saveModal(modal)\n      if (request.queryAsOrNull<Boolean>(\"open\") == true) {\n        appMainWindow.openModal(modal.modalId)\n      }\n    }\n\n    suspend fun IHandlerContext.getWindow(orElse: (suspend () -> WindowController)? = null) =\n      request.queryOrNull(\"wid\")?.let { wid ->\n        windowInstancesManager.get(wid) ?: throw ResponseException(\n          code = HttpStatusCode.NotFound, message = \"No Found Window by wid: $wid\"\n        )\n      } ?: orElse?.invoke() ?: throw ResponseException(\n        code = HttpStatusCode.ExpectationFailed, message = \"Fail To Get Window\"\n      )\n\n    val deskController = DeskController(this)\n\n    override suspend fun _bootstrap() {\n      controllersMap[deskController.sessionId] = deskController\n      onShutdown {\n        controllersMap.remove(deskController.sessionId)\n      }\n\n      /// 窗口协议\n      windowProtocol()\n\n      /// 实时活动协议\n      activityProtocol()\n\n      /// 内部接口\n      routes(\n        //\n        \"/readFile\" bind PureMethod.GET by definePureResponse {\n          nativeFetch(request.query(\"url\"))\n        },\n        // readAccept\n        \"/readAccept.\" bindPrefix PureMethod.GET by definePureResponse {\n          return@definePureResponse PureResponse(\n            HttpStatusCode.OK,\n            body = PureStringBody(\"\"\"{\"accept\":\"${request.headers.get(\"Accept\")}\"}\"\"\")\n          )\n        },\n        // 关闭app\n        \"/closeApp\" bind PureMethod.GET by defineBooleanResponse {\n          openAppLock.withLock(\"app\") {\n            val mmid = request.query(\"app_id\")\n            when (val runningApp = runningApps[mmid]) {\n              null -> false\n              else -> {\n                runningApp.closeMainWindow();\n                true\n              }\n            }\n          }\n        },\n        \"/showToast\" bind PureMethod.GET by defineEmptyResponse {\n          debugBrowser(\"showToast\", request.href)\n          val message = request.query(\"message\")\n          showToast(message)\n        },\n        \"/proxy\" bind PureMethod.GET by definePureResponse {\n          val url = request.query(\"url\")\n          nativeFetch(url).also {\n            it.headers.initCors()\n          }\n        }\n      ).cors()\n\n      onActivity { startDeskView(deskController.sessionId) }\n      /// 启动桌面视图\n      coroutineScope { startDeskView(deskController.sessionId) }\n      /// 等待主视图启动完成\n      deskController.awaitReady()\n    }\n\n    override suspend fun _shutdown() {\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = DeskRuntime(bootstrapContext)\n}\n\nexpect suspend fun DeskNMM.DeskRuntime.startDeskView(deskSessionId: String)\n\n/**打开或激活app*/\ninternal suspend fun NativeMicroModule.NativeRuntime.openAppOrActivate(mmid: MMID) {\n  nativeFetch(buildUrlString(\"file://desk.browser.dweb/openAppOrActivate\") {\n    parameters[\"app_id\"] = mmid\n  })\n}\n\n/**关闭app*/\ninternal suspend fun NativeMicroModule.NativeRuntime.closeApp(mmid: MMID) {\n  nativeFetch(buildUrlString(\"file://desk.browser.dweb/closeApp\") {\n    parameters[\"app_id\"] = mmid\n  })\n}"},{"language":"kotlin","path":"desk/DeskStore.kt","content":"package org.dweb_browser.browser.desk\n\nimport org.dweb_browser.browser.web.data.WebLinkManifest\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.file.ext.createStore\n\nclass TaskbarStore(mm: MicroModule.Runtime) {\n  private val store = mm.createStore(\"taskbar\", false)// createStore(\"taskbar/apps\", false)\n\n  suspend fun getApps(): List<String> {\n    return store.getOrPut(\"apps\") { emptyList() }\n  }\n\n  suspend fun setApps(data: List<String>) {\n    return store.set(\"apps\", data)\n  }\n}\n\nclass DeskSortStore(mm: MicroModule.Runtime) {\n  private val store = mm.createStore(\"desk_sort\", false)// createStore(\"taskbar/apps\", false)\n\n  suspend fun getApps(): MutableList<String> {\n    val sortedList = store.getAll<Int>().entries.sortedBy { it.value }\n    return sortedList.map { it.key }.toMutableList()\n  }\n\n  suspend fun has(mmid: MMID): Boolean {\n    return store.getAll<Int>().containsKey(mmid)\n  }\n\n  suspend fun push(mmid: MMID) {\n    store.set(mmid, store.getAll<Int>().size + 1)\n  }\n\n  suspend fun delete(mmid: MMID) {\n    store.delete(mmid)\n  }\n}\n\nclass WebLinkStore(mm: MicroModule.Runtime) {\n  private val store = mm.createStore(\"web_link\", false)\n\n  suspend fun getOrPut(key: MMID, value: WebLinkManifest): WebLinkManifest {\n    return store.getOrPut(key) { value }\n  }\n\n  suspend fun get(key: MMID): WebLinkManifest? {\n    return store.getOrNull(key)\n  }\n\n  suspend fun getAll(): MutableMap<MMID, WebLinkManifest> {\n    return store.getAll()\n  }\n\n  suspend fun set(key: MMID, value: WebLinkManifest) {\n    store.set(key, value)\n  }\n\n  suspend fun delete(key: MMID): Boolean {\n    return store.delete(key)\n  }\n}"},{"language":"kotlin","path":"desk/DeskViewController.kt","content":"package org.dweb_browser.browser.desk\n\nimport androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.DisposableEffect\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.produceState\nimport androidx.compose.ui.graphics.Color\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport org.dweb_browser.browser.desk.render.Render\nimport org.dweb_browser.browser.desk.render.activity.Render\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.helper.compose.LocalCompositionChain\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.platform.LocalPureViewController\nimport org.dweb_browser.helper.platform.SetSystemBarsColor\nimport org.dweb_browser.helper.platform.bindPureViewController\nimport org.dweb_browser.helper.platform.theme.DwebBrowserAppTheme\nimport org.dweb_browser.helper.platform.unbindPureViewController\nimport org.dweb_browser.sys.window.core.constant.LocalWindowMM\nimport org.dweb_browser.sys.window.render.SceneRender\n\n\nclass DeskViewController(val viewController: IPureViewController) {\n  private val resumeStateFlow = MutableStateFlow(false) // 增加字段，为了恢复 taskbarFloatView\n\n  @Composable\n  fun Render(\n    runtime: NativeMicroModule.NativeRuntime,\n    desktopController: DesktopControllerBase,\n    taskbarController: TaskbarControllerBase,\n    alertController: AlertController,\n    activityController: ActivityController,\n  ) {\n    val pureViewController = LocalPureViewController.current\n    DisposableEffect(pureViewController) {\n      runtime.bindPureViewController(pureViewController, true)\n      onDispose {\n        runtime.unbindPureViewController()\n      }\n    }\n    val isDark = isSystemInDarkTheme()\n\n    DwebBrowserAppTheme(isDark) {\n      LocalCompositionChain.current.Provider(LocalWindowMM provides runtime) {\n        /// 自适应状态栏\n        // TODO 这里的颜色应该是自动适应的，特别是窗口最大化的情况下，遮盖了顶部 status-bar 的时候，需要根据 status-bar 来改变颜色\n        SetSystemBarsColor(Color.Transparent, if (isDark) Color.White else Color.Black)\n\n        /// 渲染桌面\n        desktopController.Render()\n\n        /// 应用窗口渲染\n        val windowsManager by produceState<DesktopWindowsManager?>(null) {\n          value = desktopController.getDesktopWindowsManager()\n        }\n        windowsManager?.SceneRender()\n\n        /// 顶级弹窗渲染\n        alertController.Render()\n\n        /// 渲染任务栏\n        taskbarController.Render()\n        val resumeState by resumeStateFlow.collectAsState()\n        LaunchedEffect(resumeState) {\n          // 恢复 taskbarFloatView\n          if (resumeState) taskbarController.toggleFloatWindow(false).await()\n        }\n\n        /// 渲染实时活动\n        activityController.Render()\n      }\n    }\n  }\n\n  init {\n    viewController.onCreate { params ->\n      val sessionId = params.getString(\"deskSessionId\")\n      val deskController = DeskNMM.controllersMap[sessionId]\n        ?: throw Exception(\"no found deskController by sessionId: $sessionId\")\n      deskController.setPureViewController(viewController)\n\n      val runtime = deskController.deskNMM\n      viewController.onDestroy {\n        runtime.shutdown()\n      }\n      val desktopController = deskController.getDesktopController()\n      val taskbarController = deskController.getTaskbarController()\n      viewController.addContent {\n        Render(\n          runtime = runtime,\n          desktopController = desktopController,\n          taskbarController = taskbarController,\n          alertController = deskController.alertController,\n          activityController = deskController.activityController\n        )\n      }\n    }\n\n    viewController.onResume {\n      resumeStateFlow.value = true\n    }\n\n    viewController.onPause {\n      resumeStateFlow.value = false\n    }\n  }\n}\n"},{"language":"kotlin","path":"desk/DesktopControllerBase.kt","content":"package org.dweb_browser.browser.desk\n\nimport androidx.compose.runtime.Composable\nimport io.ktor.http.HttpStatusCode\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.channelFlow\nimport kotlinx.coroutines.flow.conflate\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.shareIn\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.browser.desk.types.DeskAppMetaData\nimport org.dweb_browser.browser.web.WebLinkMicroModule\nimport org.dweb_browser.browser.web.data.WebLinkManifest\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.helper.OffListener\nimport org.dweb_browser.helper.SafeHashSet\nimport org.dweb_browser.helper.SimpleSignal\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.platform.IPureViewBox\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.platform.from\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.sys.window.core.WindowController\n\nsealed class DesktopControllerBase(\n  val viewController: IPureViewController,\n  val deskNMM: DeskNMM.DeskRuntime,\n) {\n  companion object {\n    internal suspend fun configSharedRoutes(\n      desktopController: DesktopControllerBase,\n      deskNMM: DeskNMM.DeskRuntime,\n    ) {\n      with(deskNMM) {\n        deskNMM.routes(\n          //\n          \"/openAppOrActivate\" bind PureMethod.GET by defineEmptyResponse {\n            val mmid = request.query(\"app_id\")\n            debugDesk(\"openAppOrActivate\", \"requestMMID=$mmid\")\n            // 内部接口，所以ipc通过connect获得\n            val targetIpc = connect(mmid, request)\n            debugDesk(\"openAppOrActivate\", \"targetIpc=$targetIpc\")\n            // 发现desk.js是判断返回值true or false 来显示是否正常启动，所以这边做下修改\n            openOrActivateAppWindow(targetIpc, desktopController).id\n          },\n          // 获取isMaximized 的值\n          \"/toggleMaximize\" bind PureMethod.GET by defineBooleanResponse {\n            val mmid = request.query(\"app_id\")\n            return@defineBooleanResponse desktopController.getDesktopWindowsManager()\n              .toggleMaximize(mmid)\n          },\n        )\n\n        /**\n         * 增加一个专门给 web.browser.dweb 调用的 router\n         */\n        desktopController.loadWebLinks() // 加载存储的数据\n        deskNMM.routes(\n          /**\n           * 添加桌面快捷方式\n           */\n          \"/addWebLink\" bind PureMethod.POST by defineBooleanResponse {\n            debugDesk(\"addWebLink\", \"called\")\n            val webLinkManifest =\n              Json.decodeFromString<WebLinkManifest>(request.body.toPureString())\n            debugDesk(\"addWebLink\", \"webLinkManifest=$webLinkManifest\")\n            desktopController.createWebLink(webLinkManifest)\n          },\n          /**\n           * 移除桌面快捷方式\n           */\n          \"/removeWebLink\" bind PureMethod.GET by defineBooleanResponse {\n            val mmid = request.queryOrNull(\"app_id\") ?: throwException(\n              HttpStatusCode.BadRequest,\n              \"not found app_id\"\n            )\n            debugDesk(\"removeWebLink\", \"called => mmid=$mmid\")\n            desktopController.removeWebLink(mmid)\n          },\n          /**\n           * 打开桌面快捷方式\n           */\n          \"/openBrowser\" bind PureMethod.GET by defineBooleanResponse {\n            val url = request.queryOrNull(\"url\") ?: throwException(\n              HttpStatusCode.BadRequest, \"not found url\"\n            )\n            debugDesk(\"openBrowser\", \"called => url=$url\")\n            try {\n              nativeFetch(url).boolean()\n            } catch (e: Exception) {\n              throwException(HttpStatusCode.ExpectationFailed, e.message)\n            }\n          },\n        ).cors()\n      }\n    }\n  }\n\n  open suspend fun openAppOrActivate(mmid: MMID) {\n    deskNMM.openAppOrActivate(mmid)\n  }\n\n  open suspend fun closeApp(mmid: MMID) {\n    deskNMM.closeApp(mmid)\n  }\n\n  // val newVersionController = NewVersionController(deskNMM, this)\n  // 针对 WebLink 的管理部分 begin\n  private val webLinkStore = WebLinkStore(deskNMM)\n  suspend fun loadWebLinks() {\n    webLinkStore.getAll().map { (_, webLinkManifest) ->\n      deskNMM.bootstrapContext.dns.install(WebLinkMicroModule(webLinkManifest))\n    }\n  }\n\n  suspend fun createWebLink(webLinkManifest: WebLinkManifest): Boolean {\n    deskNMM.bootstrapContext.dns.query(webLinkManifest.id)?.let { lastWebLink ->\n      deskNMM.bootstrapContext.dns.uninstall(lastWebLink.id)\n    }\n    webLinkStore.set(webLinkManifest.id, webLinkManifest)\n    deskNMM.bootstrapContext.dns.install(WebLinkMicroModule(webLinkManifest))\n    return true\n  }\n\n  private suspend fun removeWebLink(id: MMID): Boolean {\n    deskNMM.bootstrapContext.dns.uninstall(id)\n    webLinkStore.delete(id)\n    return true\n  }\n  // 针对 WebLink 的管理部分 end\n\n\n  // 状态更新信号\n  internal val updateFlow = MutableSharedFlow<String>()\n  val onUpdate = channelFlow {\n    val reasons = SafeHashSet<String>()\n    updateFlow.onEach {\n      reasons.addAll(it.split(\"|\"))\n    }.conflate().collect {\n      delay(100)\n      val result = reasons.sync {\n        val result = joinToString(\"|\")\n        clear()\n        result\n      }\n      if (result.isNotEmpty()) {\n        send(result)\n      }\n    }\n    close()\n  }.shareIn(deskNMM.getRuntimeScope(), started = SharingStarted.Eagerly, replay = 1)\n\n  suspend fun detail(mmid: String) {\n    deskNMM.nativeFetch(\"file://jmm.browser.dweb/detail?app_id=$mmid\")\n  }\n\n  private suspend fun uninstall(mmid: String) {\n    deskNMM.nativeFetch(\"file://jmm.browser.dweb/uninstall?app_id=$mmid\")\n  }\n\n  open suspend fun remove(mmid: MMID, isWebLink: Boolean) {\n    when {\n      isWebLink -> removeWebLink(mmid)\n      else -> uninstall(mmid)\n    }\n  }\n\n  suspend fun share(mmid: String) {\n    // TODO: 分享\n  }\n\n  suspend fun search(words: String) {\n    deskNMM.nativeFetch(\n      when (words.startsWith(\"dweb://\")) {\n        true -> words\n        else -> \"file://web.browser.dweb/search?q=$words\"\n      }\n    )\n  }\n\n  suspend fun getDesktopApps(): List<DeskAppMetaData> {\n    val apps =\n      deskNMM.bootstrapContext.dns.search(MICRO_MODULE_CATEGORY.Application).toMutableList()\n    // 简单的排序再渲染\n    val sortList = deskNMM.deskController.appSortList.getApps()\n    apps.sortBy { sortList.indexOf(it.mmid) }\n    val runApps = apps.map { metaData ->\n      return@map DeskAppMetaData().apply {\n        running = deskNMM.runningApps.containsKey(metaData.mmid)\n        winStates = getDesktopWindowsManager().getWindowStates(metaData.mmid)\n        //...复制metaData属性\n        assign(metaData.manifest)\n      }\n    }\n    return runApps\n  }\n\n  private var preDesktopWindowsManager: DesktopWindowsManager? = null\n\n  private val wmLock = Mutex()\n\n  /**\n   * 窗口管理器\n   */\n  suspend fun getDesktopWindowsManager() = wmLock.withLock {\n//    _desktopView.await()\n//    val vc = this.activity!!\n    DesktopWindowsManager.getOrPutInstance(\n      viewController, IPureViewBox.from(viewController)\n    ) { dwm ->\n      val watchWindows = mutableMapOf<WindowController, OffListener<*>>()\n      fun watchAllWindows() {\n        watchWindows.keys.subtract(dwm.allWindows).forEach { win ->\n          watchWindows.remove(win)?.invoke()\n        }\n        for (win in dwm.allWindows) {\n          if (watchWindows.contains(win)) {\n            continue\n          }\n          watchWindows[win] = win.state.observable.onChange {\n            updateFlow.emit(it.key.fieldName)\n          }\n        }\n      }\n\n      /// 但有窗口信号变动的时候，确保 MicroModule.IpcEvent<Activity> 事件被激活\n      dwm.allWindowsFlow.collectIn(dwm.viewController.lifecycleScope) {\n        watchAllWindows()\n        updateFlow.emit(\"windows\")\n        _activitySignal.emit()\n      }\n      watchAllWindows()\n\n      preDesktopWindowsManager?.also { preDwm ->\n        deskNMM.scopeLaunch(Dispatchers.Main, cancelable = true) {\n          /// 窗口迁移\n          preDwm.moveWindowsTo(dwm)\n        }\n      }\n      preDesktopWindowsManager = dwm\n    }\n  }\n\n  private val _activitySignal = SimpleSignal()\n  val onActivity = _activitySignal.toListener()\n\n  @Composable\n  abstract fun Render()\n\n  init {\n    deskNMM.runningAppsFlow.collectIn(deskNMM.getRuntimeScope()) {\n      updateFlow.emit(\"apps\")\n    }\n  }\n}"},{"language":"kotlin","path":"desk/DesktopV1Controller.kt","content":"package org.dweb_browser.browser.desk\n\nimport androidx.compose.runtime.Composable\nimport dweb_browser_kmp.browser.generated.resources.Res\nimport io.ktor.http.Url\nimport kotlinx.coroutines.flow.FlowCollector\nimport kotlinx.coroutines.flow.filter\nimport org.dweb_browser.browser.common.createDwebView\nimport org.dweb_browser.browser.desk.render.RenderImpl\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.http.router.byChannel\nimport org.dweb_browser.core.ipc.Ipc\nimport org.dweb_browser.core.ipc.helper.IpcServerRequest\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.core.std.file.ext.ResponseLocalFileBase\nimport org.dweb_browser.core.std.http.CORS_HEADERS\nimport org.dweb_browser.core.std.http.DwebHttpServerOptions\nimport org.dweb_browser.core.std.http.HttpDwebServer\nimport org.dweb_browser.core.std.http.createHttpDwebServer\nimport org.dweb_browser.dwebview.DWebViewOptions\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.helper.Producer\nimport org.dweb_browser.helper.build\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.resolvePath\nimport org.dweb_browser.helper.toJsonElement\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.PureResponse\nimport org.dweb_browser.pure.http.queryAsOrNull\nimport org.jetbrains.compose.resources.ExperimentalResourceApi\n\nclass DesktopV1Controller private constructor(\n  viewController: IPureViewController,\n  deskNMM: DeskNMM.DeskRuntime,\n  private val desktopServer: HttpDwebServer,\n) : DesktopControllerBase(viewController, deskNMM) {\n\n  companion object {\n\n    private val API_PREFIX = \"/api/\"\n    internal suspend fun commonWebServerFactory(\n      subdomain: String,\n      deskNMM: DeskNMM.DeskRuntime,\n    ): HttpDwebServer {\n      val desktopServer = deskNMM.createHttpDwebServer(DwebHttpServerOptions(subdomain))\n      val serverIpc = desktopServer.listen()\n      serverIpc.onRequest(\"WebServer/$subdomain\")\n        .collectIn(deskNMM.getRuntimeScope(), commonWebServerHandler(deskNMM, serverIpc))\n      return desktopServer\n    }\n\n    @OptIn(ExperimentalResourceApi::class)\n    internal fun commonWebServerHandler(deskNMM: DeskNMM.DeskRuntime, serverIpc: Ipc) =\n      FlowCollector<Producer<IpcServerRequest>.Event> { event ->\n        val ipcServerRequest = event.consume()\n        val pathName = ipcServerRequest.uri.encodedPathAndQuery\n        val pureResponse = if (pathName.startsWith(API_PREFIX)) {\n          val apiUri = \"file://${pathName.substring(API_PREFIX.length)}\"\n          val response =\n            deskNMM.nativeFetch(ipcServerRequest.toPure().toClient().copy(href = apiUri))\n          PureResponse.build(response) { appendHeaders(CORS_HEADERS) }\n        } else {\n          val filePath = ipcServerRequest.uri.encodedPath\n          val resBinary = Res.readBytes(\"files/browser-desk${filePath}\")\n          ResponseLocalFileBase(filePath, false).returnFile(resBinary)\n        }\n        serverIpc.postResponse(ipcServerRequest.reqId, pureResponse)\n      }\n\n    private suspend fun configRoutes(\n      desktopController: DesktopV1Controller,\n      deskNMM: DeskNMM.DeskRuntime,\n    ) {\n      DesktopControllerBase.configSharedRoutes(desktopController, deskNMM)\n      with(deskNMM) {\n        val mmScope = deskNMM.getRuntimeScope()\n        routes(\n          // 获取全部app数据\n          \"/desktop/apps\" bind PureMethod.GET by defineJsonResponse {\n            debugDesk(\"/desktop/apps\", desktopController.getDesktopApps())\n            return@defineJsonResponse desktopController.getDesktopApps().toJsonElement()\n          },\n          // 监听所有app数据\n          \"/desktop/observe/apps\" byChannel { ctx ->\n            // 默认不同步 bounds 字段，否则move的时候数据量会非常大\n            val enableBounds = request.queryAsOrNull<Boolean>(\"bounds\") ?: false\n            val job = desktopController.onUpdate.run {\n              when {\n                enableBounds -> this\n                // 如果只有 bounds ，那么忽略，不发送\n                else -> filter { it != \"bounds\" }\n              }\n            }.collectIn(mmScope) {\n              debugDesk(\"/desktop/observe/apps\") { \"changes=$it\" }\n              try {\n                val apps = desktopController.getDesktopApps()\n                ctx.sendJsonLine(apps)\n              } catch (e: Throwable) {\n                close(cause = e)\n              }\n            }\n            onClose {\n              job.cancel()\n            }\n            desktopController.updateFlow.emit(\"init\")\n          },\n        )\n      }\n    }\n\n    suspend fun create(\n      deskNMM: DeskNMM.DeskRuntime,\n      viewController: IPureViewController,\n    ): DesktopV1Controller {\n      val desktopServer = commonWebServerFactory(\"desktop\", deskNMM)\n      val controller = DesktopV1Controller(viewController, deskNMM, desktopServer)\n      controller.desktopView = controller.createDesktopView()\n      configRoutes(controller, deskNMM)\n      return controller\n    }\n  }\n\n  internal lateinit var desktopView: IDWebView\n  private suspend fun createDesktopView(): IDWebView {\n    val options = DWebViewOptions(\n      url = getDesktopUrl().toString(),\n      privateNet = true,\n      openDevTools = envSwitch.isEnabled(ENV_SWITCH_KEY.DESKTOP_DEVTOOLS),\n      detachedStrategy = DWebViewOptions.DetachedStrategy.Ignore,\n      displayCutoutStrategy = DWebViewOptions.DisplayCutoutStrategy.Default,\n      viewId = 1,\n    )\n\n    val webView = viewController.createDwebView(deskNMM, options)\n    // 隐藏滚动条\n    webView.setVerticalScrollBarVisible(false)\n    webView.setHorizontalScrollBarVisible(false)\n\n    deskNMM.onBeforeShutdown {\n      deskNMM.scopeLaunch(cancelable = false) {\n        webView.destroy()\n      }\n    }\n    return webView\n  }\n\n  @Composable\n  override fun Render() {\n    RenderImpl()\n  }\n\n  private fun getDesktopUrl() = when (val url = envSwitch.get(ENV_SWITCH_KEY.DESKTOP_DEV_URL)) {\n    \"\" -> desktopServer.startResult.urlInfo.buildInternalUrl().build {\n      resolvePath(\"/desktop.html\")\n    }\n\n    else -> Url(url)\n  }\n}\n"},{"language":"kotlin","path":"desk/DesktopV2Controller.kt","content":"package org.dweb_browser.browser.desk\n\nimport androidx.compose.runtime.Composable\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.browser.desk.model.DesktopAppModel\nimport org.dweb_browser.browser.desk.render.NFSpaceCoordinateLayout\nimport org.dweb_browser.browser.desk.render.RenderImpl\nimport org.dweb_browser.browser.desk.render.layoutSaveStrategyIsMultiple\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.core.std.file.ext.createStore\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.helper.platform.IPureViewController\n\nclass DesktopV2Controller private constructor(\n  viewController: IPureViewController,\n  deskNMM: DeskNMM.DeskRuntime,\n) : DesktopControllerBase(viewController, deskNMM) {\n  companion object {\n    suspend fun create(\n      deskNMM: DeskNMM.DeskRuntime,\n      viewController: IPureViewController,\n    ): DesktopV2Controller {\n      val controller = DesktopV2Controller(viewController, deskNMM)\n      DesktopControllerBase.configSharedRoutes(controller, deskNMM)\n      return controller\n    }\n  }\n\n  private val openingApps = mutableSetOf<MMID>()\n  internal val appsFlow = MutableStateFlow(emptyList<DesktopAppModel>())\n\n  // 存放v2拖拽排序的位置信息。\n  internal val appsLayout by lazy {\n    val isCustomLayout = envSwitch.isEnabled(ENV_SWITCH_KEY.DESKTOP_CUSTOM_LAYOUT)\n    when {\n      isCustomLayout -> DesktopV2AppLayoutController(deskNMM, this)\n      else -> null\n    }\n  }\n\n  private suspend fun upsetApps() {\n    val oldApps = appsFlow.value\n    val apps = getDesktopApps().map { appMetaData ->\n      val runStatus = when {\n        appMetaData.running -> {\n          openingApps.remove(appMetaData.mmid)\n          DesktopAppModel.DesktopAppRunStatus.Opened\n        }\n\n        openingApps.contains(appMetaData.mmid) -> DesktopAppModel.DesktopAppRunStatus.Opening\n        else -> DesktopAppModel.DesktopAppRunStatus.Close\n      }\n\n      oldApps.find { oldApp ->\n        oldApp.mmid == appMetaData.mmid\n      }?.also { it.running = runStatus } ?: DesktopAppModel(\n        appMetaData = appMetaData, initRunningState = runStatus\n      )\n    }\n\n    appsLayout?.clearInvalidLayouts(apps.map { it.mmid })\n    appsFlow.value = apps\n  }\n\n  override suspend fun openAppOrActivate(mmid: MMID) {\n    val app = appsFlow.value.find { it.mmid == mmid } ?: return\n    when (val webLink = app.webLink) {\n      null -> {\n        if (app.running == DesktopAppModel.DesktopAppRunStatus.Close) {\n          app.running = DesktopAppModel.DesktopAppRunStatus.Opening\n          openingApps.add(mmid)\n        }\n        // 激活应用\n        super.openAppOrActivate(mmid)\n      }\n\n      else -> {\n        deskNMM.nativeFetch(webLink)\n//        deskNMM.connect(app.mmid).request(PureClientRequest(webLink, PureMethod.GET))\n      }\n    }\n  }\n\n  override suspend fun closeApp(mmid: MMID) {\n    openingApps.remove(mmid)\n    super.closeApp(mmid)\n  }\n\n  override suspend fun remove(mmid: MMID, isWebLink: Boolean) {\n    appsLayout?.removeLayouts(mmid)\n    super.remove(mmid, isWebLink)\n  }\n\n  @Composable\n  override fun Render() {\n    RenderImpl()\n  }\n\n  init {\n    onUpdate.filter { it != \"bounds\" }.collectIn(deskNMM.getRuntimeScope()) {\n      upsetApps()\n    }\n  }\n}\n\n@Serializable\ndata class DeskAppLayoutInfo(val screenWidth: Int, val layouts: Map<MMID, NFSpaceCoordinateLayout>)\n\ninternal class DesktopV2AppLayoutController(\n  deskNMM: DeskNMM.DeskRuntime,\n  private val controller: DesktopV2Controller,\n) {\n  internal val appLayoutsFlow = MutableStateFlow(emptyList<DeskAppLayoutInfo>())\n  suspend fun updateAppsLayouts(screenWidth: Int, layouts: Map<MMID, NFSpaceCoordinateLayout>) {\n    val allLayouts = getStoreAppsLayouts().toMutableList()\n    val isMultiple = layoutSaveStrategyIsMultiple()\n    if (isMultiple) {\n      allLayouts.removeAll { it.screenWidth == screenWidth }\n    } else {\n      allLayouts.clear()\n    }\n    allLayouts.add(DeskAppLayoutInfo(screenWidth, layouts))\n    appLayoutsFlow.value = allLayouts\n    setStoreAppsLayouts(allLayouts)\n  }\n\n  private val appsLayoutStore = deskNMM.createStore(\"apps_layout\", false)\n\n  suspend fun getStoreAppsLayouts(): List<DeskAppLayoutInfo> {\n    return appsLayoutStore.getOrNull(\"layouts\") ?: emptyList()\n  }\n\n  suspend fun setStoreAppsLayouts(layouts: List<DeskAppLayoutInfo>) {\n    appsLayoutStore.set(\"layouts\", layouts)\n  }\n\n  suspend fun removeLayouts(mmid: MMID) {\n    val result = getStoreAppsLayouts().map { layoutInfo ->\n      layoutInfo.copy(layouts = layoutInfo.layouts.filter { layout ->\n        layout.key != mmid\n      })\n    }\n    setStoreAppsLayouts(result)\n  }\n\n  suspend fun clearInvalidLayouts(list: List<MMID>) {\n    val result = getStoreAppsLayouts().map { layoutInfo ->\n      layoutInfo.copy(layouts = layoutInfo.layouts.filter { layout ->\n        list.contains(layout.key)\n      })\n    }\n    setStoreAppsLayouts(result)\n    appLayoutsFlow.value = result\n  }\n}"},{"language":"kotlin","path":"desk/DesktopWindowController.kt","content":"package org.dweb_browser.browser.desk\n\nimport org.dweb_browser.sys.window.core.WindowController\nimport org.dweb_browser.sys.window.core.WindowState\nimport org.dweb_browser.sys.window.core.WindowsManager\n\nclass DesktopWindowController(\n  manager: DesktopWindowsManager,\n  state: WindowState,\n) : WindowController(state, manager.viewBox) {\n\n  override fun getManager(): DesktopWindowsManager {\n    return super.getManager() as DesktopWindowsManager\n  }\n\n  override fun upsetManager(manager: WindowsManager<*>?) {\n    super.upsetManager(manager)\n\n    if (manager != null) {\n      when (manager) {\n        is DesktopWindowsManager ->\n          state.observable.coroutineScope = manager.viewController.lifecycleScope\n\n        else -> throw Exception(\"invalid type $manager should be DesktopWindowsManager\")\n      }\n    }\n    super.upsetManager(manager)\n  }\n\n  override suspend fun toggleKeepBackground(keepBackground: Boolean?) {\n    /// 内部模块的设置，不允许修改\n    if (state.constants.owner.let {\n        it.endsWith(\".browser.dweb\") || it.endsWith(\".std.dweb\") || it.endsWith(\".sys.dweb\")\n      }) {\n      return\n    }\n    super.toggleKeepBackground(keepBackground)\n  }\n}"},{"language":"kotlin","path":"desk/DesktopWindowsManager.kt","content":"package org.dweb_browser.browser.desk\n\nimport org.dweb_browser.helper.WeakHashMap\nimport org.dweb_browser.helper.platform.IPureViewBox\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.removeWhen\nimport org.dweb_browser.sys.window.core.WindowsManager\nimport org.dweb_browser.sys.window.core.helper.setDefaultFloatWindowBounds\nimport org.dweb_browser.sys.window.core.windowAdapterManager\n\nexpect fun DesktopWindowsManager.Companion.getOrPutInstance(\n  platformViewController: IPureViewController,\n  viewBox: IPureViewBox,\n  onPut: (wm: DesktopWindowsManager) -> Unit,\n): DesktopWindowsManager\n\nclass DesktopWindowsManager internal constructor(\n  val viewController: IPureViewController,\n  val viewBox: IPureViewBox,\n) : WindowsManager<DesktopWindowController>(viewController, viewBox) {\n\n  companion object {\n    internal val instances = WeakHashMap<IPureViewController, DesktopWindowsManager>()\n  }\n\n  /// 初始化一些监听\n  init {\n    /// 创建成功，提供适配器来渲染窗口\n    windowAdapterManager.append { newWindowState ->\n      /// 新窗口的bounds可能都是没有配置的，所以这时候默认给它们设置一个有效的值\n\n      with(viewBox) {\n        val maxWindowSize = getViewControllerMaxBounds()\n        newWindowState.setDefaultFloatWindowBounds(\n          maxWindowSize.width, maxWindowSize.height, allWindowsFlow.value.size.toFloat()\n        )\n      }\n\n      /// 添加窗口到列表中\n      val win = DesktopWindowController(this, newWindowState)\n      addNewWindow(win);\n\n      win\n    }\n      /// 生命周期销毁的时候，移除窗口适配器\n      .removeWhen(viewBox.lifecycleScope)\n\n  }\n}\n\n"},{"language":"kotlin","path":"desk/RunningApp.kt","content":"package org.dweb_browser.browser.desk\n\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport org.dweb_browser.core.ipc.Ipc\nimport org.dweb_browser.core.ipc.helper.IpcEvent\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.sys.window.core.WindowController\nimport org.dweb_browser.sys.window.core.WindowState\nimport org.dweb_browser.sys.window.core.constant.WindowConstants\nimport org.dweb_browser.sys.window.core.windowAdapterManager\nimport org.dweb_browser.sys.window.ext.createRenderer\nimport org.dweb_browser.sys.window.ext.createRendererDestroy\n\n/**\n * 在Desk视角，运行中的Application实例\n * 它一定会有一个主窗口，主窗口如果关闭，那么整个 microModule 也会被关闭（除非它是Service模块，那么允许注册在后台运行，但如果涉及到任何视图层的东西，它必须有主窗口）\n *\n */\nclass RunningApp(\n  /**\n   * 这个 ipc 是 running 的标志，这个是我们主动建立的连接，对方如果关闭这个，那么意味着desk会释放掉相关的资源，并且要求dns将它关闭\n   */\n  val ipc: Ipc,\n  val bootstrapContext: BootstrapContext,\n  defaultWindowState: WindowState? = null,\n) {\n  /**\n   * 所有的窗口实例\n   */\n  private val windows = mutableListOf<WindowController>()\n\n  /**\n   * 创建一个窗口\n   */\n  private suspend fun createWindow(referenceState: WindowState? = null): WindowController {\n    val manifest = ipc.remote\n    // 打开安装窗口\n    val newWin = windowAdapterManager.createWindow(\n      WindowState(\n        WindowConstants(\n          owner = manifest.mmid,\n          ownerVersion = manifest.version,\n          provider = manifest.mmid,\n        )\n      ).apply {\n        if (referenceState != null) {\n          colorScheme = referenceState.colorScheme\n          alwaysOnTop = referenceState.alwaysOnTop\n          keepBackground = referenceState.keepBackground\n          mode = referenceState.mode\n          updateBounds(referenceState.bounds, WindowState.UpdateReason.Inner)\n        }\n      }\n    )\n    windows.add(newWin)\n    // 监听app被shutdown的时候也需要移除window\n    ipc.onClosed {\n      newWin.lifecycleScope.launch {\n        newWin.closeRoot()\n      }\n    }\n    /// 窗口销毁的时候\n    newWin.onClose {\n      /// 通知模块，销毁渲染\n      if (!ipc.isClosed) {\n        ipc.postMessage(IpcEvent.createRendererDestroy(newWin.id))\n      }\n      // 移除渲染适配器\n      windowAdapterManager.renderProviders.remove(newWin.id)\n      // 从引用中移除\n      windows.remove(newWin)\n    }\n    val rendererEvent = IpcEvent.createRenderer(newWin.id)\n    debugDesk(\"createWindow\") { \"rendererEvent=$rendererEvent\" }\n    ipc.postMessage(rendererEvent)\n    return newWin\n  }\n\n  /**\n   * 默认只有一个窗口\n   */\n  private var mainWin: WindowController? = null\n  private val openLock = Mutex()\n  suspend fun getOpenMainWindow() = openLock.withLock { mainWin }\n\n  /**\n   * 最后一次窗口的state信息，在重新启动的新窗口的时候，用来参考、继承\n   * TODO 这个属性最好持久化存储\n   */\n  private var latestWindowState: WindowState? = defaultWindowState\n\n  /**\n   * 打开主窗口，默认只会有一个主窗口，重复打开不会重复创建\n   */\n  suspend fun tryOpenMainWindow(visible: Boolean = true) = openLock.withLock {\n    if (mainWin == null) {\n      latestWindowState?.visible = visible\n      mainWin = createWindow(latestWindowState).also { win ->\n        latestWindowState = win.state\n        win.onClose {\n          openLock.withLock {\n            if (mainWin == win) {\n              mainWin = null\n            }\n          }\n          /// 如果不是允许后台运行，那么主窗口关闭后，也要直接关闭程序\n          if (!win.state.keepBackground) {\n            bootstrapContext.dns.close(ipc.remote.mmid)\n          }\n        }\n      }\n    } else {\n      mainWin?.focus()\n    }\n    mainWin!!\n  }\n\n\n  suspend fun closeMainWindow(force: Boolean = false) {\n    mainWin?.closeRoot(force)\n  }\n}"},{"language":"kotlin","path":"desk/TaskbarControllerBase.kt","content":"package org.dweb_browser.browser.desk\n\nimport androidx.compose.runtime.Composable\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.coroutines.flow.channelFlow\nimport kotlinx.coroutines.flow.conflate\nimport kotlinx.coroutines.flow.onEach\nimport kotlinx.coroutines.flow.shareIn\nimport org.dweb_browser.browser.desk.types.DeskAppMetaData\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.helper.SafeHashSet\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.safeSubList\nimport org.dweb_browser.sys.window.floatBar.FloatBarState\n\nsealed class TaskbarControllerBase(\n  internal val deskNMM: DeskNMM.DeskRuntime,\n  internal val desktopController: DesktopControllerBase,\n) {\n  val state = FloatBarState()\n  protected val taskbarStore = TaskbarStore(deskNMM)\n\n\n  /** 展示在taskbar中的应用列表 */\n  private val appsFlow = MutableStateFlow(listOf<String>())\n  private fun getTaskbarShowAppList() = appsFlow.value\n  private fun getFocusApp() = getTaskbarShowAppList().firstOrNull()\n  fun openAppOrActivate(mmid: MMID) = deskNMM.scopeLaunch(cancelable = true) {\n    deskNMM.openAppOrActivate(mmid)\n  }\n\n  fun closeApp(mmid: MMID) = deskNMM.scopeLaunch(cancelable = true) {\n    deskNMM.closeApp(mmid)\n  }\n\n  // 触发状态更新\n  protected val stateFlow = MutableSharedFlow<TaskbarV1Controller.TaskBarState>()\n  val onStatus = stateFlow.asSharedFlow()\n  fun toggleFloatWindow(openTaskbar: Boolean?) = deskNMM.scopeAsync(cancelable = true) {\n    val toggle = openTaskbar ?: !state.floatActivityState\n    // 监听状态是否是float\n    getFocusApp()?.let { focusApp ->\n      stateFlow.emit(TaskbarV1Controller.TaskBarState(toggle, focusApp))\n    }\n    if (toggle) openTaskbarActivity() else closeTaskbarActivity()\n  }\n\n  /**\n   * 打开悬浮框\n   */\n  private fun openTaskbarActivity() = if (!state.floatActivityState) {\n    state.floatActivityState = true\n    true\n  } else false\n\n  private fun closeTaskbarActivity() = if (state.floatActivityState) {\n    state.floatActivityState = false\n    true\n  } else false\n\n  fun toggleWindowMaximize(mmid: MMID) = deskNMM.scopeAsync(cancelable = true) {\n    desktopController.getDesktopWindowsManager().toggleMaximize(mmid)\n  }\n\n  /**\n   * 将其它视图临时最小化到 TaskbarView/TooggleDesktopButton 按钮里头，在此点击该按钮可以释放这些临时视图到原本的状态\n   */\n  fun toggleDesktopView() = deskNMM.scopeLaunch(cancelable = true) {\n    val windowsManager = desktopController.getDesktopWindowsManager()\n    val allWindows = windowsManager.allWindowsFlow.value.keys.toList()\n    if (allWindows.isEmpty() || allWindows.find { it.isVisible } != null) {\n      allWindows.map { win ->\n        win.hide()\n      }\n      windowsManager.focusDesktop()\n    } else {\n      allWindows.map { win ->\n        win.show()\n      }\n    }\n  }\n\n  internal val updateFlow = MutableSharedFlow<String>()\n  val onUpdate = channelFlow {\n    val reasons = SafeHashSet<String>()\n    updateFlow.onEach {\n      reasons.addAll(it.split(\"|\"))\n    }.conflate().collect {\n      delay(100)\n      val result = reasons.sync {\n        val result = joinToString(\"|\")\n        clear()\n        result\n      }\n      if (result.isNotEmpty()) {\n        send(result)\n      }\n    }\n    close()\n  }.shareIn(deskNMM.getRuntimeScope(), started = SharingStarted.Eagerly)\n\n  internal suspend fun getTaskbarAppList(limit: Int): List<DeskAppMetaData> {\n    val apps = mutableMapOf<MMID, DeskAppMetaData>()\n    for (appId in getTaskbarShowAppList()) {\n      if (apps.size >= limit) {\n        break\n      }\n      if (appId == deskNMM.mmid || apps.containsKey(appId)) {\n        continue\n      }\n      val metaData = deskNMM.bootstrapContext.dns.query(appId)\n      if (metaData != null) {\n        apps[appId] = DeskAppMetaData().apply {\n          running = deskNMM.runningApps.contains(appId)\n          winStates = desktopController.getDesktopWindowsManager().getWindowStates(metaData.mmid)\n          //...复制metaData属性\n          assign(metaData.manifest)\n        }\n      }\n    }\n\n    return apps.values.toList()\n  }\n\n  @Composable\n  abstract fun Render()\n\n  init {\n    /// 绑定 runningApps 集合\n    val mmScope = deskNMM.getRuntimeScope()\n\n    /// 绑定 runningApps 集合，保存到数据库\n    deskNMM.scopeLaunch(cancelable = true) {\n      appsFlow.value = taskbarStore.getApps()\n      var preRunningApps = emptySet<String>()\n      deskNMM.runningAppsFlow.collect { runningAppMap ->\n        val runningApps = runningAppMap.keys\n        // 新增的应用\n        val newApps = runningApps.filter { !preRunningApps.contains(it) }\n        preRunningApps = runningApps\n\n        val apps = (newApps + runningApps).distinct()\n\n        // 我们会尝试保留上一次打开过的记录\n        val keepSize = 4\n        appsFlow.value = when {\n          apps.size < keepSize -> (apps + appsFlow.value).distinct().safeSubList(0, keepSize)\n          // 如果超过，那么就只显示正在运行中的\n          else -> apps\n        }\n\n        // 保存到数据库\n        taskbarStore.setApps(appsFlow.value)\n      }\n    }\n\n    /// 跟随 runningApps 变动，触发自身的 onUpdate\n    deskNMM.runningAppsFlow.collectIn(mmScope) {\n      // 窗口打开时触发\n      updateFlow.emit(\"apps\")\n    }\n    // 跟随 desktopController.onUpdate 变动，触发自身的 onUpdate\n    desktopController.onUpdate.collectIn(mmScope) {\n      updateFlow.emit(it)\n    }\n  }\n}"},{"language":"kotlin","path":"desk/TaskbarV1Controller.kt","content":"package org.dweb_browser.browser.desk\n\nimport androidx.compose.runtime.Composable\nimport io.ktor.http.Url\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.browser.desk.render.ITaskbarV1View\nimport org.dweb_browser.browser.desk.render.create\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.http.router.byChannel\nimport org.dweb_browser.core.std.http.HttpDwebServer\nimport org.dweb_browser.dwebview.DWebViewOptions\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.dwebview.create\nimport org.dweb_browser.helper.build\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.helper.resolvePath\nimport org.dweb_browser.helper.toJsonElement\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.queryAs\nimport org.dweb_browser.pure.http.queryAsOrNull\n\nclass TaskbarV1Controller private constructor(\n  deskNMM: DeskNMM.DeskRuntime,\n  val deskSessionId: String,\n  desktopController: DesktopControllerBase,\n  private val taskbarServer: HttpDwebServer,\n) : TaskbarControllerBase(deskNMM, desktopController) {\n\n  companion object {\n    /**\n     * 配置给webview的接口\n     */\n    suspend fun configRoutes(taskBarController: TaskbarV1Controller, deskNMM: DeskNMM.DeskRuntime) {\n      with(deskNMM) {\n        val mmScope = deskNMM.getRuntimeScope()\n        deskNMM.routes(\n          // 获取所有taskbar数据\n          \"/taskbar/apps\" bind PureMethod.GET by defineJsonResponse {\n            val limit = request.queryOrNull(\"limit\")?.toInt() ?: Int.MAX_VALUE\n            return@defineJsonResponse taskBarController.getTaskbarAppList(limit).toJsonElement()\n          },\n          // 监听所有taskbar数据\n          \"/taskbar/observe/apps\" byChannel { ctx ->\n            val limit = request.queryOrNull(\"limit\")?.toInt() ?: Int.MAX_VALUE\n            debugDesk(tag = \"/taskbar/observe/apps\", \"limit=$limit\")\n            // 默认不同步 bounds 字段，否则move的时候数据量会非常大\n            val enableBounds = request.queryAsOrNull<Boolean>(\"bounds\") ?: false\n            val job = taskBarController.onUpdate.run {\n              when {\n                enableBounds -> this\n                // 如果只有 bounds ，那么忽略，不发送\n                else -> filter { it != \"bounds\" }\n              }\n            }.collectIn(mmScope) {\n              debugDesk(\"/taskbar/observe/apps\") { \"changes=$it\" }\n              try {\n                val apps = taskBarController.getTaskbarAppList(limit)\n                ctx.sendJsonLine(apps)\n              } catch (e: Exception) {\n                close(cause = e)\n              }\n            }\n            onClose {\n              job.cancel()\n            }\n            debugDesk(\"/taskbar/observe/apps\") { \"firstEmit =>${request.body.toPureString()}\" }\n            taskBarController.updateFlow.emit(\"init\")\n          },\n          // 监听所有taskbar状态\n          \"/taskbar/observe/status\" byChannel { ctx ->\n            debugDesk(\"deskNMM\", \"/taskbar/observe/status\")\n            val job = taskBarController.onStatus.collectIn(mmScope) { status ->\n              ctx.sendJsonLine(status)\n            }\n            onClose {\n              job.cancel()\n            }\n          },\n          // 负责resize taskbar大小\n          \"/taskbar/resize\" bind PureMethod.GET by defineJsonResponse {\n            val size = request.queryAs<TaskbarV1Controller.ReSize>()\n//        debugDesk(\"get/taskbar/resize\", \"$size\")\n            taskBarController.resize(size)\n            size.toJsonElement()\n          },\n          // 切换到桌面\n          \"/taskbar/toggle-desktop-view\" bind PureMethod.GET by defineBooleanResponse {\n            taskBarController.toggleDesktopView().join()\n            true\n          },\n          // 在app为全屏的时候，调出周围的高斯模糊，调整完全的taskbar\n          \"/taskbar/toggle-float-button-mode\" bind PureMethod.GET by defineBooleanResponse {\n            taskBarController.toggleFloatWindow(\n              request.queryOrNull(\"open\")?.toBooleanStrictOrNull()\n            ).await()\n          },\n          \"/taskbar/dragging\" bind PureMethod.GET by defineBooleanResponse {\n            taskBarController.toggleDragging(request.queryAs(\"dragging\"))\n          },\n        )\n      }\n    }\n\n    suspend fun create(\n      deskSessionId: String,\n      deskNMM: DeskNMM.DeskRuntime,\n      desktopController: DesktopControllerBase,\n    ): TaskbarV1Controller {\n      val taskbarServer = DesktopV1Controller.commonWebServerFactory(\"taskbar\", deskNMM)\n      val controller = TaskbarV1Controller(deskNMM, deskSessionId, desktopController, taskbarServer)\n      configRoutes(controller, deskNMM)\n      // 构建webview\n      val webview = IDWebView.create(controller.deskNMM, controller.getTaskbarDWebViewOptions())\n      controller.taskbarView = ITaskbarV1View.create(controller, webview).also { taskbarView ->\n        deskNMM.onBeforeShutdown {\n          deskNMM.scopeLaunch(cancelable = false) {\n            taskbarView.taskbarDWebView.destroy()\n          }\n        }\n      }\n      return controller\n    }\n  }\n\n  internal lateinit var taskbarView: ITaskbarV1View\n\n  @Composable\n  fun TaskbarView(content: @Composable ITaskbarV1View.() -> Unit) {\n    taskbarView.content()\n  }\n\n  /**\n   * 对Taskbar自身进行resize\n   * 根据web元素的大小进行自适应调整\n   *\n   * @returns 如果视图发生了真实的改变（不论是否变成说要的结果），则返回 true\n   */\n\n  val desktopIsComposeStyle = envSwitch.isEnabled(ENV_SWITCH_KEY.DESKTOP_STYLE_COMPOSE)\n  fun resize(reSize: ReSize) {\n    //TODO: 临时处理, 用于防止被compose版本的taskbar被web版本的taskbar影响到。后期确定使用compose版本需要再统一删除掉。\n    if (desktopIsComposeStyle) {\n      return\n    }\n    state.layoutWidth = reSize.width\n    state.layoutHeight = reSize.height\n  }\n\n  fun toggleDragging(dragging: Boolean): Boolean {\n    state.dragging = dragging\n    return dragging\n  }\n\n\n  fun getTaskbarUrl() = when (val url = envSwitch.get(ENV_SWITCH_KEY.TASKBAR_DEV_URL)) {\n    \"\" -> taskbarServer.startResult.urlInfo.buildInternalUrl().build {\n      resolvePath(\"/taskbar.html\")\n    }\n\n    else -> Url(url)\n  }\n\n\n  fun getTaskbarDWebViewOptions() = DWebViewOptions(\n    url = getTaskbarUrl().toString(),\n    openDevTools = envSwitch.isEnabled(ENV_SWITCH_KEY.TASKBAR_DEVTOOLS),\n    privateNet = true,\n    detachedStrategy = DWebViewOptions.DetachedStrategy.Ignore,\n    viewId = 2,\n  )\n\n  @Serializable\n  data class ReSize(val width: Float, val height: Float)\n\n  @Serializable\n  data class TaskBarState(val focus: Boolean, val appId: String)\n\n  @Composable\n  override fun Render() {\n    taskbarView.Render()\n  }\n}\n"},{"language":"kotlin","path":"desk/TaskbarV2Controller.kt","content":"package org.dweb_browser.browser.desk\n\nimport androidx.compose.runtime.Composable\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.filter\nimport org.dweb_browser.browser.desk.model.TaskbarAppModel\nimport org.dweb_browser.browser.desk.render.ITaskbarV2View\nimport org.dweb_browser.browser.desk.render.create\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.sys.window.core.helper.pickLargest\nimport org.dweb_browser.sys.window.core.helper.toStrict\n\nclass TaskbarV2Controller(\n  deskNMM: DeskNMM.DeskRuntime,\n  val deskSessionId: String,\n  desktopController: DesktopControllerBase,\n) : TaskbarControllerBase(deskNMM, desktopController) {\n  internal val appsFlow = MutableStateFlow(emptyList<TaskbarAppModel>())\n\n  private suspend fun upsetApps() {\n    appsFlow.value = getTaskbarAppList(Int.MAX_VALUE).map { new ->\n      // 必须创建一个新的TaskbarAppModel引用，否则mode的更改不会触发composable函数变更状态\n      var appModel = appsFlow.value.find { it.mmid == new.mmid }?.let {\n        TaskbarAppModel(it.mmid, it.icon, new.running, it.isShowClose)\n      }\n      if (appModel == null) {\n        appModel = TaskbarAppModel(\n          mmid = new.mmid,\n          icon = new.icons.toStrict().pickLargest(),\n          running = new.running,\n          isShowClose = false,\n        )\n      }\n\n      if (new.winStates.isNotEmpty()) {\n        val state = new.winStates.last()\n        appModel.state.apply {\n          focus = state.focus\n          visible = state.visible\n          mode = state.mode\n        }\n      } else {\n        appModel.state.focus = false\n      }\n\n      appModel\n    }.sortedByDescending { it.state.focus }\n//    updateTaskBarSize(taskbarApps.count())\n  }\n\n  internal val view = ITaskbarV2View.create(this)\n\n  @Composable\n  override fun Render() {\n    view.Render()\n  }\n\n  init {\n    val mmScope = deskNMM.getRuntimeScope()\n    onUpdate.filter { it != \"bounds\" }.collectIn(mmScope) {\n      upsetApps()\n    }\n  }\n}"},{"language":"kotlin","path":"desk/WindowSysProtocol.kt","content":"package org.dweb_browser.browser.desk\n\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.http.router.byChannel\nimport org.dweb_browser.helper.Observable\nimport org.dweb_browser.helper.PureBounds\nimport org.dweb_browser.helper.PureRect\nimport org.dweb_browser.helper.toJsonElement\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.queryAs\nimport org.dweb_browser.sys.window.core.SetWindowSize\nimport org.dweb_browser.sys.window.core.constant.WindowPropertyKeys\nimport org.dweb_browser.sys.window.core.constant.WindowStyle\nimport org.dweb_browser.sys.window.core.constant.debugWindow\n\nsuspend fun DeskNMM.DeskRuntime.windowProtocol() {\n  protocol(\"window.sys.dweb\") {\n    routes(\n      /// 打开主窗口，获取主窗口句柄\n      // TODO 这样需要跳出授权窗口，获得OTP（一次性密钥），然后在让 desk.browser.dweb 打开窗口\n      \"/openMainWindow\" bind PureMethod.GET by defineStringResponse {\n        openOrActivateAppWindow(ipc, deskController.getDesktopController()).id\n      },\n      \"/mainWindow\" bind PureMethod.GET by defineStringResponse {\n        getAppMainWindow().id\n      },\n      \"/createModal\" bind PureMethod.GET by defineJsonResponse {\n        createModal(ipc).toJsonElement()\n      },\n      \"/openModal\" bind PureMethod.GET by defineBooleanResponse {\n        val controller = getAppMainWindow(ipc)\n        controller.openModal(request.query(\"modalId\"))\n      },\n      \"/updateModalCloseTip\" bind PureMethod.GET by defineBooleanResponse {\n        getAppMainWindow().updateModalCloseTip(\n          request.query(\"modalId\"),\n          request.queryOrNull(\"closeTip\")\n        )\n      },\n      \"/closeModal\" bind PureMethod.GET by defineBooleanResponse {\n        getAppMainWindow().closeModal(this@windowProtocol, request.query(\"modalId\"))\n      },\n      \"/removeModal\" bind PureMethod.GET by defineBooleanResponse {\n        getAppMainWindow().removeModal(this@windowProtocol, request.query(\"modalId\"))\n      },\n      /** 窗口的状态监听 */\n      \"/observe\" byChannel { ctx ->\n        val win = getWindow()\n        debugWindow(\"/observe\", \"wid: ${win.id} ,mmid: ${ipc.remote.mmid}\")\n        win.state.observable.onChange {\n          try {\n            ctx.sendJsonLine(win.state.toJsonElement())\n          } catch (e: Exception) {\n            e.printStackTrace()\n            close(cause = e)\n          }\n        }.also {\n          it.removeWhen(onClose)\n          it.emitSelf(\n            Observable.Change(\n              WindowPropertyKeys.Constants, null, null\n            )\n          )\n        }\n      },\n      \"/observe-keyboard\" byChannel { ctx ->\n        val win = getWindow()\n        debugWindow(\"/observe-keyboard\", \"wid: ${win.id} ,mmid: ${ipc.remote.mmid}\")\n        @Serializable\n        data class KeyboardState(\n          val insets: PureBounds,\n          val overlay: Boolean,\n        )\n        win.state.observable.onChange {\n          if (it.key == WindowPropertyKeys.KeyboardInsetBottom || it.key == WindowPropertyKeys.KeyboardOverlaysContent) {\n            try {\n              ctx.sendJsonLine(\n                KeyboardState(\n                  insets = PureBounds.Zero.copy(bottom = win.state.keyboardInsetBottom),\n                  overlay = win.state.keyboardOverlaysContent\n                )\n              )\n            } catch (e: Exception) {\n              e.printStackTrace()\n              close(cause = e)\n            }\n          }\n        }.also {\n          it.removeWhen(onClose)\n          it.emitSelf(\n            Observable.Change(\n              WindowPropertyKeys.Constants, null, null\n            )\n          )\n        }\n      },\n      \"/getState\" bind PureMethod.GET by defineJsonResponse {\n        getWindow().state.toJsonElement()\n      },\n      \"/focus\" bind PureMethod.GET by defineEmptyResponse { getWindow().focus() },\n      \"/blur\" bind PureMethod.GET by defineEmptyResponse { getWindow().blur() },\n      \"/maximize\" bind PureMethod.GET by defineEmptyResponse { getWindow().maximize() },\n      \"/unMaximize\" bind PureMethod.GET by defineEmptyResponse { getWindow().unMaximize() },\n      \"/visible\" bind PureMethod.GET by defineEmptyResponse { getWindow().toggleVisible() },\n      \"/close\" bind PureMethod.GET by defineEmptyResponse { getWindow().tryCloseOrHide() },\n      \"/closeWindow\" bind PureMethod.GET by defineEmptyResponse { getWindow().closeRoot(true) },\n      \"/setStyle\" bind PureMethod.GET by defineEmptyResponse {\n        getWindow().setStyle(request.queryAs<WindowStyle>())\n      },\n      // 设置窗口大小\n      \"/setBounds\" bind PureMethod.GET by defineEmptyResponse {\n        getWindow().setBounds(request.queryAs<SetWindowSize>())\n      },\n      // 获取窗口信息\n      \"/getDisplayInfo\" bind PureMethod.GET by defineJsonResponse {\n        val manager =\n          getWindow().getManager() ?: throwException(message = \"not found window\")\n        val state = manager.state\n\n        @Serializable\n        data class Display(\n          val height: Float, val width: Float, val imeBoundingRect: PureRect,\n        )\n\n        val displaySize = state.viewBox.getDisplaySize()\n        Display(displaySize.height, displaySize.width, state.imeBoundingRect).toJsonElement()\n      })\n  }\n}"},{"language":"kotlin","path":"download/DownloadController.kt","content":"package org.dweb_browser.browser.download\n\nimport io.ktor.http.ContentRange\nimport io.ktor.http.ContentType\nimport io.ktor.http.HttpHeaders\nimport io.ktor.http.HttpStatusCode\nimport io.ktor.http.RangeUnits\nimport io.ktor.http.Url\nimport io.ktor.http.fromFilePath\nimport io.ktor.utils.io.ByteReadChannel\nimport io.ktor.utils.io.cancel\nimport io.ktor.utils.io.writeByteArray\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.browser.download.model.DecompressModel\nimport org.dweb_browser.browser.download.model.DownloadListModel\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.download.model.DownloadStateEvent\nimport org.dweb_browser.browser.download.model.DownloadTask\nimport org.dweb_browser.browser.download.render.Render\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.core.std.file.FileMetadata\nimport org.dweb_browser.core.std.file.ext.appendFile\nimport org.dweb_browser.core.std.file.ext.existFile\nimport org.dweb_browser.core.std.file.ext.infoFile\nimport org.dweb_browser.core.std.file.ext.removeFile\nimport org.dweb_browser.helper.UUID\nimport org.dweb_browser.helper.consumeEachArrayRange\nimport org.dweb_browser.helper.createByteChannel\nimport org.dweb_browser.helper.datetimeNow\nimport org.dweb_browser.helper.randomUUID\nimport org.dweb_browser.pure.http.PureClientRequest\nimport org.dweb_browser.pure.http.PureHeaders\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.PureStreamBody\nimport org.dweb_browser.sys.toast.ext.showToast\nimport org.dweb_browser.sys.window.core.WindowController\nimport org.dweb_browser.sys.window.core.helper.setStateFromManifest\nimport org.dweb_browser.sys.window.core.windowAdapterManager\nimport org.dweb_browser.sys.window.ext.getMainWindow\nimport org.dweb_browser.sys.window.ext.getWindow\n\nclass DownloadController(internal val downloadNMM: DownloadNMM.DownloadRuntime) {\n  private val downloadStore = DownloadStore(downloadNMM)\n  internal inline fun <R> launch(crossinline block: suspend () -> R) {\n    downloadNMM.scopeLaunch(cancelable = true) { block() }\n  }\n\n  val downloadMapFlow = MutableStateFlow(mapOf<String, DownloadTask>())\n  var downloadMap\n    get() = downloadMapFlow.value\n    set(value) {\n      downloadMapFlow.value = value\n    }\n\n\n  private var winLock = Mutex(false)\n  val downloadListModel = DownloadListModel(this)\n  val decompressModel = DecompressModel(this)\n\n  suspend fun loadDownloads() {\n    downloadMap = downloadStore.getAll().also { map ->\n      map.forEach { (_, downloadTask) ->\n        // 如果是从文件中读取的，需要将下载中的状态统一置为暂停。其他状态保持不变\n        if (downloadTask.status.state == DownloadState.Downloading) {\n          if (fileExists(downloadTask.filepath)) { // 为了保证下载中的状态current值正确\n            downloadTask.status.current = fileInfo(downloadTask.filepath).size ?: 0L\n          }\n          downloadTask.status.state = DownloadState.Paused\n        }\n      }\n    }\n    debugDownload(\"loadDownloads\", downloadMap)\n  }\n\n  /**\n   * 创建新下载任务\n   */\n  suspend fun createTaskFactory(\n    params: DownloadNMM.DownloadTaskParams, originMmid: MMID, externalDownload: Boolean,\n  ): DownloadTask {\n    // 查看是否创建过相同的task,并且相同的task已经下载完成\n    val task = DownloadTask(\n      id = randomUUID(),\n      url = params.url,\n      originMmid = originMmid,\n      originUrl = params.originUrl,\n      openDappUri = params.openDappUri,\n      mime = \"application/octet-stream\",\n      filepath = fileCreateByPath(params.url, externalDownload),\n      status = DownloadStateEvent(total = params.total)\n    )\n    task.external = externalDownload // 后面有用到这个字段，这边需要在初始化的时候赋值\n    downloadStore.set(task.id, task) // 保存下载状态\n    downloadMap += task.id to task\n    debugDownload(\"createTaskFactory\", \"${task.id} -> $task\")\n    return task\n  }\n\n  /**\n   * 恢复(创建)下载，需要重新创建连接🔗\n   */\n  private suspend fun doDownload(task: DownloadTask): Boolean {\n    if (task.readChannel != null) {\n      return true\n    }\n    val start = task.status.current\n    debugDownload(\"recoverDownload\", \"start=$start => $task\")\n    task.status.state = DownloadState.Downloading // 这边开始请求http了，属于开始下载\n    task.emitChanged()\n    var response = downloadNMM.nativeFetch(\n      PureClientRequest(href = task.url, method = PureMethod.GET, headers = PureHeaders().apply {\n        init(HttpHeaders.Range, \"${RangeUnits.Bytes}=${ContentRange.TailFrom(start)}\")\n      })\n    )\n    // 目前发现测试的时候，如果不存在range的上面会报错。直接使用下面这个来请求\n    if (response.status == HttpStatusCode.RequestedRangeNotSatisfiable) {\n      task.status.current = 0L\n      response =\n        downloadNMM.nativeFetch(PureClientRequest(href = task.url, method = PureMethod.GET))\n    }\n\n    if (!response.isOk) {\n      task.status.state = DownloadState.Failed\n      task.status.stateMessage = response.status.description\n      task.emitChanged()\n      downloadNMM.showToast(response.status.toString())\n      return false\n    }\n\n    task.mime = mimeFactory(response.headers, task.url)\n    // TODO 这个本来是考虑如果地址获取的文件名有误，所以才增加的，但是由于改造，创建的时候返回来downloadTask，导致这边修改并没有被捕获，所以暂时移除，待优化\n    // task.filepath = fileCreateByHeadersAndPath(response.headers, task.url, task.mime, task.external)\n\n    // 判断地址是否支持断点\n    val supportRange =\n      response.headers.getByIgnoreCase(\"Accept-Ranges\")?.equals(\"bytes\", true) == true\n    val contentLength =\n      response.headers.getByIgnoreCase(\"Content-Length\")?.toLong() ?: task.status.total\n\n    debugDownload(\"recoverDownload\", \"supportRange=$supportRange, contentLength=$contentLength\")\n    if (supportRange) {\n      task.status.current = start\n      task.status.total = contentLength + start\n    } else {\n      task.status.current = 0L\n      task.status.total = contentLength\n    }\n    val streamReader = response.stream().getReader(\"downloadTask#${task.id}\")\n    task.readChannel = streamReader\n    task.emitChanged()\n\n    debugDownload(\"downloadFactory\", task.id)\n    val output = createByteChannel()\n    val taskId = task.id\n    // 重要记录点 存储到硬盘\n    downloadMap += taskId to task\n    downloadStore.set(taskId, task)\n    // 正式下载需要另外起一个协程，不影响当前的返回值\n    downloadNMM.scopeLaunch(cancelable = true) {\n      debugDownload(\"middleware\", \"start id:$taskId current:${task.status.current}\")\n      task.emitChanged()\n      try {\n        streamReader.consumeEachArrayRange { byteArray, last ->\n          // 处理是否暂停\n          task.paused.withLock {}\n          if (byteArray.isNotEmpty()) {\n            task.status.current += byteArray.size\n            output.writeByteArray(byteArray)\n          }\n          if (last) {\n            output.close()\n            streamReader.cancel()\n            task.status.state = DownloadState.Completed\n            // 触发完成 存储到硬盘\n            downloadStore.set(task.id, task)\n          } else if (output.isClosedForRead) {\n            breakLoop()\n            task.cancel()\n            // 触发取消 存储到硬盘\n            streamReader.cancel()\n            downloadStore.set(task.id, task)\n          }\n          // 触发更新\n          task.emitChanged()\n          // debugDownload(\"middleware\", \"progress id:$taskId current:${downloadTask.status.current}\")\n        }\n        debugDownload(\"middleware\") { \"end id:$taskId, ${task.status}\" }\n      } catch (e: Throwable) {\n        // 这里捕获的一般是 connection reset by peer 当前没有重试机制，用户再次点击即为重新下载\n        debugDownload(\"middleware\", \"${e.message}\")\n        task.readChannel?.cancel()\n        task.readChannel = null\n        task.status.state = DownloadState.Failed\n        // 触发失败\n        task.emitChanged()\n      }\n    }\n    downloadNMM.scopeLaunch(cancelable = true) {\n      fileAppend(task, output)\n    }\n    return true\n  }\n\n  private fun mimeFactory(headers: PureHeaders, filePath: String): String {\n    // 先从header判断\n    val contentType = headers.get(\"Content-Type\")\n    if (!contentType.isNullOrEmpty()) {\n      return contentType\n    }\n    // 再从文件判断\n    val extension = ContentType.fromFilePath(filePath)\n    if (extension.isNotEmpty()) {\n      return extension.first().toString()\n    }\n    return \"application/octet-stream\"\n  }\n\n  /**\n   * 通过Header来创建不重复的文件\n   */\n  private suspend fun fileCreateByHeadersAndPath(\n    headers: PureHeaders, url: String, mime: String, externalDownload: Boolean,\n  ): String {\n    // 先从header判断\n    var fileName = headers.get(\"Content-Disposition\")?.substringAfter(\"filename=\")?.trim('\"')\n      ?: Url(url).segments.lastOrNull() ?: \"\"\n    if (fileName.isEmpty()) fileName = \"${datetimeNow()}.${mime.substringAfter(\"/\")}\"\n    var index = 0\n    while (true) {\n      val path = if (externalDownload) {\n        \"/download/${index++}_${fileName}\"\n      } else {\n        \"/data/download/${index++}_${fileName}\"\n      }\n      if (!fileExists(path)) {\n        return path\n      }\n    }\n  }\n\n  /**\n   * 创建不重复的文件\n   */\n  private suspend fun fileCreateByPath(url: String, externalDownload: Boolean): String {\n    var index = 0\n    val fileName = Url(url).segments.lastOrNull() ?: \"\"\n    while (true) {\n      val path = if (externalDownload) {\n        \"/download/${index++}_${fileName}\"\n      } else {\n        \"/data/download/${index++}_${fileName}\"\n      }\n      if (!fileExists(path)) {\n        return path\n      }\n    }\n  }\n\n  private suspend fun fileExists(path: String) = downloadNMM.existFile(path)\n\n  private suspend fun fileInfo(path: String): FileMetadata {\n    return Json.decodeFromString(downloadNMM.infoFile(path))\n  }\n\n  private suspend fun fileRemove(filepath: String) = downloadNMM.removeFile(filepath)\n\n  //  追加写入文件，断点续传\n  private suspend fun fileAppend(task: DownloadTask, stream: ByteReadChannel) {\n    downloadNMM.appendFile(task.filepath, PureStreamBody(stream))\n  }\n\n  /**\n   * 启动\n   */\n  suspend fun startDownload(task: DownloadTask) = if (task.paused.isLocked) { // 表示只是短暂的暂停，不用从内存中恢复\n    task.paused.unlock()\n    task.status.state = DownloadState.Downloading\n    task.emitChanged()\n    true\n  } else { // 触发断点逻辑\n    downloadFactory(task)\n  }\n\n  /**\n   * 暂停⏸️\n   */\n  suspend fun pauseDownload(task: DownloadTask) {\n    if (task.status.state == DownloadState.Downloading) {\n      task.status.state = DownloadState.Paused\n      task.emitChanged()\n      task.paused.tryLock()\n      // 暂停并不会删除文件\n      downloadStore.set(task.id, task) // 保存到文件\n    }\n  }\n\n  /**\n   * 取消下载\n   */\n  suspend fun cancelDownload(taskId: TaskId) = downloadMap[taskId]?.let { downloadTask ->\n    // 如果有文件,直接删除\n    if (fileExists(downloadTask.filepath)) {\n      fileRemove(downloadTask.filepath)\n    }\n    // 修改状态\n    downloadTask.cancel()\n    true\n  } ?: false\n\n  suspend fun removeDownload(taskId: TaskId) {\n    downloadMap[taskId]?.let { downloadTask ->\n      downloadTask.readChannel?.cancel()\n      downloadTask.readChannel = null\n\n      downloadMap -= taskId\n      downloadStore.delete(taskId)\n      fileRemove(downloadTask.filepath)\n    }\n  }\n\n  /**\n   * 执行下载任务 ,可能是断点下载\n   */\n  suspend fun downloadFactory(task: DownloadTask): Boolean = when (task.status.state) {\n    DownloadState.Init, DownloadState.Failed, DownloadState.Canceled -> {\n      doDownload(task) // 执行下载\n    }\n\n    DownloadState.Paused -> when (task.readChannel) {\n      /// 从磁盘中恢复下载\n      null -> doDownload(task)\n      else -> {\n        task.status.state = DownloadState.Downloading // 这边开始请求http了，属于开始下载\n        task.emitChanged()\n        true\n      }\n    }\n\n    DownloadState.Downloading, DownloadState.Completed -> true\n  }\n\n\n  /**\n   * 窗口是单例模式\n   */\n  private var win: WindowController? = null\n  suspend fun renderDownloadWindow(wid: UUID) = winLock.withLock {\n    downloadNMM.getWindow(wid).also { newWin ->\n      if (win == newWin) {\n        return@withLock\n      }\n      win = newWin\n      newWin.setStateFromManifest(downloadNMM)\n      /// 提供渲染适配\n      windowAdapterManager.provideRender(wid) { modifier ->\n        Render(modifier, this)\n      }\n      newWin.onClose {\n        winLock.withLock {\n          if (newWin == win) {\n            win = null\n          }\n        }\n      }\n    }\n  }\n\n  suspend fun close() = winLock.withLock { downloadNMM.getMainWindow().tryCloseOrHide() }\n}"},{"language":"kotlin","path":"download/DownloadI18n.kt","content":"package org.dweb_browser.browser.download\n\nimport org.dweb_browser.helper.compose.I18n\n\nobject DownloadI18n : I18n() {\n  val completed = zh(\"已完成\", \"Completed\")\n  val downloading = zh(\"下载中\", \"Downloading\")\n\n  val no_select_detail = zh(\"未选择要展示详情的文件\", \"select file to show details\")\n  val unknown_origin = zh(\"未记录\", \"Unknown\")\n  val url_copy_success = zh(\"链接已复制\", \"Link copied\")\n\n  val unzip_label_no = zh(\"编号\", \"No\")\n  val unzip_label_name = zh(\"文件名\", \"File Name\")\n  val unzip_label_url = zh(\"下载链接\", \"Download Link\")\n  val unzip_label_path = zh(\"本地路径\", \"File Path\")\n  val unzip_label_createTime = zh(\"创建时间\", \"Create Time\")\n  val unzip_label_originUrl = zh(\"数据来源\", \"Origin\")\n  val unzip_label_originMmid = zh(\"下载器\", \"Downloader\")\n  val unzip_label_mime = zh(\"文件类型\", \"Content Type\")\n\n  val pause = zh(\"暂停\", \"Pause\")\n  val resume = zh(\"继续\", \"Resume\")\n  val paused = zh(\"已暂停\", \"Paused\")\n  val open = zh(\"打开\", \"Open\")\n  val retry = zh(\"重试\", \"Retry\")\n  val failed = zh(\"失败\", \"Failed\")\n\n  val delete_alert_title = zh(\"确定要删除下载任务？\", \"Confirm to delete the download task?\")\n  val delete_alert_message = zh1({ \"文件：“$value”也会被同时从本地删除\" },\n    { \"the file: \\\"$value\\\" will also be deleted from your disk\" })\n  val confirm_delete = zh(\"确认删除\", \"Delete!\")\n}"},{"language":"kotlin","path":"download/DownloadNMM.kt","content":"package org.dweb_browser.browser.download\n\nimport io.ktor.http.HttpStatusCode\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlinx.coroutines.FlowPreview\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.download.model.DownloadStateEvent\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.router.ResponseException\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.http.router.byChannel\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.file.ext.pickFile\nimport org.dweb_browser.helper.Debugger\nimport org.dweb_browser.helper.DisplayMode\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.helper.toJsonElement\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.queryAs\nimport org.dweb_browser.pure.http.queryAsOrNull\nimport org.dweb_browser.sys.window.core.helper.setStateFromManifest\nimport org.dweb_browser.sys.window.ext.getMainWindow\nimport org.dweb_browser.sys.window.ext.onRenderer\n\ninternal val debugDownload = Debugger(\"Download\")\n\nclass DownloadNMM : NativeMicroModule(\"download.browser.dweb\", \"Download\") {\n  init {\n    short_name = BrowserI18nResource.download_shore_name.text\n    categories = listOf(\n      MICRO_MODULE_CATEGORY.Network_Service,\n    ).let {\n      if (envSwitch.isEnabled(ENV_SWITCH_KEY.BROWSER_DOWNLOAD)) {\n        it + MICRO_MODULE_CATEGORY.Application\n      } else it\n    }\n    display = DisplayMode.Fullscreen\n    icons =\n      listOf(ImageResource(src = \"file:///sys/browser-icons/$mmid.svg\", type = \"image/svg+xml\"))\n  }\n\n  @Serializable\n  data class DownloadTaskParams(\n    /** 下载链接 */\n    val url: String,\n    /** 来源链接 */\n    val originUrl: String? = null,\n    /** 下载回调链接 */\n    val openDappUri: String? = null,\n    /** 文件的元数据类型，可以用来做“打开文件”时的参考类型 */\n    val mime: String? = null,\n    /** 是否直接开始下载(如果您需要监听完整的进度流程，可以先监听再调用下载)*/\n    val start: Boolean = false,\n    /** 用于接收json中文件大小 */\n    val total: Long = 1L,\n  ) {}\n\n  inner class DownloadRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n    @OptIn(FlowPreview::class)\n    override suspend fun _bootstrap() {\n      val controller = DownloadController(this)\n      controller.loadDownloads()\n      onBeforeShutdown {\n        controller.downloadMap.forEach { (_, downloadTask) ->\n          controller.pauseDownload(downloadTask)\n        }\n      }\n      routes(\n        // 开始下载\n        \"/create\" bind PureMethod.GET by defineJsonResponse {\n          val mmid = ipc.remote.mmid\n          val params = request.queryAs<DownloadTaskParams>()\n          val externalDownload = request.queryAsOrNull<Boolean>(\"external\") ?: false\n          debugDownload(\"/create\", \"mmid=$mmid, params=$params, external=$externalDownload\")\n          // 由于下面会修改downloadTask的filepath，但是在下载时，需要保持真实路径，所以这边做了copy操作\n          val downloadTask = controller.createTaskFactory(params, mmid, externalDownload).copy()\n          debugDownload(\"/create\", \"task=$downloadTask\")\n          if (params.start) {\n            controller.downloadFactory(downloadTask)\n          }\n          /// TODO 使用新版的 模块文件系统替代 realPath，比如 file:///$mmid/{$downloadTask.filepath}\n          downloadTask.filepath = pickFile(downloadTask.filepath)\n          downloadTask.toJsonElement()\n        },\n        // 获取当前的task\n        \"/getTask\" bind PureMethod.GET by defineJsonResponse {\n          val taskId = request.queryOrNull(\"taskId\") ?: throw ResponseException(\n            HttpStatusCode.BadRequest, \"taskId is null\"\n          )\n          debugDownload(\"exists\", \"taskId = $taskId\")\n          controller.downloadMap[taskId]?.copy()?.let { downloadTask ->\n            downloadTask.filepath = pickFile(downloadTask.filepath)\n            downloadTask.toJsonElement()\n          } ?: throw ResponseException(HttpStatusCode.NotFound, \"not found task by $taskId\")\n        },\n        // 开始/恢复 下载\n        \"/start\" bind PureMethod.GET by defineBooleanResponse {\n          val taskId = request.query(\"taskId\")\n          debugDownload(\"/start\", taskId)\n          val task = controller.downloadMap[taskId] ?: return@defineBooleanResponse false\n          debugDownload(\"/start\", \"task=$task\")\n          controller.startDownload(task)\n        },\n        // 监控下载进度\n        \"/flow/progress\" byChannel { ctx ->\n          val taskId = request.query(\"taskId\")\n          val downloadTask = controller.downloadMap[taskId]\n            ?: return@byChannel close(Throwable(\"not Found download task!\"))\n          debugDownload(\"/flow/progress\", \"taskId=$taskId\")\n          var statusValue = downloadTask.status\n          var statusWaiter: CompletableDeferred<DownloadStateEvent>? = null\n          val job = downloadTask.onChange.collectIn(mmScope) {\n            val stateEvent = downloadTask.status.copy()\n            statusValue = stateEvent\n            statusWaiter?.also { waiter ->\n              statusWaiter = null\n              waiter.complete(stateEvent)\n            }\n            when (stateEvent.state) {\n              DownloadState.Canceled, DownloadState.Failed, DownloadState.Completed -> {\n                ctx.sendJsonLine(stateEvent)// 直接发送结束帧\n                ctx.close()\n              }\n\n              else -> {}\n            }\n          }\n          ctx.onClose {\n            job.cancel()\n          }\n          var lastSentValue: Any? = null\n          // 同时处理 stateFlow 和 commandChannel\n          for (frame in ctx.income) {\n            if (frame.text == \"get\") {\n              lastSentValue = if (statusValue === lastSentValue) {\n                CompletableDeferred<DownloadStateEvent>().also {\n                  statusWaiter = it\n                }.await().copy()\n              } else {\n                statusValue\n              }\n              ctx.sendJsonLine(lastSentValue)\n            }\n          }\n        },\n        // 暂停下载\n        \"/pause\" bind PureMethod.GET by defineJsonResponse {\n          val taskId = request.query(\"taskId\")\n          val task =\n            controller.downloadMap[taskId] ?: throwException(message = \"no found taskId=$taskId\")\n          controller.pauseDownload(task)\n          task.status.toJsonElement()\n        },\n        // 取消下载\n        \"/cancel\" bind PureMethod.GET by defineBooleanResponse {\n          val taskId = request.query(\"taskId\")\n          controller.cancelDownload(taskId)\n        },\n        // 移除任务\n        \"/remove\" bind PureMethod.DELETE by defineEmptyResponse {\n          val taskId = request.query(\"taskId\")\n          controller.removeDownload(taskId)\n        })\n      onRenderer {\n        controller.renderDownloadWindow(wid)\n        getMainWindow().setStateFromManifest(manifest)\n      }\n    }\n\n    override suspend fun _shutdown() {\n\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = DownloadRuntime(bootstrapContext)\n}"},{"language":"kotlin","path":"download/DownloadStore.kt","content":"package org.dweb_browser.browser.download\n\nimport org.dweb_browser.browser.download.model.DownloadTask\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.file.ext.createStore\n\ntypealias TaskId = String\n\nclass DownloadStore(mm: MicroModule.Runtime) {\n  private val store = mm.createStore(\"download_task\", false)\n\n  suspend fun getOrPut(key: TaskId, value: DownloadTask): DownloadTask {\n    return store.getOrPut(key) { value }\n  }\n\n  suspend fun get(key: TaskId): DownloadTask? {\n    return store.getOrNull(key)\n  }\n\n  suspend fun getAll(): MutableMap<TaskId, DownloadTask> {\n    return store.getAll()\n  }\n\n  suspend fun set(key: TaskId, value: DownloadTask) {\n    store.set(key, value)\n  }\n\n  suspend fun delete(key: TaskId) {\n    store.delete(key)\n  }\n}"},{"language":"kotlin","path":"http/httpDevRender.kt","content":"package org.dweb_browser.browser.http\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.rounded.Clear\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.FilledTonalIconButton\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.LocalTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Switch\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextField\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.AnnotatedString\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.dwebHttpGatewayService\nimport org.dweb_browser.core.http.dwebProxyService\nimport org.dweb_browser.core.std.http.DWEB_PING_URI\nimport org.dweb_browser.core.std.http.HttpNMM\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.datetimeNow\nimport org.dweb_browser.pure.http.PureClientRequest\nimport org.dweb_browser.pure.http.PureHeaders\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.sys.window.core.WindowContentScaffoldWithTitleText\nimport org.dweb_browser.sys.window.core.helper.setStateFromManifest\nimport org.dweb_browser.sys.window.core.windowAdapterManager\nimport org.dweb_browser.sys.window.ext.getMainWindow\nimport org.dweb_browser.sys.window.ext.onRenderer\nimport squircleshape.SquircleShape\n\nfun HttpNMM.installDevRenderer() {\n  runtimeFlow.collectIn { runtime ->\n    if (runtime is HttpNMM.HttpRuntime) {\n      if (runtime.categories.contains(MICRO_MODULE_CATEGORY.Application)) {\n        runtime.installDevRenderer()\n      }\n    }\n  }\n}\n\nprivate fun HttpNMM.HttpRuntime.installDevRenderer() {\n  onRenderer {\n    val win = getMainWindow()\n    win.setStateFromManifest(this@installDevRenderer)\n    /// 提供渲染适配\n    windowAdapterManager.provideRender(wid) { modifier ->\n      WindowContentScaffoldWithTitleText(modifier, topBarTitleText = \"网络控制中心\") {\n        LazyColumn(modifier = Modifier.padding(it).padding(horizontal = 16.dp)) {\n          item(\"gateway\") {\n            val currentPort by dwebHttpGatewayService.server.stateFlow.collectAsState()\n            Text(\"当前网关端口号: $currentPort\")\n            var customPort by remember {\n              mutableStateOf(\"0\")\n            }\n            TextField(\n              value = customPort,\n              onValueChange = { customPort = it },\n              keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)\n            )\n\n            Button(onClick = {\n              scopeLaunch(cancelable = true) {\n                dwebHttpGatewayService.server.close()\n                dwebHttpGatewayService.server.start(customPort.toIntOrNull()?.toUShort() ?: 0u)\n              }\n            }) {\n              Text(\n                text = when (currentPort) {\n                  null -> \"启动网关服务\"\n                  else -> \"重启网关服务\"\n                }\n              )\n            }\n            HorizontalDivider()\n          }\n          item(\"proxy\") {\n            val currentProxyUrl by dwebProxyService.proxyUrl.collectAsState()\n            Text(\"当前代理地址：$currentProxyUrl\")\n\n            Button({\n              scopeLaunch(cancelable = true) {\n                dwebProxyService.stop()\n                dwebProxyService.start()\n              }\n            }) {\n              Text(\n                when (currentProxyUrl) {\n                  null -> \"启动代理服务\"\n                  else -> \"重启代理服务\"\n                }\n              )\n            }\n            HorizontalDivider()\n          }\n\n          item(\"pingpong\") {\n            Text(\"服务保活链接: $DWEB_PING_URI\")\n            var checkResult by remember { mutableStateOf(AnnotatedString(\"\")) }\n            val style = LocalTextStyle.current.toSpanStyle()\n            var useDwebRootHost by remember { mutableStateOf(true) }\n            Switch(useDwebRootHost, { useDwebRootHost = it })\n            var customOrigin by remember { mutableStateOf(\"https://docs.dweb-browser.org\") }\n            if (!useDwebRootHost) {\n              TextField(customOrigin, { customOrigin = it }, label = { Text(\"Custom Origin\") })\n            }\n            Button({\n              scopeLaunch(cancelable = true) {\n                runCatching {\n                  val origin = when {\n                    useDwebRootHost -> \"https://internal.dweb\"\n                    else -> customOrigin.trim()\n                  }\n                  val response = client.fetch(\n                    PureClientRequest(\n                      \"$origin$DWEB_PING_URI?now=${datetimeNow()}\",\n                      method = PureMethod.GET,\n                      headers = PureHeaders().apply { init(\"Sec-Fetch-Dest\", \"dwebproxy\") },\n                    ),\n                  )\n                  checkResult = buildAnnotatedString {\n                    withStyle(\n                      style.copy(\n                        color = if (response.status.value == 200) Color.Green else Color.Red,\n                        fontSize = 12.sp\n                      )\n                    ) {\n                      append(\"[${response.status.value}] ${response.status.description}\\n\")\n                      response.headers.forEach { (k, v) -> append(\"$k: $v\\n\") }\n                    }\n                    withStyle(\n                      style.copy(\n                        color = when (response.status.value) {\n                          200 -> style.color\n                          else -> Color.Red.copy(alpha = 0.8f)\n                        }, fontSize = 9.sp\n                      )\n                    ) {\n                      append(response.body.toPureString())\n                    }\n                  }\n                }.getOrElse { err ->\n                  checkResult = buildAnnotatedString {\n                    withStyle(\n                      style.copy(\n                        color = Color.Red.copy(alpha = 0.8f), fontSize = 9.sp\n                      )\n                    ) {\n                      append(err.stackTraceToString())\n                    }\n                  }\n                }\n              }\n            }) {\n              Text(\"执行嗅探\")\n            }\n            if (checkResult.isNotEmpty()) {\n              Box(\n                Modifier.padding(8.dp)\n                  .background(MaterialTheme.colorScheme.background, shape = SquircleShape(16.dp))\n              ) {\n                FilledTonalIconButton(\n                  { checkResult = AnnotatedString(\"\") },\n                  modifier = Modifier.align(Alignment.TopEnd),\n                ) {\n                  Icon(Icons.Rounded.Clear, null)\n                }\n                Text(checkResult, fontSize = 9.sp)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"},{"language":"kotlin","path":"jmm/JmmApi.kt","content":"package org.dweb_browser.browser.jmm\n\nexpect fun getChromeWebViewVersion(): String?\n\nexpect suspend fun jmmAppHashVerify(\n  jmmNMM: JmmNMM.JmmRuntime,\n  jmmMetadata: JmmMetadata,\n  zipFilePath: String,\n): Boolean\n"},{"language":"kotlin","path":"jmm/JmmController.kt","content":"package org.dweb_browser.browser.jmm\n\nimport io.ktor.http.HttpStatusCode\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonPrimitive\nimport kotlinx.serialization.json.buildJsonObject\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.download.ext.cancelDownload\nimport org.dweb_browser.browser.download.ext.createDownloadTask\nimport org.dweb_browser.browser.download.ext.downloadProgressFlow\nimport org.dweb_browser.browser.download.ext.existDownloadTask\nimport org.dweb_browser.browser.download.ext.getDownloadTask\nimport org.dweb_browser.browser.download.ext.pauseDownload\nimport org.dweb_browser.browser.download.ext.removeDownload\nimport org.dweb_browser.browser.download.ext.startDownload\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.download.model.DownloadTask\nimport org.dweb_browser.core.help.types.JmmAppInstallManifest\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.core.http.router.ResponseException\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.core.std.file.ext.pickFile\nimport org.dweb_browser.core.std.file.ext.readFile\nimport org.dweb_browser.core.std.file.ext.removeFile\nimport org.dweb_browser.core.std.file.ext.writeFile\nimport org.dweb_browser.helper.SafeHashMap\nimport org.dweb_browser.helper.SuspendOnceWithKey\nimport org.dweb_browser.helper.buildUrlString\nimport org.dweb_browser.helper.datetimeNow\nimport org.dweb_browser.helper.falseAlso\nimport org.dweb_browser.helper.isGreaterThan\nimport org.dweb_browser.helper.isWebUrl\nimport org.dweb_browser.helper.resolveBaseUri\nimport org.dweb_browser.helper.resolvePath\nimport org.dweb_browser.helper.trueAlso\nimport org.dweb_browser.helper.valueIn\nimport org.dweb_browser.pure.http.IPureBody\nimport org.dweb_browser.sys.toast.ext.showToast\nimport org.dweb_browser.sys.window.core.WindowController\n\nclass JmmController(private val jmmNMM: JmmNMM.JmmRuntime, private val jmmStore: JmmStore) {\n\n  // 构建jmm历史记录\n  val historyMetadataMapsFlow = MutableStateFlow(mapOf<String, JmmMetadata>())\n\n  // 构建历史的controller\n  private val renderController = JmmRenderController(jmmNMM, this)\n\n  // 打开历史界面\n  suspend fun openHistoryView(win: WindowController) = renderController.showView(win)\n\n  suspend fun loadHistoryMetadataUrl() {\n    val loadMap = jmmStore.getAllHistory()\n    val historyMetadataMaps = mutableMapOf<String, JmmMetadata>()\n//    historyMetadataMaps.clear()\n    if (loadMap.filter { (key, value) -> key != value.manifest.id }.isNotEmpty()) {\n      // 为了替换掉旧数据，旧数据使用originUrl来保存的，现在改为mmid，add by 240201\n      val saveMap = mutableMapOf<String, MutableList<JmmMetadata>>()\n      loadMap.forEach { (_, value) ->\n        saveMap.getOrPut(value.manifest.id) { mutableListOf() }.add(value)\n      }\n      jmmStore.clearHistory() // 先删除旧的，然后再重新插入新的\n      saveMap.forEach { (key, list) ->\n        list.sortByDescending { it.manifest.version.replace(\".\", \"0\").toLong() }\n        list.firstOrNull()?.let { jmmStore.saveHistory(key, it) } // 取最后新的版本进行保存\n      }\n      historyMetadataMaps.putAll(jmmStore.getAllHistory()) // 重新加载最新数据\n    } else {\n      historyMetadataMaps.putAll(loadMap)\n    }\n    historyMetadataMaps.forEach { (key, historyMetadata) ->\n      if (historyMetadata.state.state.valueIn(JmmStatus.Downloading, JmmStatus.Paused)) {\n        // 获取下载的进度，如果进度 >= 0 表示有下载\n        historyMetadata.downloadTask?.let { jmmNMM.getDownloadTask(it.id) }?.let { downloadTask ->\n          historyMetadata.initDownloadTask(downloadTask, jmmStore)\n          if (downloadTask.status.state == DownloadState.Completed) { // 如果是完成了，那么考虑直接做解压\n            jmmNMM.scopeLaunch(cancelable = true) {\n              decompress(downloadTask, historyMetadata)\n            }\n          }\n        } ?: run {\n          historyMetadata.state = historyMetadata.state.copy(state = JmmStatus.Init, current = 0L)\n          jmmStore.saveHistory(key, historyMetadata)\n        }\n      } else if (jmmNMM.bootstrapContext.dns.query(historyMetadata.manifest.id) == null) {\n        historyMetadata.state = historyMetadata.state.copy(state = JmmStatus.Init) // 如果没有找到，说明被卸载了\n        jmmStore.saveHistory(key, historyMetadata)\n      }\n    }\n    historyMetadataMapsFlow.value = historyMetadataMaps\n  }\n\n  private val installViews = SafeHashMap<String, JmmDetailController>()\n\n  // 记录旧的版本\n  private var oldVersion: String? = null\n\n  fun getInstallerController(metadata: JmmMetadata) = installViews.getOrPut(metadata.manifest.id) {\n    JmmDetailController(\n      jmmNMM = jmmNMM, metadata = metadata, jmmController = this@JmmController\n    )\n  }.also {\n    // 不管是否替换的，都进行一次存储新状态，因为需要更新下载状态\n    it.metadata = metadata\n  }\n\n  /**打开bottomSheet的详情页面*/\n  suspend fun openBottomSheet(metadata: JmmMetadata) = getInstallerController(metadata).also {\n    it.openBottomSheet()\n  }\n\n  /**\n   * 显示应用安装界面时，需要最新的 AppInstallManifest 数据\n   */\n  suspend fun fetchJmmMetadata(metadataUrl: String, referrerUrl: String?): JmmMetadata {\n    val response = jmmNMM.nativeFetch(metadataUrl)\n    if (!response.isOk) {\n      throw ResponseException(code = response.status, \"fail to fetch metadataUrl: $metadataUrl\")\n    }\n    val manifest = response.json<JmmAppInstallManifest>()\n\n    val baseURI = when (manifest.baseURI?.isWebUrl()) {\n      true -> manifest.baseURI!!\n      else -> when (val baseUri = manifest.baseURI) {\n        null -> metadataUrl\n        else -> buildUrlString(metadataUrl) { resolvePath(baseUri) }\n      }.also { uri ->\n        manifest.baseURI = uri\n      }\n    }\n    // 如果bundle_url没有host\n    if (!manifest.bundle_url.isWebUrl()) {\n      manifest.bundle_url = buildUrlString(baseURI) {\n        resolveBaseUri()\n        resolvePath(manifest.bundle_url)\n      }\n    }\n    return manifest.createJmmMetadata(metadataUrl, referrerUrl, JmmStatus.Init)\n  }\n\n  /**\n   * 打开安装器视图\n   */\n  suspend fun openInstallerView(jmmMetadata: JmmMetadata) {\n    debugJMM(\"openInstallerView\", jmmMetadata.manifest.bundle_url)\n    compareLocalMetadata(jmmMetadata, save = true)\n    getInstallerController(jmmMetadata).openBottomSheet()\n  }\n\n  /**\n   * 打开详情页视图\n   */\n  fun openDetailView(jmmMetadata: JmmMetadata) {\n    debugJMM(\"openDetailView\", jmmMetadata.manifest.bundle_url)\n    renderController.openDetail(jmmMetadata)\n  }\n\n  /**\n   * 对比本地已经存在的数据，从而更新这个 JmmMetadata 的一些相关状态。\n   * 并按需触发数据库保存\n   **/\n  private suspend fun compareLocalMetadata(newMetadata: JmmMetadata, save: Boolean) {\n    val mmid = newMetadata.manifest.id\n    // 拿到已经安装过的准备对比\n    val oldMM = jmmNMM.bootstrapContext.dns.query(mmid)\n    val oldMetadata = jmmStore.getApp(mmid)?.jmmMetadata\n    debugJMM(\"compareLocalMetadata\") {\n      \"installMM=${oldMetadata?.manifest?.version} mmid=$mmid\"\n    }\n    // 从未安装过，直接替换成当前的，不考虑是否比历史列表高\n    if (oldMetadata == null || oldMM == null) {\n      if (save) {\n        saveMetadata(newMetadata)\n      }\n      return\n    }\n\n    val oldManifest = oldMetadata.manifest\n    val newManifest = newMetadata.manifest\n    // 比安装高，直接进行替换\n    if (newManifest.version.isGreaterThan(oldManifest.version) ||\n      // 如果老版本处于内核非兼容的状态，\n      (!oldManifest.canSupportTarget(JsMicroModule.VERSION)\n          // 而新版本有做了兼容内核的升级，那么也属于版本升级\n          && newManifest.canSupportTarget(JsMicroModule.VERSION))\n    ) {\n      oldVersion = oldMetadata.manifest.version\n      // session 处理\n      val session = getAppSessionInfoCompact(newManifest.id, oldMetadata.manifest.version)\n      debugJMM(\"openInstallerView\", \"is order app and session=$session\")\n      // 如果列表的应用是下载中的，那么需要移除掉\n      if (oldMetadata.state.state.valueIn(JmmStatus.Downloading, JmmStatus.Paused)) {\n        oldMetadata.downloadTask?.id?.let { taskId -> jmmNMM.cancelDownload(taskId) }\n      }\n\n      newMetadata.state = newMetadata.state.copy(state = JmmStatus.NewVersion)\n      newMetadata.installTime = session?.installTime ?: datetimeNow()\n      if (save) {\n        saveMetadata(newMetadata)\n      }\n      return\n    }\n    // 版本相同\n    if (newManifest.version == oldManifest.version) {\n      // 这里表示二者是一样的，此时new状态需要跟old保持一致，而不是直接置为 Installed\n      newMetadata.state = newMetadata.state.copy(\n        current = oldMetadata.state.current,\n        total = oldMetadata.state.total,\n        state = oldMetadata.state.state\n      )\n    } else { // 比安装的应用版本还低的，直接不能安装，提示版本过低，不存储\n      newMetadata.state = newMetadata.state.copy(state = JmmStatus.VersionLow, current = 0L)\n    }\n  }\n\n  /**只有需要存储的时候才存起来*/\n  private suspend fun saveMetadata(differentMetadata: JmmMetadata) {\n    debugJMM(\"saveMetadata\", differentMetadata)\n    historyMetadataMapsFlow.value += differentMetadata.manifest.id to differentMetadata\n    jmmStore.saveHistory(\n      differentMetadata.manifest.id, differentMetadata\n    )\n  }\n\n  suspend fun uninstall(mmid: MMID): Boolean {\n    val data = jmmStore.getApp(mmid) ?: return false\n    // 在dns中移除app\n    jmmNMM.bootstrapContext.dns.uninstall(mmid)\n    // 在存储中移除整个app\n    jmmNMM.removeFile(\"/data/apps/${mmid}-${data.installManifest.version}\")\n    // 从磁盘中移除整个\n    jmmStore.deleteApp(mmid)\n    // 恢复成Init状态\n    historyMetadataMapsFlow.value[mmid]?.also { item ->\n      item.initState(jmmStore)\n      historyMetadataMapsFlow.value += mmid to item\n    }\n    return true\n  }\n\n  private val downloadLock = Mutex()\n\n  suspend fun startDownloadTaskByUrl(originUrl: String, referrerUrl: String?) = try {\n    val metadata = fetchJmmMetadata(originUrl, referrerUrl)\n    compareLocalMetadata(metadata, save = true)\n    when (val state = metadata.state.state) {\n      JmmStatus.Init -> startDownloadTask(metadata)\n      else -> debugJMM(\"startDownloadTaskByUrl\", \"fail to start state=$state url=$originUrl\")\n    }\n  } catch (e: ResponseException) {\n    val message = if (e.code == HttpStatusCode.NotFound) {\n      JmmI18nResource.url_invalid.text\n    } else {\n      \"${e.code.value} >> ${e.code.description}\"\n    }\n    jmmNMM.showToast(message = message)\n  }\n\n  private suspend fun decompressProcess(downloadTask: DownloadTask, metadata: JmmMetadata) {\n    if (decompress(downloadTask, metadata)) {\n      jmmNMM.bootstrapContext.dns.uninstall(metadata.manifest.id)\n      jmmNMM.bootstrapContext.dns.install(JsMicroModule(metadata.manifest))\n      metadata.installComplete(jmmStore)\n    } else {\n      jmmNMM.showToast(BrowserI18nResource.toast_message_download_unzip_fail.text)\n      metadata.installFail(jmmStore)\n    }\n    // 删除缓存的zip文件\n    jmmNMM.removeFile(downloadTask.filepath)\n    // 更新完需要删除旧的app版本，这里如果有保存用户数据需要一起移动过去，但是现在这里是单纯的删除\n    if (oldVersion != null && oldVersion != metadata.manifest.version) {\n      jmmNMM.removeFile(\"/data/apps/${metadata.manifest.id}-${oldVersion}\")\n      oldVersion = null\n    }\n  }\n\n  private val onceDownload = SuspendOnceWithKey(jmmNMM.getRuntimeScope())\n\n  private suspend fun watchDownloadProcess(metadata: JmmMetadata) {\n    val downloadTask = metadata.downloadTask ?: run {\n      debugJMM(\"watchDownloadProcess\", \"downloadTask is null\")\n      jmmNMM.showToast(BrowserI18nResource.toast_message_download_unzip_fail.text)\n      return\n    }\n    onceDownload.executeOnce(downloadTask.id) {\n      debugJMM(\"watchDownloadProcess\", \"key=${downloadTask.id}\")\n      var success = false\n      jmmNMM.downloadProgressFlow(downloadTask.id).collect { status ->\n        if (status.state == DownloadState.Completed) {\n          success = true\n        }\n        metadata.updateDownloadStatus(status, jmmStore)\n      }\n      if (success) {\n        decompressProcess(downloadTask, metadata)\n      }\n    }\n  }\n\n  /**\n   * 创建任务并下载，可以判断 taskId 在 download 中是否存在，如果不存在就创建，存在直接下载\n   */\n  suspend fun startDownloadTask(metadata: JmmMetadata): Unit = downloadLock.withLock {\n    val taskId = metadata.downloadTask?.id\n    if (taskId == null || !jmmNMM.existDownloadTask(taskId)) {\n      val downloadTask = with(metadata.manifest) {\n        jmmNMM.createDownloadTask(url = bundle_url, total = bundle_size)\n      }\n      metadata.initDownloadTask(downloadTask, jmmStore)\n      debugJMM(\"JmmController\", \"createAndStartDownloadTask => $metadata\")\n      /// 监听\n      watchDownloadProcess(metadata)\n      /// 开始\n      jmmNMM.startDownload(downloadTask.id).falseAlso {\n        jmmNMM.showToast(BrowserI18nResource.toast_message_download_download_fail.text)\n      }\n    } else if (metadata.state.state == JmmStatus.Downloading) {\n      jmmNMM.showToast(BrowserI18nResource.toast_message_download_downloading.text)\n    } else if (metadata.state.state.valueIn(JmmStatus.Paused) || metadata.state.state.valueIn(\n        JmmStatus.Failed\n      )\n    ) {\n      /// 监听\n      watchDownloadProcess(metadata)\n      jmmNMM.startDownload(taskId).falseAlso {\n        jmmNMM.showToast(BrowserI18nResource.toast_message_download_download_fail.text)\n      }\n    }\n  }\n\n  suspend fun pause(metadata: JmmMetadata) = metadata.downloadTask?.id?.let { taskId ->\n    val status = jmmNMM.pauseDownload(taskId)\n    metadata.updateDownloadStatus(status, jmmStore)\n  }\n\n  private suspend fun decompress(\n    task: DownloadTask,\n    jmmMetadata: JmmMetadata,\n  ): Boolean {\n    val dirName = task.url.substring(task.url.lastIndexOf(\"/\") + 1).let { zipName ->\n      zipName.substring(0, zipName.lastIndexOf(\".\"))\n    }\n    val mmid = jmmMetadata.manifest.id\n    val sourcePath = task.filepath\n\n    // 用于校验jmmApp下载文件是不是完整\n    if (!jmmAppHashVerify(jmmNMM, jmmMetadata, sourcePath)) {\n      debugJMM(\"decompress\", \"校验失败\")\n      return false\n    }\n\n    val targetPath = jmmNMM.pickFile(\"/data/apps/$dirName\")\n    val decompressRes = jmmNMM.nativeFetch(buildUrlString(\"file://zip.browser.dweb/decompress\") {\n      parameters.append(\"sourcePath\", sourcePath)\n      parameters.append(\"targetPath\", targetPath)\n    })\n    debugJMM(\"decompress\") { \"$dirName ok:${decompressRes.isOk}\" }\n    return decompressRes.isOk.trueAlso {\n      // 保存 session（记录安装时间） 和 metadata （app数据源）\n      Json.encodeToString(jmmMetadata.manifest).also { manifestJson ->\n        jmmNMM.writeFile(\n          path = \"/data/apps/$dirName/usr/sys/metadata.json\", body = IPureBody.from(manifestJson)\n        )\n        jmmNMM.writeFile(\n          path = \"/data/app-data/${mmid}/metadata.json\", body = IPureBody.from(manifestJson)\n        )\n      }\n      debugJMM(\"decompress\") { \"installTime=${jmmMetadata.installTime} installUrl:${jmmMetadata.originUrl}\" }\n      Json.encodeToString(buildJsonObject {\n        put(\"installTime\", JsonPrimitive(jmmMetadata.installTime))\n        put(\"updateTime\", JsonPrimitive(datetimeNow()))\n        put(\"installUrl\", JsonPrimitive(jmmMetadata.originUrl))\n      }).also { sessionJson ->\n        jmmNMM.writeFile(\n          path = \"/data/apps/$dirName/usr/sys/session.json\", body = IPureBody.from(sessionJson)\n        )\n        jmmNMM.writeFile(\n          path = \"/data/app-data/$mmid/session.json\", body = IPureBody.from(sessionJson)\n        )\n      }\n    }.falseAlso {\n      debugJMM(\"decompress\", \"解压失败\", \"${decompressRes.status} ${decompressRes.text()}\")\n    }\n  }\n\n  /**尝试获取app session 这个可以保证更新的时候数据不被清空*/\n  private suspend fun getAppSessionInfoCompact(mmid: MMID, version: String): SessionInfo? {\n    return getAppSessionInfo(mmid) ?: getAppSessionInfoOld(mmid, version)\n  }\n\n  /**尝试获取app session 这个可以保证更新的时候数据不被清空*/\n  private suspend fun getAppSessionInfo(mmid: MMID): SessionInfo? {\n    return jmmNMM.readFile(\"/data/app-data/${mmid}/session.json\").jsonOrNull<SessionInfo>()\n  }\n\n\n  /**尝试获取app session 这个可以保证更新的时候数据不被清空*/\n  private suspend fun getAppSessionInfoOld(mmid: MMID, version: String): SessionInfo? {\n    return jmmNMM.readFile(\"/data/apps/${mmid}-${version}/usr/sys/session.json\")\n      .jsonOrNull<SessionInfo>()\n  }\n\n\n  suspend fun removeHistoryMetadata(historyMetadata: JmmMetadata) {\n    historyMetadataMapsFlow.value -= historyMetadata.manifest.id\n    historyMetadata.downloadTask?.id?.let { taskId -> jmmNMM.removeDownload(taskId) }\n    jmmStore.deleteHistory(historyMetadata.manifest.id)\n  }\n\n  suspend fun openApp(mmid: MMID) {\n    jmmNMM.nativeFetch(buildUrlString(\"file://desk.browser.dweb/openAppOrActivate\") {\n      parameters[\"app_id\"] = mmid\n    })\n  }\n}\n\n@Serializable\ndata class SessionInfo(val installTime: Long, val updateTime: Long, val installUrl: String)\n"},{"language":"kotlin","path":"jmm/JmmDetailController.kt","content":"package org.dweb_browser.browser.jmm\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport org.dweb_browser.browser.jmm.ui.Render\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.helper.buildUrlString\nimport org.dweb_browser.helper.compose.ObservableMutableState\nimport org.dweb_browser.helper.compose.compositionChainOf\nimport org.dweb_browser.helper.isWebUrl\nimport org.dweb_browser.sys.window.core.modal.WindowBottomSheetsController\nimport org.dweb_browser.sys.window.ext.createBottomSheets\nimport org.dweb_browser.sys.window.ext.getMainWindowId\nimport org.dweb_browser.sys.window.ext.getOrOpenMainWindow\nimport org.dweb_browser.sys.window.ext.getWindow\n\ninternal val LocalShowWebViewVersion = compositionChainOf(\"ShowWebViewVersion\") {\n  mutableStateOf(false)\n}\n\ninternal val LocalJmmDetailController =\n  compositionChainOf<JmmDetailController>(\"JmmDetailController\")\n\n/**\n * JS 模块安装 的 控制器\n */\nclass JmmDetailController(\n  metadata: JmmMetadata,\n  internal val jmmNMM: JmmNMM.JmmRuntime,\n  private val jmmController: JmmController,\n) {\n  var metadata by ObservableMutableState(metadata) {}\n    internal set\n\n  private val viewDeferredFlow =\n    MutableStateFlow(CompletableDeferred<WindowBottomSheetsController>())\n  private val viewDeferred get() = viewDeferredFlow.value\n  private val getViewLock = Mutex()\n\n  @OptIn(ExperimentalCoroutinesApi::class)\n  suspend fun getBottomSheet() = getViewLock.withLock {\n    if (viewDeferred.isCompleted) {\n      val bottomSheetsModal = viewDeferred.getCompleted()\n      /// TODO 这里 onDestroy 回调可能不触发，因此需要手动进行一次判断\n      if (bottomSheetsModal.wid == jmmNMM.getMainWindowId()) {\n        return@withLock bottomSheetsModal\n      }\n      viewDeferredFlow.value = CompletableDeferred()\n    }\n    /// 创建 BottomSheets 视图，提供渲染适配\n    jmmNMM.createBottomSheets { modifier ->\n      Render(modifier, this)\n    }.also {\n      viewDeferred.complete(it)\n      jmmNMM.getWindow(it.wid).hide()\n      it.onDestroy {\n        viewDeferredFlow.value = CompletableDeferred()\n      }\n    }\n  }\n\n  suspend fun openBottomSheet() {\n    /// 显示抽屉\n    val bottomSheets = getBottomSheet()\n    bottomSheets.open()\n  }\n\n  /**安装完成后打开app*/\n  suspend fun openApp() {\n    closeBottomSheet() // 打开应用之前，需要关闭当前安装界面，否则在原生窗口的层级切换会出现问题\n    // jmmNMM.bootstrapContext.dns.open(installMetadata.metadata.id)\n    jmmController.openApp(metadata.manifest.id)\n  }\n\n  suspend fun openHomePage() {\n    closeBottomSheet()\n    val homepageUrl = metadata.referrerUrl ?: metadata.manifest.homepage_url\n    if (homepageUrl?.isWebUrl() == true) {\n      jmmNMM.nativeFetch(buildUrlString(\"file://web.browser.dweb/openinbrowser\") {\n        parameters[\"url\"] = homepageUrl\n      })\n    }\n  }\n\n  suspend fun openReferrerPage() {\n    closeBottomSheet()\n    val referrerUrl = metadata.referrerUrl ?: metadata.manifest.homepage_url\n    if (referrerUrl?.isWebUrl() == true) {\n      jmmNMM.nativeFetch(buildUrlString(\"file://web.browser.dweb/openinbrowser\") {\n        parameters[\"url\"] = referrerUrl\n      })\n    }\n  }\n\n  // 关闭原来的app\n  suspend fun closeApp() {\n    jmmNMM.bootstrapContext.dns.close(metadata.manifest.id)\n  }\n\n  /**\n   * 创建任务，如果存在则恢复\n   */\n  suspend fun createAndStartDownload() {\n    jmmController.startDownloadTask(metadata)\n  }\n\n  suspend fun startDownload() = jmmController.startDownloadTask(metadata)\n\n  suspend fun pause() = jmmController.pause(metadata)\n\n\n  val canCloseBottomSheet get() = viewDeferred.isCompleted\n\n  @Composable\n  fun CanCloseBottomSheet() = viewDeferredFlow.collectAsState().value.isCompleted\n\n  suspend fun closeBottomSheet() {\n    if (canCloseBottomSheet) {\n      jmmNMM.getOrOpenMainWindow().closeRoot()\n    }\n  }\n}"},{"language":"kotlin","path":"jmm/JmmI18n.kt","content":"package org.dweb_browser.browser.jmm\n\nimport org.dweb_browser.helper.compose.I18n\n\nobject JmmI18n : I18n() {\n  val uninstall_alert_title = zh(\"确定要卸载应用？\", \"Confirm to uninstall?\")\n  val confirm_uninstall = zh(\"卸载\", \"Uninstall\")\n  val prepare_install = zh(\"正在检查应用信息\", \"Preparing to install\")\n  val prepare_install_ready = zh(\"应用信息准备完毕\", \"Ready for installation\")\n  val prepare_install_fail = zh(\"应用信息异常\", \"Installation unavailable\")\n}"},{"language":"kotlin","path":"jmm/JmmI18nResource.kt","content":"package org.dweb_browser.browser.jmm\n\nimport org.dweb_browser.helper.compose.Language\nimport org.dweb_browser.helper.compose.SimpleI18nResource\n\nobject JmmI18nResource {\n  val top_bar_title_install =\n    SimpleI18nResource(Language.ZH to \"应用列表\", Language.EN to \"Application Manage\")\n  val no_select_detail = SimpleI18nResource(\n    Language.ZH to \"未选择要展示的详情\",\n    Language.EN to \"select item to show details\",\n  )\n\n  val tab_detail = SimpleI18nResource(Language.ZH to \"详情\", Language.EN to \"Detail\")\n  val tab_intro = SimpleI18nResource(Language.ZH to \"介绍\", Language.EN to \"Introduction\")\n  val tab_param = SimpleI18nResource(Language.ZH to \"参数\", Language.EN to \"Parameter\")\n\n  val short_name = SimpleI18nResource(Language.ZH to \"安装管理\", Language.EN to \"Install Manager\")\n  val history_tab_installed =\n    SimpleI18nResource(Language.ZH to \"已安装\", Language.EN to \"Installed\")\n  val history_tab_uninstalled =\n    SimpleI18nResource(Language.ZH to \"未安装\", Language.EN to \"No Install\")\n  val install_mmid = SimpleI18nResource(Language.ZH to \"唯一标识\", Language.EN to \"id\")\n  val install_version = SimpleI18nResource(Language.ZH to \"版本\", Language.EN to \"version\")\n  val install_introduction =\n    SimpleI18nResource(Language.ZH to \"应用介绍\", Language.EN to \"Introduction\")\n  val install_update_log =\n    SimpleI18nResource(Language.ZH to \"更新日志\", Language.EN to \"Update Log\")\n  val install_info = SimpleI18nResource(Language.ZH to \"信息\", Language.EN to \"Info\")\n  val install_info_dev =\n    SimpleI18nResource(Language.ZH to \"开发者\", Language.EN to \"Developer\")\n  val install_info_size = SimpleI18nResource(Language.ZH to \"应用大小\", Language.EN to \"App Size\")\n  val install_info_type = SimpleI18nResource(Language.ZH to \"类别\", Language.EN to \"Type\")\n  val install_info_language =\n    SimpleI18nResource(Language.ZH to \"语言\", Language.EN to \"Language\")\n  val install_info_age = SimpleI18nResource(Language.ZH to \"年龄\", Language.EN to \"Age\")\n  val install_info_copyright =\n    SimpleI18nResource(Language.ZH to \"版权\", Language.EN to \"CopyRight\")\n  val install_info_homepage =\n    SimpleI18nResource(Language.ZH to \"应用主页\", Language.EN to \"Home Page\")\n  val history_details = SimpleI18nResource(Language.ZH to \"详情\", Language.EN to \"Details\")\n  val uninstall =\n    SimpleI18nResource(Language.ZH to \"卸载\", Language.EN to \"Uninstall\")\n  val remove_record =\n    SimpleI18nResource(Language.ZH to \"删除记录\", Language.EN to \"Delete Record\")\n  val url_invalid =\n    SimpleI18nResource(\n      Language.ZH to \"网址已失效，请前往官网进行安装！\",\n      Language.EN to \"The website is no longer valid, please go to the official website to install!\"\n    )\n}"},{"language":"kotlin","path":"jmm/JmmNMM.kt","content":"package org.dweb_browser.browser.jmm\n\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.rounded.CheckCircle\nimport androidx.compose.material.icons.rounded.ErrorOutline\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.Icon\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport kotlinx.coroutines.delay\nimport okio.FileSystem\nimport okio.Path\nimport org.dweb_browser.browser.desk.ext.endActivity\nimport org.dweb_browser.browser.desk.ext.requestActivity\nimport org.dweb_browser.browser.desk.ext.updateActivity\nimport org.dweb_browser.browser.desk.model.ActivityItem\nimport org.dweb_browser.core.help.types.IMicroModuleManifest\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.http.router.bindDwebDeeplink\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.file.VirtualFsDirectory\nimport org.dweb_browser.core.std.file.ext.realPath\nimport org.dweb_browser.core.std.file.fileTypeAdapterManager\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.helper.Debugger\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.animation.fadeInOut\nimport org.dweb_browser.helper.compose.animation.headShake\nimport org.dweb_browser.helper.compose.animation.scaleInOut\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.helper.platform.theme.LocalColorful\nimport org.dweb_browser.helper.removeInvisibleChars\nimport org.dweb_browser.helper.removeWhen\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.io.SystemFileSystem\nimport org.dweb_browser.sys.window.core.helper.setStateFromManifest\nimport org.dweb_browser.sys.window.ext.getMainWindow\nimport org.dweb_browser.sys.window.ext.onRenderer\nimport org.dweb_browser.sys.window.ext.openMainWindow\n\nval debugJMM = Debugger(\"JMM\")\n\nclass JmmNMM : NativeMicroModule(\"jmm.browser.dweb\", \"Js MicroModule Service\") {\n  companion object {\n    init {\n      IDWebView.Companion.brands.add(\n        IDWebView.UserAgentBrandData(\n          \"jmm.browser.dweb\",\n          \"${JsMicroModule.VERSION}\",\n          \"${JsMicroModule.VERSION}.${JsMicroModule.PATCH}\"\n        )\n      )\n    }\n  }\n\n  init {\n    name = JmmI18nResource.short_name.text\n    short_name = JmmI18nResource.short_name.text\n    categories = listOf(\n      MICRO_MODULE_CATEGORY.Application,\n      MICRO_MODULE_CATEGORY.Service,\n      MICRO_MODULE_CATEGORY.Hub_Service\n    )\n    icons = listOf(\n      ImageResource(\n        src = \"file:///sys/browser-icons/jmm.browser.dweb.svg\",\n        type = \"image/svg+xml\",\n        // purpose = \"monochrome\"\n      )\n    )\n    dweb_deeplinks = listOf(\"dweb://install\")\n  }\n\n  inner class JmmRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n\n    override suspend fun _bootstrap() {\n      val store = JmmStore(this)\n      loadJmmAppList(store) // 加载安装的应用信息\n\n      val jmmController = JmmController(this, store)\n      jmmController.loadHistoryMetadataUrl() // 加载之前加载过的应用\n\n      val routeInstallHandler = defineEmptyResponse {\n        val metadataUrl = request.query(\"url\").removeInvisibleChars().trim()\n        val activityId = requestActivity(\n          trailingIcon = ActivityItem.ComposeIcon { modifier ->\n            CircularProgressIndicator(modifier)\n          },\n          centerTitle = ActivityItem.TextContent(JmmI18n.prepare_install.text),\n        )\n        val referrerUrl = request.headers.getOrNull(\"referrer\")\n\n        debugJMM(\"fetchJmmMetadata\", metadataUrl)\n        // 加载url资源，这一步可能要多一些时间\n        val jmmMetadata = runCatching {\n          jmmController.fetchJmmMetadata(metadataUrl, referrerUrl).also {\n            /// 成功\n            scopeLaunch(cancelable = false) {\n              updateActivity(\n                activityId,\n                trailingIcon = ActivityItem.ComposeIcon { modifier ->\n                  var playIn by remember { mutableStateOf(true) }\n                  Icon(\n                    Icons.Rounded.CheckCircle,\n                    null,\n                    modifier = modifier.scaleInOut(playIn) { playIn = false }.fadeInOut(playIn) {},\n                    tint = LocalColorful.current.Green.current\n                  )\n                },\n                centerTitle = ActivityItem.TextContent(JmmI18n.prepare_install_ready.text),\n              )\n              delay(1000)\n              endActivity(activityId)\n            }\n          }\n        }.getOrElse {\n          scopeLaunch(cancelable = false) {\n            /// 失败\n            updateActivity(\n              activityId,\n              trailingIcon = ActivityItem.ComposeIcon { modifier ->\n                var playHeadShake by remember { mutableStateOf(true) }\n                Icon(\n                  Icons.Rounded.ErrorOutline,\n                  null,\n                  modifier = modifier.headShake(playHeadShake) { playHeadShake = false },\n                  tint = LocalColorful.current.Red.current\n                )\n              },\n              centerTitle = ActivityItem.TextContent(JmmI18n.prepare_install_fail.text),\n            )\n            delay(2000)\n            endActivity(activityId)\n          }\n          throw it\n        }\n\n        jmmController.openInstallerView(jmmMetadata)\n      }\n\n      /// 提供JsMicroModule的文件适配器\n      /// file:///usr/*\n      val appsDir = realPath(\"/data/apps\")\n      val usr = object : VirtualFsDirectory {\n        override fun isMatch(firstSegment: String) = firstSegment == \"usr\"\n        override val fs: FileSystem = SystemFileSystem\n        override fun resolveTo(remote: IMicroModuleManifest, virtualFullPath: Path) =\n          appsDir.resolve(\"${remote.mmid}-${remote.version}${virtualFullPath}\")\n      }\n      fileTypeAdapterManager.append(adapter = usr).removeWhen(mmScope)\n\n      /// 服务\n      routes(\n        // 安装\n        \"install\" bindDwebDeeplink routeInstallHandler,\n        \"/install\" bind PureMethod.GET by routeInstallHandler,\n        \"/uninstall\" bind PureMethod.GET by defineBooleanResponse {\n          val mmid = request.query(\"app_id\")\n          debugJMM(\"uninstall\", \"mmid=$mmid\")\n          jmmController.uninstall(mmid)\n        },\n        // app详情\n        \"/detail\" bind PureMethod.GET by defineBooleanResponse {\n          val mmid = request.query(\"app_id\")\n          debugJMM(\"detailApp\", mmid)\n          val info = store.getApp(mmid) ?: return@defineBooleanResponse false\n          jmmController.openDetailView(info.jmmMetadata)\n          openMainWindow()\n          true\n        },\n        // 是否有安装\n        \"/isInstalled\" bind PureMethod.GET by defineBooleanResponse {\n          val mmid = request.query(\"app_id\")\n          debugJMM(\"isInstalled\", mmid)\n          store.getApp(mmid) != null\n        },\n\n        ).cors()\n\n      onRenderer {\n        getMainWindow().apply {\n          setStateFromManifest(manifest)\n          state.keepBackground = true/// 保持在后台运行\n          jmmController.openHistoryView(this)\n        }\n      }\n    }\n\n    /**\n     * 从磁盘中恢复应用\n     */\n    private suspend fun loadJmmAppList(store: JmmStore) {\n      val apps = store.getAllApps().values\n\n      // 如果发现没有应用，那么强制启用数据隔离\n      when {\n        apps.isEmpty() -> envSwitch.enable(ENV_SWITCH_KEY.DWEBVIEW_PROFILE)\n        else -> for (dbItem in apps) {\n          bootstrapContext.dns.install(JsMicroModule(dbItem.installManifest))\n        }\n      }\n    }\n\n    override suspend fun _shutdown() {\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = JmmRuntime(bootstrapContext)\n}\n"},{"language":"kotlin","path":"jmm/JmmRenderController.kt","content":"package org.dweb_browser.browser.jmm\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport org.dweb_browser.browser.jmm.ui.Render\nimport org.dweb_browser.sys.window.core.WindowController\nimport org.dweb_browser.sys.window.core.windowAdapterManager\nimport org.dweb_browser.sys.window.ext.getMainWindow\n\n/**\n * JS 模块安装 的 控制器\n */\nclass JmmRenderController(\n  internal val jmmNMM: JmmNMM.JmmRuntime, private val jmmController: JmmController,\n) {\n  @Composable\n  fun historyMetadataMap() = jmmController.historyMetadataMapsFlow.collectAsState()\n\n  suspend fun hideView() {\n    jmmNMM.getMainWindow().hide()\n  }\n\n  /**打开jmm下载历史视图*/\n  suspend fun showView(win: WindowController) {\n    windowAdapterManager.provideRender(win.id) { modifier ->\n      Render(modifier = modifier, windowRenderScope = this)\n    }\n    win.show()\n  }\n\n  var outerHistoryJmmMetadata by mutableStateOf<JmmMetadata?>(null)\n\n  fun openDetail(historyMetadata: JmmMetadata) {\n    outerHistoryJmmMetadata = historyMetadata\n  }\n\n  // 获取Jmm详情控制器，渲染详情页\n  fun getJmmDetailController(historyMetadata: JmmMetadata) = jmmController.getInstallerController(historyMetadata)\n\n  /// 卸载app\n  fun unInstall(historyMetadata: JmmMetadata) {\n    jmmNMM.scopeLaunch(cancelable = false) {\n      jmmController.uninstall(historyMetadata.manifest.id)\n    }\n  }\n\n  fun removeHistoryMetadata(historyMetadata: JmmMetadata) {\n    jmmNMM.scopeLaunch(cancelable = false) {\n      jmmController.removeHistoryMetadata(historyMetadata)\n    }\n  }\n}"},{"language":"kotlin","path":"jmm/JmmStore.kt","content":"package org.dweb_browser.browser.jmm\n\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.DeleteForever\nimport androidx.compose.material.icons.filled.InstallMobile\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.download.model.DownloadStateEvent\nimport org.dweb_browser.browser.download.model.DownloadTask\nimport org.dweb_browser.core.help.types.JmmAppInstallManifest\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.file.ext.createStore\nimport org.dweb_browser.helper.compose.ObservableMutableState\nimport org.dweb_browser.helper.compose.SimpleI18nResource\nimport org.dweb_browser.helper.datetimeNow\n\n@Serializable\ndata class JsMicroModuleDBItem(\n  val installManifest: JmmAppInstallManifest,\n  val originUrl: String,\n  val referrerUrl: String? = null,\n) {\n  val jmmMetadata by lazy {\n    installManifest.createJmmMetadata(originUrl, referrerUrl, JmmStatus.INSTALLED)\n  }\n}\n\nclass JmmStore(microModule: MicroModule.Runtime) {\n  private val storeApp = microModule.createStore(\"jmm_apps\", false)\n  private val storeHistory = microModule.createStore(\"history_metadata\", false)\n\n  suspend fun getOrPutApp(key: MMID, value: JsMicroModuleDBItem): JsMicroModuleDBItem {\n    return storeApp.getOrPut(key) { value }\n  }\n\n  suspend fun getApp(key: MMID): JsMicroModuleDBItem? {\n    return storeApp.getOrNull(key)\n  }\n\n  suspend fun getAllApps(): MutableMap<MMID, JsMicroModuleDBItem> {\n    return storeApp.getAll()\n  }\n\n  suspend fun setApp(key: MMID, value: JsMicroModuleDBItem) {\n    storeApp.set(key, value)\n  }\n\n  suspend fun deleteApp(key: MMID): Boolean {\n    return storeApp.delete(key)\n  }\n\n  /*****************************************************************************\n   * JMM对应的json地址存储，以及下载的 taskId 信息\n   */\n  suspend fun saveHistory(mmid: String, metadata: JmmMetadata) {\n    storeHistory.set(mmid, metadata)\n  }\n\n  suspend fun getAllHistory(): Map<String, JmmMetadata> {\n    return storeHistory.getAll()\n  }\n\n  suspend fun getHistory(mmid: String): String? {\n    return storeHistory.getOrNull<String>(mmid)\n  }\n\n  suspend fun deleteHistory(mmid: String): Boolean {\n    return storeHistory.delete(mmid)\n  }\n\n  suspend fun clearHistory() = storeHistory.clear()\n}\n\n/**\n * 用于存储安装历史记录\n */\n@Serializable\ndata class JmmMetadata(\n  val originUrl: String,\n  val referrerUrl: String? = null,\n  @SerialName(\"metadata\") @Deprecated(\"use manifest alternative\") private val _oldMetadata: JmmAppInstallManifest? = null,\n  /**\n   * 目前兼容模式，使用 Nullable，未来这个字段不可空\n   */\n  @SerialName(\"manifest\") private var _manifest: JmmAppInstallManifest? = null,\n  var downloadTask: DownloadTask? = null, // 用于保存下载任务，下载完成置空\n  @SerialName(\"state\") private var _state: JmmStatusEvent = JmmStatusEvent(), // 用于显示下载状态\n  var installTime: Long = datetimeNow(), // 表示安装应用的时间\n  var upgradeTime: Long = datetimeNow(),\n) {\n  init {\n    @Suppress(\"DEPRECATION\") if (_oldMetadata != null) {\n      _manifest = _oldMetadata\n    }\n  }\n\n  var state by ObservableMutableState(_state) { _state = it }\n  var manifest by ObservableMutableState(_manifest!!) { _manifest = it }\n  suspend fun initDownloadTask(downloadTask: DownloadTask, store: JmmStore) {\n    this.downloadTask = downloadTask\n    updateDownloadStatus(downloadTask.status, store)\n  }\n\n  suspend fun updateDownloadStatus(\n    status: DownloadStateEvent,\n    store: JmmStore,\n    saveMetadata: Boolean = true,\n  ) {\n    val newStatus = JmmStatusEvent(\n      current = status.current, total = status.total, state = when (status.state) {\n        DownloadState.Init -> JmmStatus.Init\n        DownloadState.Downloading -> JmmStatus.Downloading\n        DownloadState.Paused -> JmmStatus.Paused\n        DownloadState.Failed -> JmmStatus.Failed\n        DownloadState.Canceled -> JmmStatus.Canceled\n        DownloadState.Completed -> JmmStatus.Completed\n      }\n    )\n    if (newStatus != state) { // 只要前后不一样，就进行保存，否则不保存，主要为了防止downloading频繁保存\n      state = newStatus\n      if (saveMetadata) {\n        store.saveHistory(this.manifest.id, this@JmmMetadata)\n      }\n    }\n  }\n\n  suspend fun initState(store: JmmStore) {\n    state = state.copy(state = JmmStatus.Init)\n    store.saveHistory(this.manifest.id, this@JmmMetadata)\n  }\n\n  suspend fun installComplete(store: JmmStore) {\n    debugJMM(\"installComplete\")\n    state = state.copy(state = JmmStatus.INSTALLED)\n    store.saveHistory(this.manifest.id, this)\n    store.setApp(manifest.id, JsMicroModuleDBItem(manifest, originUrl, referrerUrl))\n  }\n\n  suspend fun installFail(store: JmmStore) {\n    debugJMM(\"installFail\")\n    state = state.copy(state = JmmStatus.Failed)\n    store.saveHistory(this.manifest.id, this)\n  }\n}\n\n@Serializable\ndata class JmmStatusEvent(\n  val current: Long = 0,\n  val total: Long = 1,\n  val state: JmmStatus = JmmStatus.Init,\n) {\n  val progress by lazy {\n    when (total) {\n      0L -> .0f\n      else -> current.toFloat() / total.toFloat()\n    }\n  }\n}\n\nfun JmmAppInstallManifest.createJmmMetadata(\n  originUrl: String,\n  referrerUrl: String?,\n  state: JmmStatus,\n  installTime: Long = datetimeNow(),\n\n  ) = JmmMetadata(\n  originUrl = originUrl,\n  referrerUrl = referrerUrl,\n  _manifest = this,\n  _state = JmmStatusEvent(total = this.bundle_size, state = state),\n  installTime = installTime\n)\n\n@Serializable\nenum class JmmStatus {\n  /** 初始化中，做下载前的准备，包括寻址、创建文件、保存任务等工作 */\n  Init,\n\n  /** 下载中 */\n  Downloading,\n\n  /** 暂停下载 */\n  Paused,\n\n  /** 取消下载 */\n  Canceled,\n\n  /** 下载失败 */\n  Failed,\n\n  /** 下载完成 */\n  Completed,\n\n  /** 安装中 */\n  INSTALLED,\n\n  /** 新版本 */\n  NewVersion,\n\n  /** 版本偏低 */\n  VersionLow;\n}\n\nenum class JmmTabs(\n  val index: Int,\n  val title: SimpleI18nResource,\n  val vector: ImageVector,\n  val listFilter: (Iterable<JmmMetadata>) -> List<JmmMetadata>,\n) {\n  Installed(\n    index = 1,\n    title = JmmI18nResource.history_tab_installed,\n    vector = Icons.Default.InstallMobile,\n    listFilter = { list ->\n      list.filter { it.state.state == JmmStatus.INSTALLED }.sortedBy { it.installTime }\n    },\n  ),\n  NoInstall(\n    index = 0,\n    title = JmmI18nResource.history_tab_uninstalled,\n    vector = Icons.Default.DeleteForever,\n    listFilter = { list ->\n      list.filter { it.state.state != JmmStatus.INSTALLED }.sortedBy { it.upgradeTime }\n    },\n  ),\n  ;\n}"},{"language":"kotlin","path":"jmm/JsMicroModule.kt","content":"package org.dweb_browser.browser.jmm\n\nimport io.ktor.http.HttpStatusCode\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.jsProcess.ext.JsProcess\nimport org.dweb_browser.browser.jsProcess.ext.createJsProcess\nimport org.dweb_browser.browser.kit.GlobalWebMessageEndpoint\nimport org.dweb_browser.core.help.types.CommonAppManifest\nimport org.dweb_browser.core.help.types.IpcSupportProtocols\nimport org.dweb_browser.core.help.types.JmmAppInstallManifest\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.core.help.types.MicroModuleManifest\nimport org.dweb_browser.core.http.router.HttpHandlerToolkit\nimport org.dweb_browser.core.http.router.bindPrefix\nimport org.dweb_browser.core.ipc.Ipc\nimport org.dweb_browser.core.ipc.helper.IpcEvent\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.module.connectAdapterManager\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.core.std.dns.nativeFetchAdaptersManager\nimport org.dweb_browser.core.std.permission.PermissionProvider\nimport org.dweb_browser.core.std.permission.ext.doRequestWithPermissions\nimport org.dweb_browser.helper.Debugger\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.printError\nimport org.dweb_browser.pure.http.PureClientRequest\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.PureRequest\nimport org.dweb_browser.pure.http.PureResponse\nimport org.dweb_browser.pure.http.PureStringBody\nimport org.dweb_browser.sys.toast.ext.showToast\n\nval debugJsMM = Debugger(\"JsMM\")\n\nopen class JsMicroModule(val metadata: JmmAppInstallManifest) :\n  MicroModule(MicroModuleManifest().apply {\n    assign(metadata)\n    categories += MICRO_MODULE_CATEGORY.Application\n    icons.ifEmpty {\n      icons = listOf(ImageResource(src = metadata.logo))\n    }\n    mmid = metadata.id\n    ipc_support_protocols = IpcSupportProtocols(\n      cbor = true, protobuf = false, json = true\n    )\n    targetType = \"jmm\"\n  }) {\n  override fun toString(): String {\n    return \"JMM($mmid)\"\n  }\n\n  companion object {\n    /**\n     * 当前JsMicroModule的版本\n     */\n    const val VERSION = 3\n    const val PATCH = 2\n\n    init {\n      val nativeToWhiteList =\n        listOf<MMID>(\"js.browser.dweb\", \"file.std.dweb\", \"permission.sys.dweb\")\n\n      data class MmDirection(\n        val startMm: MicroModule,\n        val endJmm: JsMicroModule.JmmRuntime,\n      )\n      // jsMM对外创建ipc的适配器，给DnsNMM的connectMicroModules使用\n      connectAdapterManager.append(1) { fromMM, toMM, reason ->\n        val jsMM = if (nativeToWhiteList.contains(toMM.mmid)) null\n        /// 这里优先判断 toMM 是否是 endJmm\n        else if (toMM is JsMicroModule.JmmRuntime) MmDirection(fromMM, toMM)\n        else if (fromMM is JsMicroModule) MmDirection(toMM.microModule, fromMM.runtime)\n        else null\n\n        jsMM?.let {\n          debugJsMM(\"JsMM/connectAdapter\") {\n            \"fromMM:${fromMM.mmid} => toMM:${toMM.mmid} ==> jsMM:$jsMM\"\n          }\n          /**\n           * 与 NMM 相比，这里会比较难理解：\n           * 因为这里是直接创建一个 Native2JsIpc 作为 ipcForFromMM，\n           * 而实际上的 ipcForToMM ，是在 js-context 里头去创建的，因此在这里是 一个假的存在\n           *\n           * 也就是说。如果是 jsMM 内部自己去执行一个 connect，那么这里返回的 ipcForFromMM，其实还是通往 js-context 的， 而不是通往 toMM的。\n           * 也就是说，能跟 toMM 通讯的只有 js-context，这里无法通讯。\n           */\n          val toJmmIpc = jsMM.endJmm.ipcBridge(jsMM.startMm) //(tip:创建到worker内部的桥接)\n          toMM.beConnect(toJmmIpc, reason)\n          toJmmIpc\n        }\n      }\n\n      nativeFetchAdaptersManager.append(order = 1) { fromMM, request ->\n        if (fromMM is JmmRuntime && request.href.startsWith(\"dweb:\")) {\n          val toMM =\n            fromMM.bootstrapContext.dns.queryDeeplink(request.href) ?: return@append PureResponse(\n              HttpStatusCode.BadGateway, body = PureStringBody(request.href)\n            )\n\n          if (!nativeToWhiteList.contains(toMM.mmid)) {\n            val fromIpc = fromMM.getJsProcess().fetchIpc\n            fromMM.debugMM(\"proxy-deeplink\") { \"${fromMM.mmid} => ${request.href}\" }\n            fromMM.doRequestWithPermissions { fromIpc.request(request) }\n          } else null\n        } else null\n      }\n      nativeFetchAdaptersManager.append(order = 1.1f) { fromMM, request ->\n        if (fromMM is JmmRuntime && request.url.protocol.name == \"file\" && request.url.host.endsWith(\n            \".dweb\"\n          )\n        ) {\n          val mpid = request.url.host\n          val mmid = fromMM.bootstrapContext.dns.query(mpid)?.mmid ?: return@append null\n          if (!nativeToWhiteList.contains(mmid)) {\n            val fromIpc = fromMM.getJsProcess().fetchIpc\n            fromMM.debugMM(\"roxy-request\") { \"${fromMM.mmid} => ${request.href}\" }\n            fromMM.doRequestWithPermissions { fromIpc.request(request) }\n            null\n          } else null\n        } else null\n      }\n    }\n  }\n\n  override suspend fun getSafeDwebPermissionProviders() =\n    this.dweb_permissions.mapNotNull { PermissionProvider.from(this, it, metadata.bundle_url) }\n\n  open inner class JmmRuntime(override val bootstrapContext: BootstrapContext) : Runtime() {\n    private val jsProcessDeferred = CompletableDeferred<JsProcess>()\n    suspend fun getJsProcess() = jsProcessDeferred.await()\n\n    open val esmLoader: HttpHandlerToolkit.() -> Unit = {\n      val serverRoot = metadata.server.root.trimEnd('/')\n      \"/\" bindPrefix PureMethod.GET by definePureResponse {\n        // 将多个 '/' 转为单个\n        val url = \"file://\" + (serverRoot + request.url.encodedPath).replace(Regex(\"/{2,}\"), \"/\")\n        debugMM(\"esmLoader\", url)\n        nativeFetch(url)\n      }\n    }\n\n    override suspend fun _bootstrap() {\n      scopeLaunch(cancelable = false) {\n        startJsProcess()\n      }\n    }\n\n    private suspend fun startJsProcess() {\n      debugJsMM(\"bootstrap...\") {\n        \"$mmid/ minTarget:${metadata.minTarget} maxTarget:${metadata.maxTarget}\"\n      }\n      val errorMessage = metadata.canSupportTarget(VERSION, disMatchMinTarget = {\n        BrowserI18nResource.JsMM.canNotSupportMinTarget\n      }, disMatchMaxTarget = {\n        BrowserI18nResource.JsMM.canNotSupportMaxTarget\n      })\n      errorMessage?.also { i18nMsg ->\n        scopeLaunch(cancelable = true) {\n          showToast(i18nMsg.text {\n            appId = mmid\n            currentVersion = VERSION\n            minTarget = metadata.minTarget\n            maxTarget = metadata.maxTarget ?: metadata.minTarget\n          })\n        }\n      }\n      val jsProcess = createJsProcess(metadata.server.entry, \"$mmid-$short_name\")\n      jsProcessDeferred.complete(jsProcess)\n      jsProcess.defineEsm(esmLoader)\n      // 监听关闭事件\n      jsProcess.fetchIpc.onClosed {\n        tryShutdown()\n      }\n\n      fun proxyIpcTunnel(remoteMmid: MMID, key: String) = scopeLaunch(cancelable = true) {\n        val conIpc = connect(remoteMmid)\n        conIpc.start(await = false)\n        val proxyIpc = jsProcess.fetchIpc.fork(remote = conIpc.remote)\n        proxyIpc.start(await = false)\n        conIpc.onEvent(\"$key~(event)~>proxy\").collectIn(mmScope) { msgEvent ->\n          proxyIpc.postMessage(msgEvent.consume())\n        }\n        proxyIpc.onEvent(\"proxy~(event)~>$key\").collectIn(mmScope) { msgEvent ->\n          conIpc.postMessage(msgEvent.consume())\n        }\n        conIpc.onRequest(\"$key~(request)~>proxy\").collectIn(mmScope) { msgEvent ->\n          val request = msgEvent.consume()\n          val response = proxyIpc.request(request.toPure().toClient())\n          proxyIpc.postResponse(request.reqId, response)\n        }\n        proxyIpc.onRequest(\"proxy~(request)~>$key\").collectIn(mmScope) { msgEvent ->\n          val request = msgEvent.consume()\n          val response = conIpc.request(request.toPure().toClient())\n          proxyIpc.postResponse(request.reqId, response)\n        }\n        /// 将pid发送给js\n        jsProcess.fetchIpc.postMessage(IpcEvent.fromUtf8(\"$key-ipc-pid\", proxyIpc.pid.toString()))\n      }\n      /// 提供file.std.dweb的绑定\n      proxyIpcTunnel(\"file.std.dweb\", \"file\")\n      proxyIpcTunnel(\"permission.sys.dweb\", \"permission\")\n      /**\n       * 收到 Worker 的事件，如果是指令，执行一些特定的操作\n       */\n      jsProcess.fetchIpc.onEvent(\"fetch-ipc-proxy-event\").collectIn(mmScope) { event ->\n        event.consumeFilter { ipcEvent ->\n          /**\n           * 收到要与其它模块进行ipc连接的指令\n           */\n          when (ipcEvent.name) {\n            \"dns/connect\" -> {\n              val connectMmid = ipcEvent.text\n              debugMM(\"dns/connect\", connectMmid)\n              try {\n                /**\n                 * 模块之间的ipc是单例模式，所以我们必须拿到这个单例，再去做消息转发\n                 * 但可以优化的点在于：TODO 我们应该将两个连接的协议进行交集，得到最小通讯协议，然后两个通道就能直接通讯raw数据，而不需要在转发的时候再进行一次编码解码\n                 *\n                 * 此外这里允许js多次建立ipc连接，因为可能存在多个js线程，它们是共享这个单例ipc的\n                 *\n                 * 向目标模块发起连接，注意，这里是很特殊的，因为我们自定义了 JMM 的连接适配器 connectAdapterManager，\n                 * 所以 JsMicroModule 这里作为一个中间模块，是没法直接跟其它模块通讯的。\n                 *\n                 * TODO 如果有必要，未来需要让 connect 函数支持 force 操作，支持多次连接。\n                 */\n                val targetIpc = connect(\n                  connectMmid,\n                  // 如果对方是 jmm，会认得这个reason，它就不会做 beConnect\n                  // 而自己也是jmm，所以自己也不会执行 beConnect\n                  PureClientRequest(\"file://$connectMmid/jmm/dns/connect\", method = PureMethod.GET),\n                ) // 由上面的适配器产生\n                /// 只要不是我们自己创建的直接连接的通道，就需要我们去 创造直连并进行桥接\n                val resultMmid: MMID\n                if (targetIpc.locale.mmid == mmid) {\n                  resultMmid = targetIpc.remote.mmid\n                  when (val globalEndpoint = targetIpc.endpoint) {\n                    is GlobalWebMessageEndpoint -> {\n                      // 如果是jsMM相互连接，直接把port丢过去\n                      jsProcess.bridgeIpc(globalEndpoint.globalId, targetIpc.remote)\n                    }\n\n                    else -> {\n                      // 发现自己还是需要做 beConnect，但是这句代码目前不可能走进来。\n                      beConnect(targetIpc, null)\n                    }\n                  }\n                } else {\n                  resultMmid = targetIpc.locale.mmid\n                  // 发现自己还是需要做 beConnect\n                  beConnect(targetIpc, null)\n                }\n\n                /**\n                 * connectMmid 可能是子协议，所以result提供真正的mmid\n                 *\n                 * 连接成功，正式告知它数据返回。注意，create-ipc虽然也会resolve任务，但是我们还是需要一个明确的done事件，来确保逻辑闭环\n                 * 否则如果遇到ipc重用，create-ipc是不会触发的\n                 */\n                @Serializable\n                data class DnsConnectDone(val connect: MMID, val result: MMID)\n\n                val done = DnsConnectDone(connect = connectMmid, result = resultMmid)\n                jsProcess.fetchIpc.postMessage(\n                  IpcEvent.fromUtf8(\n                    \"dns/connect/done\", Json.encodeToString(done)\n                  )\n                )\n              } catch (e: Exception) {\n                printError(\"dns/connect\", null, e)\n                @Serializable\n                data class DnsConnectError(val connect: MMID, val reason: String)\n\n                val error = DnsConnectError(\n                  connect = connectMmid,\n                  reason = e.message ?: \"unknown error reason to connect $connectMmid\"\n                )\n                jsProcess.fetchIpc.postMessage(\n                  IpcEvent.fromUtf8(\n                    \"dns/connect/error\", Json.encodeToString(error)\n                  )\n                )\n              }\n              true\n            }\n\n            else -> false\n          }\n        }\n      }\n    }\n\n    @OptIn(ExperimentalCoroutinesApi::class)\n    override suspend fun connect(remoteMmid: MMID, reason: PureRequest?): Ipc {\n      val ipc = super.connect(remoteMmid, reason)\n      if (reason?.url?.encodedPath == \"/jmm/dns/connect\") {// && reason.url.host == mmid\n        connectionMap[remoteMmid]?.also {\n          if (it.isCompleted && it.getCompleted() == ipc) {\n            connectionMap.remove(remoteMmid, it)\n          }\n        }\n      }\n      return ipc\n    }\n\n    override suspend fun beConnect(ipc: Ipc, reason: PureRequest?) {\n      if (reason?.url?.encodedPath == \"/jmm/dns/connect\") {// && reason.url.host == mmid\n        return\n      }\n      super.beConnect(ipc, reason)\n    }\n\n    internal suspend fun ipcBridge(fromMM: MicroModule) = getJsProcess().createIpc(fromMM.manifest)\n\n    override suspend fun _shutdown() {\n      debugJsMM(\"shutdown $mmid\") {}\n      val jsProcess = getJsProcess()\n      jsProcess.codeIpc.close()\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = JmmRuntime(bootstrapContext)\n\n  override val runtime get() = super.runtime as JmmRuntime\n\n  override fun toManifest(): CommonAppManifest {\n    return this.metadata.toCommonAppManifest()\n  }\n}"},{"language":"kotlin","path":"jsProcess/JsProcessNMM.kt","content":"package org.dweb_browser.browser.jsProcess\n\nimport io.ktor.http.HttpStatusCode\nimport io.ktor.http.fullPath\nimport kotlinx.coroutines.async\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.jmm.JsMicroModule\nimport org.dweb_browser.browser.kit.GlobalWebMessageEndpoint\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.router.ResponseException\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.ipc.Ipc\nimport org.dweb_browser.core.ipc.NativeMessageChannel\nimport org.dweb_browser.core.ipc.helper.IpcResponse\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.core.std.http.DwebHttpServerOptions\nimport org.dweb_browser.core.std.http.createHttpDwebServer\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.helper.Debugger\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.SafeHashMap\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.encodeURI\nimport org.dweb_browser.helper.randomUUID\nimport org.dweb_browser.helper.resolvePath\nimport org.dweb_browser.helper.toJsonElement\nimport org.dweb_browser.pure.http.PureHeaders\nimport org.dweb_browser.pure.http.PureMethod\n\nval debugJsProcess = Debugger(\"js-process\")\n\nclass JsProcessNMM : NativeMicroModule(\"js.browser.dweb\", \"Js Process\") {\n  init {\n    name = BrowserI18nResource.JsProcess.short_name.text\n    short_name = BrowserI18nResource.JsProcess.short_name.text\n    categories = listOf(MICRO_MODULE_CATEGORY.Service, MICRO_MODULE_CATEGORY.Process_Service);\n    // 和jmm使用同一个图标\n    icons = listOf(\n      ImageResource(\n        src = \"file:///sys/browser-icons/jmm.browser.dweb.svg\",\n        type = \"image/svg+xml\",\n        // purpose = \"monochrome\"\n      )\n    )\n  }\n\n  inner class JsProcessRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n\n\n    private val JS_PROCESS_WORKER_CODE by lazy {\n      mmScope.async {\n        nativeFetch(\"file:///sys/browser-js-process-worker/index.js\").binary()\n      }\n    }\n\n    private val JS_CORS_HEADERS = mapOf(\n      Pair(\"Content-Type\", \"text/javascript\"),\n      Pair(\"Access-Control-Allow-Origin\", \"*\"),\n      Pair(\"Access-Control-Allow-Headers\", \"*\"),// 要支持 X-Dweb-Host\n      Pair(\"Access-Control-Allow-Methods\", \"*\"),\n    )\n\n    private val INTERNAL_PATH = \"/<internal>\".encodeURI()\n\n    override suspend fun _bootstrap() {\n      // 依赖 file 模块，所以需要启动它\n      bootstrapContext.dns.open(\"file.std.dweb\")\n      /// 主页的网页服务\n      val mainServer = this.createHttpDwebServer(DwebHttpServerOptions()).also { server ->\n        // 提供基本的主页服务\n        val serverIpc = server.listen()\n        serverIpc.onRequest(\"js-process-gateway\").collectIn(mmScope) { event ->\n          val request = event.consume()\n          // <internal>开头的是特殊路径，给Worker用的，不会拿去请求文件\n          if (request.uri.encodedPath.startsWith(INTERNAL_PATH)) {\n            val internalPath = request.uri.encodedPath.substring(INTERNAL_PATH.length)\n            if (internalPath == \"/bootstrap.js\") {\n              serverIpc.postMessage(\n                IpcResponse.fromBinary(\n                  request.reqId,\n                  200,\n                  PureHeaders(JS_CORS_HEADERS),\n                  JS_PROCESS_WORKER_CODE.await(),\n                  serverIpc\n                )\n              )\n            } else {\n              serverIpc.postMessage(\n                IpcResponse.fromText(\n                  request.reqId,\n                  404,\n                  PureHeaders(JS_CORS_HEADERS),\n                  \"// no found $internalPath\",\n                  serverIpc\n                )\n              )\n            }\n          } else {\n            val response = nativeFetch(\"file:///sys/browser-js-process-main${request.uri.fullPath}\")\n            serverIpc.postResponse(request.reqId, response)\n          }\n        }\n      }\n\n      val apis = createJsProcessWeb(mainServer, this)\n      val bootstrapUrl =\n        apis.dWebView.resolveUrl(mainServer.startResult.urlInfo.buildInternalUrl { resolvePath(\"$INTERNAL_PATH/bootstrap.js\") }\n          .toString())\n\n      onBeforeShutdown {\n        apis.destroy()\n      }\n      apis.onDestroy {\n        shutdown()\n      }\n\n      val tokenPidMap = SafeHashMap<String, Int>()\n      routes(\n        /**\n         * 创建 web worker\n         * 那么当前的ipc将会用来用作接下来的通讯\n         */\n        \"/create-process\" bind PureMethod.GET by defineJsonResponse {\n          debugMM(\"create-process\", request)\n          val processInfo = createProcessAndRun(\n            processName = request.queryOrNull(\"name\") ?: ipc.remote.name,\n            remoteCodeIpc = ipc,\n            apis = apis,\n            bootstrapUrl = bootstrapUrl,\n            entry = request.queryOrNull(\"entry\"),\n          )\n          val processToken = randomUUID()\n          tokenPidMap[processToken] = processInfo.processId\n\n          // 创建成功了，注册销毁函数\n          ipc.onClosed {\n            scopeLaunch(cancelable = false) {\n              debugJsProcess(\"close-all-process\", mmid)\n              val processMap = tokenPidMap.remove(processToken)\n              // 关闭程序\n              apis.destroyProcess(processInfo.processId)\n            }\n          }\n          // 返回具柄\n          CreateProcessReturn(processToken, portId = processInfo.portId).toJsonElement()\n        },\n        /// 创建 web 通讯管道\n        \"/create-ipc-endpoint\" bind PureMethod.GET by defineNumberResponse {\n          debugMM(\"create-ipc-endpoint\", request)\n          val processToken = request.query(\"token\")\n\n          val processId = tokenPidMap[processToken] ?: throw ResponseException(\n            code = HttpStatusCode.NotFound,\n            message = \"ipc:${ipc.remote.mmid}/processId:$processToken invalid\"\n          )\n\n          val manifestJson = request.query(\"manifest\")\n          val ids = NativeMessageChannel.getIds(\n            Regex(\"\"\"\"id\"\\s*:\\s*\"(.+?)\"\"\"\").find(manifestJson)?.groups?.get(1)?.value ?: \"???.dweb\",\n            ipc.remote.mmid,\n          )\n          // 返回 endpoint 的 globalId\n          apis.createIpcEndpoint(processId, manifestJson, ids.first).globalId.also {\n            debugMM(\"create-ipc-endpoint-success\", \"globalId=$it manifest=$manifestJson\")\n          }\n        },\n        \"/create-ipc\" bind PureMethod.GET by defineEmptyResponse {\n          val processToken = request.query(\"token\")\n          val processId = tokenPidMap[processToken] ?: throw ResponseException(\n            code = HttpStatusCode.NotFound,\n            message = \"ipc:${ipc.remote.mmid}/processId:$processToken invalid\"\n          )\n\n          val remoteGlobalId = request.query(\"globalId\").toInt()\n          val manifestJson = request.query(\"manifest\")\n          debugMM(\"/create-ipc\") { \"remoteGlobalId=$remoteGlobalId,manifestJson=$manifestJson\" }\n          apis.createJsIpc(\n            processId,\n            GlobalWebMessageEndpoint.get(remoteGlobalId).port,\n            manifestJson\n          ) {}\n        }\n      )\n    }\n\n    override suspend fun _shutdown() {\n      debugJsProcess(\"JsProcess\", \"_shutdown\")\n    }\n\n    private suspend fun createProcessAndRun(\n      processName: String,\n      remoteCodeIpc: Ipc,\n      apis: JsProcessWebApi,\n      bootstrapUrl: String,\n      entry: String?,\n    ): ProcessInfo {\n      debugMM(\"createProcessAndRun\", processName)\n      /**\n       * 用自己的域名的权限为它创建一个子域名\n       */\n      val httpDwebServer = createHttpDwebServer(\n        DwebHttpServerOptions(subdomain = \"${remoteCodeIpc.remote.mmid}-${remoteCodeIpc.pid}\"),\n      )\n\n      /**\n       * “模块之间的IPC通道”关闭的时候，关闭“代码IPC流通道”\n       */\n      remoteCodeIpc.onClosed {\n        scopeLaunch(cancelable = false) {\n          httpDwebServer.close();\n        }\n      }\n\n      /**\n       * 代理监听\n       * 让远端提供 esm 模块代码\n       * 这里我们将请求转发给对方，要求对方以一定的格式提供代码回来，\n       * 我们会对回来的代码进行处理，然后再执行\n       */\n      val codeProxyServerIpc = httpDwebServer.listen()\n\n      codeProxyServerIpc.onRequest(\"codeProxyServer\").collectIn(mmScope) { event ->\n        val request = event.consume()\n        debugMM(\"code server\", request)\n        codeProxyServerIpc.postResponse(\n          request.reqId,\n          // 转发给远端来处理 IpcServerRequest -> PureServerRequest -> PureClientRequest\n          /// TODO 对代码进行翻译处理，比如 tsc\n          remoteCodeIpc.request(request.toPure().toClient()).also { response ->\n            /// 加入跨域配置\n            for ((key, value) in JS_CORS_HEADERS) {\n              response.headers.set(key, value)\n            }\n          },\n        )\n      }\n\n      /// TODO env 允许远端传过来扩展\n      val env = mutableMapOf<String, String>(\n        // ...your envs\n        // 这不是是它代码的请求路径，代码请求路径从 import.meta.url 中读取，这里是用来为开发者提供一个 baseURL 而已\n        \"host\" to httpDwebServer.startResult.urlInfo.host,\n        // native环境是否启用调试\n        \"debug\" to debugJsProcess.isEnable.toString(),\n        // jmm的版本信息\n        \"jsMicroModule\" to \"${JsMicroModule.VERSION}.${JsMicroModule.PATCH}\",\n        // web brands\n        \"brands\" to Json.encodeToString(IDWebView.brands),\n      )\n\n      /**\n       * 创建一个通往 worker 的消息通道\n       */\n      val processInfo = apis.createProcess(\n        processName,\n        bootstrapUrl,\n        Json.encodeToString(remoteCodeIpc.remote),\n        Json.encodeToString(env),\n      ) {\n        remoteCodeIpc.close()\n      }\n      remoteCodeIpc.onClosed {\n        scopeLaunch(cancelable = true) {\n          apis.destroyProcess(processInfo.processId)\n        }\n      }\n\n\n      /**\n       * 开始执行代码\n       */\n      apis.runProcessMain(\n        processInfo.processId,\n        RunProcessMainOptions(main_url = apis.dWebView.resolveUrl(httpDwebServer.startResult.urlInfo.buildInternalUrl {\n          resolvePath(entry ?: \"/index.js\")\n        }.toString()))\n      )\n\n      return processInfo\n    }\n\n\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) =\n    JsProcessRuntime(bootstrapContext)\n}\n\n\n"},{"language":"kotlin","path":"jsProcess/JsProcessWebApi.kt","content":"package org.dweb_browser.browser.jsProcess\n\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.browser.kit.GlobalWebMessageEndpoint\nimport org.dweb_browser.core.http.dwebHttpGatewayService\nimport org.dweb_browser.core.ipc.helper.IWebMessagePort\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.http.HttpDwebServer\nimport org.dweb_browser.dwebview.DWebViewOptions\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.dwebview.create\nimport org.dweb_browser.helper.SafeInt\nimport org.dweb_browser.helper.UUID\nimport org.dweb_browser.helper.build\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.helper.randomUUID\nimport org.dweb_browser.helper.resolvePath\nimport org.dweb_browser.helper.withMainContext\nimport org.dweb_browser.pure.http.onPortChange\n\n@Serializable\ndata class ProcessInfo(@SerialName(\"process_id\") val processId: Int, var portId: Int = -1)\n\n@Serializable\ndata class CreateProcessReturn(val processToken: UUID, val portId: Int)\n\ndata class RunProcessMainOptions(val main_url: String)\nclass JsProcessWebApi(internal val dWebView: IDWebView) {\n  init {\n    dwebHttpGatewayService.server.onPortChange(\"updateGatewayPort\", false) { port ->\n      debugJsProcess(\"updateGatewayPort/start\", port)\n      runCatching {\n        dWebView.evaluateAsyncJavascriptCode(\n          \"updateGatewayPort($port)\"\n        )\n      }.getOrElse {\n        debugJsProcess(\"updateGatewayPort/error\", port, it)\n      }\n      debugJsProcess(\"updateGatewayPort/end\", port)\n    }\n  }\n\n  /**\n   * 执行js\"多步骤\"代码时的并发编号\n   */\n  private var hidAcc by SafeInt(1);\n\n  /**\n   * 创建一个jsWorker线程\n   */\n  suspend fun createProcess(\n    processName: String,\n    envScriptUrl: String,\n    metadataJson: String,\n    envJson: String,\n    onTerminate: suspend () -> Unit,\n  ): ProcessInfo {\n    debugJsProcess(\"createProcess\") {\n      \"\"\"\n      ---\n      processName=$processName\n      envScriptUrl=$envScriptUrl\n      metadataJson=$metadataJson\n      envJson=$envJson\n      ---\n      \"\"\".trimIndent()\n    }\n    val channel = dWebView.createMessageChannel()\n    val port1 = channel.port1\n    val port2 = channel.port2\n    val metadataJsonStr = Json.encodeToString(metadataJson)\n    val envJsonStr = Json.encodeToString(envJson)\n    val processNameStr = Json.encodeToString(processName)\n    val gatewayPort = dwebHttpGatewayService.getPort()\n\n    val onTerminateCallbackId = \"onTerminate-${randomUUID()}\"\n    val onTerminateCallbackReady = CompletableDeferred<Unit>()\n    dWebView.lifecycleScope.launch {\n      dWebView.evaluateAsyncJavascriptCode(\"(window['$onTerminateCallbackId'] = new PromiseOut()).promise\") {\n        onTerminateCallbackReady.complete(Unit)\n      }\n      onTerminate()\n      port2.close()\n    }\n    onTerminateCallbackReady.await()\n\n    val hid = hidAcc++\n    val processInfoJson = dWebView.evaluateAsyncJavascriptCode(\"\"\"\n      new Promise((resolve,reject)=>{\n        addEventListener(\"message\", async function doCreateProcess(event) {\n          if (event.data === \"js-process/create-process/$hid\") {\n            try{\n              removeEventListener(\"message\", doCreateProcess);\n              const fetch_port = event.ports[0];\n              const on_terminate_po = window['$onTerminateCallbackId'];\n              delete window['$onTerminateCallbackId'];\n              const process = await createProcess($processNameStr,`$envScriptUrl`,$metadataJsonStr,$envJsonStr,fetch_port,$gatewayPort,()=>{\n                on_terminate_po.resolve()\n              }); \n              resolve(process)\n            } catch (err) {\n              reject(err)\n            }\n          }\n        })\n      })\n      \"\"\".trimIndent(), afterEval = {\n      try {\n        dWebView.postMessage(\"js-process/create-process/$hid\", listOf(port1))\n        port1.unref()\n      } catch (e: Exception) {\n        e.printStackTrace()\n      }\n    })\n    debugJsProcess(\"processInfo\", processInfoJson)\n    val info = Json.decodeFromString<ProcessInfo>(processInfoJson)\n    info.portId = GlobalWebMessageEndpoint(port2, \"fetch-ipc:$processName\").globalId\n    return info\n  }\n\n  suspend fun runProcessMain(processId: Int, options: RunProcessMainOptions) {\n    dWebView.evaluateAsyncJavascriptCode(\n      \"runProcessMain($processId, { main_url:`${options.main_url}` })\"\n    )\n  }\n\n  suspend fun destroyProcess(processId: Int) {\n    runCatching {\n      dWebView.evaluateAsyncJavascriptCode(\n        \"destroyProcess($processId)\"\n      )\n    }.getOrNull()\n  }\n\n  /**\n   * 创建一对 ipc-endpoint，并同时将其中一个 endpoint 用来创建ipc，剩下的这个endpoint用来返回\n   */\n  suspend fun createIpcEndpoint(\n    processId: Int,\n    manifestJson: String,\n    debugIdPrefix: String,\n    autoStart: Boolean? = null,\n  ) = withMainContext {\n    val channel = dWebView.createMessageChannel()\n    createJsIpc(processId, channel.port1, manifestJson, autoStart) {\n      channel.port2.close()\n    }\n    GlobalWebMessageEndpoint(channel.port2, debugIdPrefix)\n  }\n\n  /**\n   * 提供指定的endpoint，在 js 中创建一个 ipc\n   */\n  suspend fun createJsIpc(\n    processId: Int,\n    port: IWebMessagePort,\n    manifestJson: String,\n    autoStart: Boolean? = null,\n    onClose: suspend () -> Unit,\n  ) {\n    val onCloseCallbackId = \"onClose-${randomUUID()}\"\n    // 连接方关闭\n    val onTerminateCallbackReady = CompletableDeferred<Unit>()\n    dWebView.lifecycleScope.launch {\n      dWebView.evaluateAsyncJavascriptCode(\"(window['$onCloseCallbackId'] = new PromiseOut()).promise\") {\n        onTerminateCallbackReady.complete(Unit)\n      }\n      onClose()\n    }\n    onTerminateCallbackReady.await()\n\n    withMainContext {\n      val hid = hidAcc++\n      dWebView.evaluateAsyncJavascriptCode(\"\"\"\n        new Promise((resolve,reject)=>{\n            const prefix = \"js-process/create-ipc/$hid:\"\n            addEventListener(\"message\", async function doCreateIpc(event) {\n                if (event.data.startsWith(prefix)) {\n                  const manifest_json = event.data.slice(prefix.length);\n                  try {\n                      removeEventListener(\"message\", doCreateIpc);\n                      const ipc_port = event.ports[0];\n                      const on_close_po = window['$onCloseCallbackId'];\n                      delete window['$onCloseCallbackId'];\n                      resolve(await createIpc($processId, manifest_json, ipc_port, ${autoStart ?: \"undefined\"}, ()=>{\n                        on_close_po.resolve()\n                      }))\n                  } catch (err) {\n                      reject(err)\n                  }\n                }\n            })\n        })\n        \"\"\".trimIndent(), afterEval = {\n        dWebView.postMessage(\"js-process/create-ipc/$hid:$manifestJson\", listOf(port))\n        port.unref()\n      })\n    }\n  }\n\n  suspend fun destroy() {\n    dWebView.destroy()\n  }\n\n  val onDestroy = dWebView.onDestroy\n}\n\n\nsuspend fun createJsProcessWeb(\n  mainServer: HttpDwebServer, mm: NativeMicroModule.NativeRuntime,\n): JsProcessWebApi {\n  debugJsProcess(\"createJsProcessWeb\")\n  /// WebView 实例\n  val urlInfo = mainServer.startResult.urlInfo\n\n  val jsProcessUrl = urlInfo.buildInternalUrl().build { resolvePath(\"/index.html\") }.toString()\n  val dWebView = IDWebView.create(\n    mm, DWebViewOptions(\n      privateNet = true,\n      openDevTools = envSwitch.isEnabled(ENV_SWITCH_KEY.JS_PROCESS_DEVTOOLS),\n    )\n  )\n  // 等待加载完成\n  dWebView.loadUrl(jsProcessUrl)\n  /// 确保API可用\n  while (dWebView.evaluateAsyncJavascriptCode(\"typeof createProcess==='function'\") == \"false\") {\n    delay(5)\n  }\n\n  return JsProcessWebApi(dWebView)\n}\n"},{"language":"kotlin","path":"kit/GlobalWebMessageEndpoint.kt","content":"package org.dweb_browser.browser.kit\n\nimport kotlinx.coroutines.CoroutineScope\nimport org.dweb_browser.core.ipc.WebMessageEndpoint\nimport org.dweb_browser.core.ipc.helper.IWebMessagePort\nimport org.dweb_browser.core.ipc.kotlinIpcPool\nimport org.dweb_browser.helper.SafeHashMap\nimport org.dweb_browser.helper.SafeInt\n\n/**\n * 创建一个 WebMessageEndpoint ，会全局保存\n * 使用一个 globalId 替代 内存实例，从而方便传输\n *\n * 通常用于 JsBridge 中\n */\nclass GlobalWebMessageEndpoint(\n  port: IWebMessagePort,\n  debugIdPrefix: String = \"native2js\",\n  parentScope: CoroutineScope = kotlinIpcPool.scope,\n) : WebMessageEndpoint(\"$debugIdPrefix@G$globalIdAcc\", parentScope, port) {\n  companion object {\n    private var globalIdAcc by SafeInt(1);\n    private val ALL = SafeHashMap<Int, GlobalWebMessageEndpoint>();\n\n    /**\n     * Native2JsIpc 的远端是在 webView 中的，所以底层使用 WebMessagePort 与指通讯\n     *\n     * ### 原理\n     * 连接发起方执行 `fetch('file://js.browser.dweb/create-ipc')` 后，\n     * 由 js-worker 创建了 channel-port1/2，然后 js-process(native) 负责中转这个信道（在nwjs中，我们直接使用内存引用，在mobile中，我们需要拦截webRequest），并为其存下一个 id(number)。\n     * 最终将这个 id 通过 fetch 返回值返回。\n     *\n     * 那么连接发起方就可以通过这个 id(number) 和 Native2JsIpc 构造器来实现与 js-worker 的直连\n     *\n     */\n    fun get(globalId: Int) =\n      ALL[globalId] ?: throw Exception(\"no found GlobalWebMessageEndpoint by globalId: $globalId\")\n  }\n\n  val globalId: Int = globalIdAcc++\n\n  init {\n    ALL[globalId] = this\n    onClosed {\n      ALL.remove(globalId)\n    }\n  }\n}"},{"language":"kotlin","path":"mwebview/MultiWebViewController.kt","content":"package org.dweb_browser.browser.mwebview\n\nimport androidx.compose.runtime.Stable\nimport kotlinx.coroutines.CoroutineName\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.launch\nimport kotlinx.serialization.json.JsonElement\nimport kotlinx.serialization.json.JsonObject\nimport kotlinx.serialization.json.JsonPrimitive\nimport org.dweb_browser.browser.common.createDwebView\nimport org.dweb_browser.core.ipc.Ipc\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.dwebview.UrlLoadingPolicy\nimport org.dweb_browser.dwebview.base.ViewItem\nimport org.dweb_browser.helper.ChangeableList\nimport org.dweb_browser.helper.SafeInt\nimport org.dweb_browser.helper.buildUrlString\nimport org.dweb_browser.helper.toWebUrlOrWithoutProtocol\nimport org.dweb_browser.sys.window.core.WindowController\nimport org.dweb_browser.sys.window.core.windowAdapterManager\nimport org.dweb_browser.sys.window.core.withRenderScope\n\ntypealias WEBVIEW_ID = String\n\n/**\n * MWebView 是为其它模块提供 GUI 的程序模块，所以这里需要传入两个模块：localeMM 与 remoteMM\n * remoteMM 只是一层抽象，未来如何需要可以通过网络成实现\n */\n@Stable\nclass MultiWebViewController(\n  /**\n   * 窗口控制器\n   */\n  val win: WindowController,\n  /**\n   * 控制者的通讯通道\n   */\n  val ipc: Ipc,\n  /// 以下这两参数是用来构建DWebView的时候使用的\n  private val localeMM: MicroModule.Runtime,\n  val remoteMM: MicroModule.Runtime,\n) {\n  companion object {\n    private var webviewId_acc by SafeInt(1)\n  }\n\n  val webViewList = ChangeableList<MultiViewItem>()\n\n  init {\n    val rid = win.id\n    /// 提供渲染适配\n    windowAdapterManager.provideRender(rid) { modifier ->\n      Render(modifier.withRenderScope(this), scale) // 开始渲染\n    }\n    /// 窗口销毁的时候\n    win.onClose {\n      // 清除释放所有的 webview\n      for (item in webViewList.toList()) {\n        closeWebView(item.webviewId)\n      }\n    }\n  }\n\n  fun isLastView(viewItem: MultiViewItem) = webViewList.lastOrNull() == viewItem\n  fun isFistView(viewItem: MultiViewItem) = webViewList.firstOrNull() == viewItem\n  val lastViewOrNull get() = webViewList.lastOrNull()\n  fun getWebView(webviewId: String) = webViewList.find { it.webviewId == webviewId }\n\n  data class MultiViewItem(\n    override val webviewId: WEBVIEW_ID,\n    override val webView: IDWebView,\n    override val coroutineScope: CoroutineScope,\n    override var hidden: Boolean = false,\n    val windowController: WindowController,\n    val layerController: MultiWebViewController,\n  ) : ViewItem\n\n  /**\n   * 打开WebView\n   */\n  suspend fun openWebView(url: String): MultiViewItem {\n    localeMM.debugMM(\"openWebView\", url)\n    val webView = win.createDwebView(remoteMM, url)\n    return appendWebViewAsItem(webView)\n  }\n\n  private fun appendWebViewAsItem(dWebView: IDWebView): MultiViewItem {\n    localeMM.debugMM(\"appendWebViewAsItem\", dWebView)\n    val webviewId = \"#w${webviewId_acc++}\"\n    val coroutineScope =\n      CoroutineScope(CoroutineName(webviewId) + localeMM.getRuntimeScope().coroutineContext)\n    return MultiViewItem(\n      webviewId = webviewId,\n      webView = dWebView,\n      coroutineScope = coroutineScope,\n      windowController = win,\n      layerController = this,\n    ).also { viewItem ->\n      webViewList.add(viewItem)\n      /**\n       * 对于链接的跳转与打开策略\n       * 如果可以处理，那么返回 链接本身\n       * 否则直接在内部直接对链接作出需要的处理，然后返回null\n       */\n      fun filterSafeUrl(url: String): String? {\n        if (url.startsWith(\"dweb://\")) {\n          coroutineScope.launch {\n            dWebView.remoteMM.nativeFetch(url)\n          }\n        } else {\n          val urlHost = url.toWebUrlOrWithoutProtocol()?.host\n          if (urlHost?.endsWith(dWebView.remoteMM.mmid) == true) {\n            return url\n          } else if (urlHost?.endsWith(\".dweb\") == true) {\n            return null\n          } else {\n            coroutineScope.launch {\n              dWebView.remoteMM.nativeFetch(buildUrlString(\"dweb://openinbrowser\") {\n                parameters[\"url\"] = url\n              })\n            }\n          }\n        }\n        return null\n      }\n      // 拦截当前页面的跳转\n      dWebView.overrideUrlLoadingHooks.add {\n        remoteMM.debugMM(\"MultiViewItem/overrideUrlLoading\") { url }\n        /// 如果是iframe中的请求，那么允许跳转。因为 iframe 网站可以自己去做 origin 策略，这属于web的范畴\n        if (!isMainFrame) {\n          return@add UrlLoadingPolicy.Allow\n        }\n        when (filterSafeUrl(url)) {\n          null -> UrlLoadingPolicy.Block\n          else -> UrlLoadingPolicy.Allow\n        }\n      }\n      // 拦截打开新窗口\n      dWebView.onCreateWindow { newWebView ->\n        remoteMM.debugMM(\"MultiViewItem/onCreateWindow\") { newWebView.getUrl() }\n        when (filterSafeUrl(newWebView.getUrl())) {\n          null -> newWebView.destroy()\n          else -> appendWebViewAsItem(newWebView)\n        }\n      }\n      dWebView.onDestroy {\n        closeWebView(webviewId)\n      }\n    }\n  }\n\n  /**\n   * 关闭WebView\n   */\n  suspend fun closeWebView(webViewId: String) =\n    webViewList.find { it.webviewId == webViewId }?.let { viewItem ->\n      webViewList.remove(viewItem)\n      viewItem.webView.destroy()\n      return true\n    } ?: false\n\n  /**\n   * 移除所有列表\n   */\n  suspend fun destroyWebView(): Boolean {\n    webViewList.toList().forEach { viewItem ->\n      viewItem.webView.destroy()\n    }\n    webViewList.clear()\n    win.closeRoot()\n    return true\n  }\n\n  /**\n   * 将指定WebView移动到顶部显示\n   */\n  suspend fun moveToTopWebView(webviewId: String): Boolean {\n    val viewItem = webViewList.find { it.webviewId == webviewId } ?: return false\n    webViewList.remove(viewItem)\n    webViewList.add(viewItem)\n    return true\n  }\n\n  fun getState(): JsonObject {\n    val views = mutableMapOf<String, JsonElement>()\n    webViewList.forEachIndexed { index, it ->\n      val viewItem = mutableMapOf<String, JsonElement>()\n      viewItem[\"index\"] = JsonPrimitive(index)\n      viewItem[\"webviewId\"] = JsonPrimitive(it.webviewId)\n      viewItem[\"isActivated\"] = JsonPrimitive(it.hidden)\n      viewItem[\"mmid\"] = JsonPrimitive(ipc.remote.mmid)\n      viewItem[\"url\"] = JsonPrimitive(it.webView.getUrl())\n      views[it.webviewId] = JsonObject(viewItem)\n    }\n    val state = mutableMapOf<String, JsonElement>()\n    state[\"wid\"] = JsonPrimitive(win.id)\n    state[\"views\"] = JsonObject(views)\n    return JsonObject(state)\n  }\n}"},{"language":"kotlin","path":"mwebview/MultiWebViewNMM.kt","content":"package org.dweb_browser.browser.mwebview\n\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.ipc.Ipc\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.helper.UUID\nimport org.dweb_browser.helper.WeakHashMap\nimport org.dweb_browser.helper.get\nimport org.dweb_browser.helper.getOrPut\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.sys.window.core.helper.setStateFromManifest\nimport org.dweb_browser.sys.window.ext.getWindow\n\nclass MultiWebViewNMM : NativeMicroModule(\"mwebview.browser.dweb\", \"Multi Webview Renderer\") {\n  init {\n    short_name = \"MWebview\"\n    categories = listOf(MICRO_MODULE_CATEGORY.Service, MICRO_MODULE_CATEGORY.Render_Service)\n  }\n\n  companion object {\n    private val controllerMap = WeakHashMap<MicroModule.Runtime, MultiWebViewController>()\n  }\n\n  inner class MultiWebViewRuntime(override val bootstrapContext: BootstrapContext) :\n    NativeRuntime() {\n    override suspend fun _bootstrap() {\n      webViewSysProtocol()\n\n      routes(\n        // 打开一个 webview，并将它以 窗口window 的标准进行展示\n        \"/open\" bind PureMethod.GET by defineJsonResponse {\n          val url = request.query(\"url\")\n          val wid = request.query(\"wid\")\n\n          val remoteMm = getRemoteRuntime()\n          debugMM(\"/open\", \"MultiWebViewNMM open!!! ${remoteMm.mmid}\")\n          val viewLayer = openDwebView(remoteMm, wid, url, ipc)\n          debugMM(\n            \"create/open end\",\n            \"${viewLayer.webviewId}, ${viewLayer.windowController.id}\"\n          )\n          viewLayer.layerController.getState()\n        },\n        // 关闭指定 webview 窗口\n        \"/close\" bind PureMethod.GET by defineBooleanResponse {\n          val webviewId = request.query(\"webview_id\")\n          val remoteMmid = ipc.remote.mmid\n          debugMM(\"/close\", \"webviewId:$webviewId,mmid:$remoteMmid\")\n          closeDwebView(getRemoteRuntime(), webviewId)\n        },\n        // 关闭app\n        \"/close/app\" bind PureMethod.GET by defineBooleanResponse {\n          val controller = controllerMap[getRemoteRuntime()] ?: return@defineBooleanResponse false;\n          controller.destroyWebView()\n        },\n        // 界面没有关闭，用于重新唤醒\n        \"/activate\" bind PureMethod.GET by defineBooleanResponse {\n          val controller = controllerMap[getRemoteRuntime()] ?: return@defineBooleanResponse false\n          debugMM(\"/activate\", \"激活 ${controller.ipc.remote.mmid}\")\n          controller.win.focus()\n\n          return@defineBooleanResponse true\n        },\n        \"/openOrActivate\" bind PureMethod.GET by defineEmptyResponse {\n          val url = request.query(\"url\")\n          val wid = request.query(\"wid\")\n\n          val remoteMm = getRemoteRuntime()\n          debugMM(\"/openOrActivate\", \"MultiWebViewNMM open!!! ${remoteMm.mmid}\")\n          openOrActivity(remoteMm, wid, url, ipc)\n        },\n      )\n    }\n\n    override suspend fun _shutdown() {\n    }\n\n    private val openLock = Mutex()\n\n    private suspend fun getController(\n      remoteMm: MicroModule.Runtime,\n      wid: UUID,\n      ipc: Ipc,\n    ) = openLock.withLock(remoteMm.mmid) {\n      controllerMap.getOrPut(remoteMm) {\n        val win = remoteMm.getWindow(wid)\n        /// 窗口销毁的时候，释放这个Controller\n        /// 通常这里无法正确执行，好像是因为 onClose 是在生命周期之前就已经被释放了？所以目前使用 WeakHashMap\n        win.onClose {\n          controllerMap.remove(remoteMm)\n        }\n        win.setStateFromManifest(remoteMm)\n        MultiWebViewController(win, ipc, this, remoteMm).also { controller ->\n          ipc.onClosed {\n            scopeLaunch(cancelable = false) {\n              debugMM(\"/onClosed\", \"listen ipc close destroy window\")\n              controller.destroyWebView()\n            }\n          }\n        }\n      }\n    }\n\n    /**打开新图层*/\n    private suspend fun openDwebView(\n      remoteMm: MicroModule.Runtime,\n      wid: UUID,\n      url: String,\n      ipc: Ipc,\n    ): MultiWebViewController.MultiViewItem {\n      debugMM(\"openDwebView-start\") { \"remote-mmid: ${remoteMm.mmid} / url:$url\" }\n      return getController(remoteMm, wid, ipc).openWebView(url).also {\n        debugMM(\"openDwebView-end\", it)\n      }\n    }\n\n    private suspend fun openOrActivity(\n      remoteMm: MicroModule.Runtime,\n      wid: UUID,\n      url: String,\n      ipc: Ipc,\n    ) {\n      val controller = getController(remoteMm, wid, ipc)\n      if (controller.webViewList.isEmpty()) {\n        debugMM(\"openOrActivity-start\") { \"remote-mmid: ${remoteMm.mmid} / url:$url\" }\n        controller.openWebView(url).also {\n          debugMM(\"openOrActivity-end\", it)\n        }\n      } else {\n        controller.win.focus()\n      }\n    }\n\n    private suspend fun closeDwebView(remoteMm: MicroModule.Runtime, webviewId: String): Boolean {\n      return controllerMap[remoteMm]?.closeWebView(webviewId) ?: false\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) =\n    MultiWebViewRuntime(bootstrapContext)\n}"},{"language":"kotlin","path":"mwebview/MultiWebViewRender.kt","content":"package org.dweb_browser.browser.mwebview\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.DisposableEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport org.dweb_browser.browser.common.WindowControllerBinding\nimport org.dweb_browser.dwebview.RenderWithScale\nimport org.dweb_browser.dwebview.rememberCanGoBack\nimport org.dweb_browser.dwebview.rememberHistoryCanGoForward\n\n@Composable\nfun MultiWebViewController.Render(\n  modifier: Modifier = Modifier,\n  scale: Float,\n) {\n  var list by remember {\n    mutableStateOf(listOf<MultiWebViewController.MultiViewItem>())\n  }\n  DisposableEffect(webViewList) {\n    val off = webViewList.onChange {\n      list = it.toList()\n      if (list.isEmpty()) {\n        win.tryCloseOrHide()\n      }\n      return@onChange;\n    }\n    list = webViewList.toList()\n    onDispose {\n      off()\n    }\n  }\n\n  Box(modifier) {\n    list.forEach { viewItem ->\n      key(viewItem.webviewId) {\n        viewItem.webView.apply {\n          WindowControllerBinding()\n          RenderWithScale(scale, Modifier.fillMaxSize())\n        }\n      }\n    }\n    /// 如果有多个webview，可以通过返回来关闭最后一个\n    win.navigation.GoBackHandler(list.size > 1) {\n      list.lastOrNull()?.also {\n        closeWebView(it.webviewId)\n      }\n    }\n    list.lastOrNull()?.also {\n      val webView = it.webView\n//  /// 返回按钮的拦截只跟最后一个视图有关系，直到这最后一个视图被关闭了\n//  val isMaximized by win.watchedIsMaximized()\n//  // 在 MWebView 的全屏窗口中，默认将返回按钮的行为与应用退出关联在一起\n      if (win.state.canGoForward != null) {\n        win.state.canGoForward = webView.rememberHistoryCanGoForward()\n      }\n      /// 如果最后一个 webview 能够 goBack（closeWatcher+historyGoBack），那么返回按钮执行 goBack。\n      val canGoBack = webView.rememberCanGoBack()\n      win.navigation.GoBackHandler(canGoBack) {\n        webView.goBack()\n      }\n    }\n  }\n}\n"},{"language":"kotlin","path":"mwebview/WebViewSysProtocol.kt","content":"package org.dweb_browser.browser.mwebview\n\nimport org.dweb_browser.browser.common.WindowControllerBinding\nimport org.dweb_browser.browser.common.createDwebView\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.dwebview.RenderWithScale\nimport org.dweb_browser.helper.removeWhen\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.sys.window.core.windowAdapterManager\nimport org.dweb_browser.sys.window.core.withRenderScope\nimport org.dweb_browser.sys.window.ext.getWindow\n\nsuspend fun MultiWebViewNMM.MultiWebViewRuntime.webViewSysProtocol() {\n  protocol(\"webview.sys.dweb\") {\n\n    routes(\n      /// 提供句柄与链接，将链接进行渲染\n      \"/open\" bind PureMethod.POST by defineEmptyResponse {\n        val rid = request.query(\"rid\")\n        val url = request.query(\"url\")\n        val wid = request.query(\"wid\")\n        val remoteMm = getRemoteRuntime()\n        val win = remoteMm.getWindow(wid)\n        val webView = win.createDwebView(remoteMm, url)\n\n        windowAdapterManager.provideRender(rid) { modifier ->\n          webView.WindowControllerBinding()\n          webView.RenderWithScale(scale, modifier.withRenderScope(this))\n        }.removeWhen(win.lifecycleScope)\n      }).cors()\n  }\n}"},{"language":"kotlin","path":"scan/AlbumPreview.kt","content":"package org.dweb_browser.browser.scan\n\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.foundation.BorderStroke\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.requiredWidth\nimport androidx.compose.material3.AlertDialogDefaults\nimport androidx.compose.material3.BasicAlertDialog\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.FilledTonalButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ImageBitmap\nimport androidx.compose.ui.graphics.SolidColor\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.FlowPreview\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.helper.compose.div\nimport org.dweb_browser.sys.window.core.LocalWindowController\n\n/**选中文件时候的反馈*/\n@Composable\nfun SmartScanController.RenderAlbumPreview(\n  modifier: Modifier,\n  selectImg: ImageBitmap,\n) {\n  LocalWindowController.current.navigation.GoBackHandler {\n    albumImageFlow.value = null\n    barcodeResultFlow.emit(emptyList()) // 清空缓存的数据\n    updatePreviewType(SmartModuleTypes.Scanning) // 切换成扫码模式\n  }\n  val density = LocalDensity.current.density\n  // 显示选中的图片\n  BoxWithConstraints(modifier = modifier.fillMaxSize()) {\n    val parentWidth = constraints.maxWidth\n    val parentHeight = constraints.maxHeight\n    Image(\n      bitmap = selectImg,\n      contentDescription = \"Photo\",\n      modifier = Modifier.fillMaxSize(),\n    )\n    //等待识别\n    val results by barcodeResultFlow.collectAsState()\n    if (results.isEmpty()) {\n      RenderEmptyResult()\n      return@BoxWithConstraints\n    }\n    val offsetImgX = (parentWidth - selectImg.width) / 2f\n    val offsetImgY = (parentHeight - selectImg.height) / 2f\n//    println(\"offsetImgX:$offsetImgX offsetImgY:$offsetImgY\")\n    // 画出识别到的内容\n    for (result in results) {\n      var textSize by remember { mutableStateOf(Size.Zero) }\n      val width by animateFloatAsState(result.boundingBox.width / density)\n      val height by animateFloatAsState(result.boundingBox.height / density)\n      val offsetX by animateFloatAsState(result.boundingBox.x + width - textSize.width)\n      val offsetY by animateFloatAsState(result.boundingBox.y + height - textSize.height)\n//      println(\"offset=> $density $offsetX $offsetY \")\n      key(result.data) {\n        FilledTonalButton(\n          { onSuccess(result.data) },\n          modifier = Modifier.requiredWidth(width.dp)\n            .graphicsLayer {\n              translationX = offsetX + offsetImgX\n              translationY = offsetY + offsetImgY\n            }.onGloballyPositioned { textSize = it.size.div(density) },\n          colors = ButtonDefaults.filledTonalButtonColors()\n            .run { copy(containerColor = containerColor.copy(alpha = 0.5f)) },\n          border = BorderStroke(width = 0.5.dp, brush = SolidColor(Color.White)),\n          contentPadding = PaddingValues(horizontal = 4.dp, vertical = 3.dp)\n        ) {\n          Text(\n            result.data,\n            maxLines = 1,\n            overflow = TextOverflow.Ellipsis\n          )\n        }\n      }\n    }\n  }\n}\n\n// 识别到空到时候\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun SmartScanController.RenderEmptyResult() {\n  val win = LocalWindowController.current\n  val uiScope = rememberCoroutineScope()\n  BasicAlertDialog(\n    onDismissRequest = { },\n    modifier = Modifier.clip(AlertDialogDefaults.shape)\n      .background(AlertDialogDefaults.containerColor)\n  ) {\n    Column(horizontalAlignment = Alignment.CenterHorizontally) {\n      Text(\n        text = BrowserI18nResource.QRCode.emptyResult.text,\n        modifier = Modifier.padding(vertical = 20.dp)\n      )\n      Text(\n        text = BrowserI18nResource.QRCode.Back(), modifier = Modifier.clickableWithNoEffect {\n          uiScope.launch {\n            onCancel(\"back\")\n//            win.navigation.emitGoBack()\n          }\n        }.padding(20.dp), color = MaterialTheme.colorScheme.primary\n      )\n    }\n  }\n}\n"},{"language":"kotlin","path":"scan/BarcodeScanningProtocol.kt","content":"package org.dweb_browser.browser.scan\n\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.http.router.byChannel\nimport org.dweb_browser.helper.datetimeNow\nimport org.dweb_browser.helper.toJsonElement\nimport org.dweb_browser.pure.http.PureBinaryFrame\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.PureTextFrame\n\n\nsuspend fun SmartScanNMM.ScanRuntime.barcodeScanning(scanningController: ScanningController) {\n  protocol(\"barcode-scanning.sys.dweb\") {\n\n    routes(\n      \"/process\" byChannel { ctx ->\n        val time = datetimeNow()\n        var rotation = 0\n        for (frame in ctx) {\n          when (frame) {\n            is PureTextFrame -> {\n              debugSCAN(\"process=>byChannel\", \"PureTextFrame($time)\")\n              rotation = frame.text.toIntOrNull() ?: 0\n            }\n\n            is PureBinaryFrame -> {\n              debugSCAN(\"process=>byChannel\", \"PureBinaryFrame($time) $rotation\")\n              val result = try {\n                scanningController.recognize(frame.binary, rotation)\n              } catch (e: Throwable) {\n                debugSCAN(\"process=>byChannel\", null, e)\n                emptyList()\n              }\n              debugSCAN(\"process=>byChannel\", result.joinToString(\", \") { it.data })\n              // 不论 result 是否为空数组，都进行响应\n              ctx.sendJson(result)\n            }\n\n            else -> {\n              ctx.getChannel().close()\n            }\n          }\n        }\n      },\n      // 处理二维码图像\n      \"/process\" bind PureMethod.POST by defineJsonResponse {\n        val rotation = request.queryOrNull(\"rotation\")?.toIntOrNull() ?: 0\n        val imgBitArray = request.body.toPureBinary()\n        debugSCAN(\"process=>POST\", \"rotation=$rotation,size=${imgBitArray.size}\")\n        val result = try {\n          scanningController.recognize(imgBitArray, rotation)\n        } catch (e: Throwable) {\n          debugSCAN(\"process=>POST\", null, e)\n          emptyList()\n        }\n        debugSCAN(\"process=>POST\", result.joinToString(\", \") { it.data })\n        return@defineJsonResponse result.toJsonElement()\n      },\n\n      // 停止处理\n      \"/stop\" bind PureMethod.GET by defineBooleanResponse {\n        debugSCAN(\"/stop\", ipc.remote.mmid)\n        scanningController.stop()\n        return@defineBooleanResponse true\n      },\n    ).cors()\n  }\n}"},{"language":"kotlin","path":"scan/CameraPreview.kt","content":"package org.dweb_browser.browser.scan\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.zIndex\nimport org.dweb_browser.helper.compose.NativeBackHandler\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.platform.isDesktop\nimport org.dweb_browser.sys.window.core.WindowContentRenderScope\nimport org.jetbrains.compose.resources.ExperimentalResourceApi\nimport org.jetbrains.compose.resources.decodeToImageBitmap\n\n@OptIn(ExperimentalResourceApi::class)\n@Composable\nfun WindowContentRenderScope.RenderBarcodeScanning(\n  modifier: Modifier, controller: SmartScanController\n) {\n  // 全局返回操作，只关闭扫码\n  NativeBackHandler {\n    controller.onCancel(\"NativeBackHandler\")\n  }\n//  // 本来考虑这边可以监听activity如果是onPause的话，也关闭的，但是发现这个触发时机不过及时\n//  LocalWindowController.current.pureViewControllerState.value?.onPause {\n//    controller.onCancel(\"onPause\")\n//  }\n\n  val selectImg by controller.albumImageFlow.collectAsState()\n  // 当用户选中文件的时候切换到Album模式\n  selectImg?.let { controller.updatePreviewType(SmartModuleTypes.Album) }\n  Box(modifier) {\n    when (controller.previewTypes) {\n      // 视图切换,如果扫描到了二维码\n      SmartModuleTypes.Scanning -> {\n        // 渲染相机内容\n        CameraPreviewRender(modifier = Modifier.fillMaxSize(), controller = controller)\n        // 扫描线和打开相册，暂时不再桌面端支持\n        // TODO 根据设备是否支持摄像头来做这个事情\n        controller.DefaultScanningView(\n          modifier = Modifier.fillMaxSize().zIndex(2f), showLight = !IPureViewController.isDesktop\n        )\n        // 渲染扫码结果\n        controller.RenderScanResultView(Modifier.matchParentSize().zIndex(3f))\n      }\n      // 相册选择\n      SmartModuleTypes.Album -> {\n        selectImg?.let { byteArray ->\n          // 如果是选中图片，渲染选中的图片\n          LaunchedEffect(byteArray) {\n            controller.decodeQrCode {\n              recognize(byteArray, 0)\n            }\n          }\n          controller.RenderAlbumPreview(Modifier.fillMaxSize(), byteArray.decodeToImageBitmap())\n        } ?: run {\n          AlbumPreviewRender(modifier, controller) // 如果图片为空，就打开相册选择器\n        }\n      }\n      // 内窥模式\n      SmartModuleTypes.Endoscopic -> {\n        controller.EndoscopicPreview(modifier)\n        ScannerLine() // 添加扫描线\n        // 渲染扫码结果\n        controller.RenderScanResultView(\n          Modifier.matchParentSize().zIndex(3f)\n        )\n      }\n    }\n  }\n}\n\n/**相机preview视图*/\n@Composable\nexpect fun CameraPreviewRender(\n  modifier: Modifier = Modifier, controller: SmartScanController\n)\n\n/**这里是文件选择视图*/\n@Composable\nexpect fun AlbumPreviewRender(\n  modifier: Modifier = Modifier, controller: SmartScanController\n)"},{"language":"kotlin","path":"scan/EndoscopicPreview.kt","content":"package org.dweb_browser.browser.scan\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport org.dweb_browser.sys.window.core.LocalWindowController\n\n///内窥镜渲染模块\n\n/**内窥镜视图*/\n@Composable\nexpect fun EndoscopicPreview(modifier: Modifier, controller: SmartScanController)\n\n\n@Composable\nfun SmartScanController.EndoscopicPreview(modifier: Modifier) {\n  LocalWindowController.current.navigation.GoBackHandler {\n    updatePreviewType(SmartModuleTypes.Scanning)\n  }\n  EndoscopicPreview(modifier, this)\n}\n\n"},{"language":"kotlin","path":"scan/SmartChatScreenPreview.kt","content":"package org.dweb_browser.browser.scan\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.sizeIn\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.LazyListState\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalClipboardManager\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.text.AnnotatedString\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.sys.toast.ext.showToast\nimport org.dweb_browser.sys.window.core.constant.LocalWindowMM\n\n@Composable\ninternal fun SmartScanController.ChatScreenPreview(\n  listState: LazyListState, messages: List<BarcodeResultDrawer>,\n) {\n  Box(\n    modifier = Modifier.fillMaxSize().padding(bottom = 72.dp, start = 8.dp, end = 8.dp),\n    contentAlignment = Alignment.BottomCenter\n  ) {\n    val density = LocalDensity.current.density\n\n    val containerColor = MaterialTheme.colorScheme.onTertiaryContainer\n    val contentColor = MaterialTheme.colorScheme.onTertiary\n    LazyColumn(\n      state = listState,\n      modifier = Modifier.fillMaxWidth().sizeIn(maxHeight = 200.dp).clip(RoundedCornerShape(16.dp))\n        .background(\n          Brush.verticalGradient(\n            colors = listOf(containerColor.copy(alpha = 0.5f), containerColor.copy(alpha = 0.15f)),\n          )\n        ),\n      verticalArrangement = Arrangement.Bottom,\n      horizontalAlignment = Alignment.CenterHorizontally,\n    ) {\n      val lastIndex = messages.size - 1\n      itemsIndexed(messages, { _, item -> item.index }) { index, message ->\n        CustomSnackBar(\n          drawer = message,\n          onOpen = {\n            onSuccess(message.result.data)\n          },\n          containerColor = containerColor,\n          contentColor = contentColor,\n          modifier = Modifier.alpha(0.9f),\n        )\n        if (index != lastIndex) {\n          HorizontalDivider()\n        }\n      }\n    }\n  }\n}\n\n@Composable\ninternal fun CustomSnackBar(\n  drawer: BarcodeResultDrawer,\n  onOpen: () -> Unit,\n  containerColor: Color,\n  contentColor: Color,\n  modifier: Modifier = Modifier,\n) {\n  // 透明背景\n  val clipboardManager = LocalClipboardManager.current\n  val mm = LocalWindowMM.current\n  val scope = rememberCoroutineScope()\n  Box(\n    modifier.background(containerColor.copy(alpha = drawer.bgAlphaAni.value)).clickable {\n      clipboardManager.setText(AnnotatedString(drawer.result.data))\n      scope.launch {\n        mm.showToast(\"已复制到剪切板\")\n      }\n    },\n  ) {\n    Row(\n      modifier = Modifier.fillMaxWidth().padding(vertical = 4.dp, horizontal = 8.dp),\n      verticalAlignment = Alignment.CenterVertically,\n      horizontalArrangement = Arrangement.SpaceBetween\n    ) {\n      Text(\n        text = \"${drawer.index}.\",\n        modifier = Modifier.padding(end = 8.dp),\n        color = contentColor,\n        style = MaterialTheme.typography.bodyMedium,\n      )\n      Text(\n        text = drawer.result.data,\n        color = contentColor,\n        style = MaterialTheme.typography.bodySmall,\n        maxLines = 1,\n        overflow = TextOverflow.Ellipsis,\n        modifier = Modifier.weight(1f),\n      )\n      TextButton(\n        onClick = onOpen,\n        modifier = Modifier.padding(start = 4.dp),\n        colors = ButtonDefaults.textButtonColors(contentColor = contentColor)\n      ) {\n        Text(BrowserI18nResource.QRCode.Action())\n      }\n    }\n  }\n}"},{"language":"kotlin","path":"scan/SmartScanApi.kt","content":"package org.dweb_browser.browser.scan\n\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.helper.PurePoint\nimport org.dweb_browser.helper.PureRect\n\n/**二维码解析管理器*/\nexpect class ScanningController(mmScope: CoroutineScope) {\n  fun stop()\n\n  /**解析二维码*/\n  suspend fun recognize(data: ByteArray, rotation: Int): List<BarcodeResult>\n\n  /**解析二维码时候的震动效果*/\n  fun decodeHaptics()\n}\n\n@Serializable\nclass BarcodeResult(\n  val data: String,\n  val boundingBox: PureRect,\n  val topLeft: PurePoint,\n  val topRight: PurePoint,\n  val bottomLeft: PurePoint,\n  val bottomRight: PurePoint,\n)\n\n/**\n * 打开扫码的结果\n */\nexpect fun openDeepLink(data: String, showBackground: Boolean = false): Boolean"},{"language":"kotlin","path":"scan/SmartScanController.kt","content":"package org.dweb_browser.browser.scan\n\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.ImageBitmap\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlinx.coroutines.ExperimentalCoroutinesApi\nimport kotlinx.coroutines.cancel\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.platform.isMobile\nimport org.dweb_browser.sys.window.core.WindowController\nimport org.dweb_browser.sys.window.core.WindowSurface\nimport org.dweb_browser.sys.window.core.helper.setStateFromManifest\nimport org.dweb_browser.sys.window.core.windowAdapterManager\nimport org.dweb_browser.sys.window.ext.getMainWindowId\nimport org.dweb_browser.sys.window.ext.getOrOpenMainWindow\n\nclass SmartScanController(\n  private val smartScanNMM: SmartScanNMM.ScanRuntime,\n  internal val scanningController: ScanningController\n) {\n\n  private val viewDeferredFlow = MutableStateFlow(CompletableDeferred<WindowController>())\n  private val viewDeferred get() = viewDeferredFlow.value\n  private val winLock = Mutex()\n  var previewTypes by mutableStateOf(SmartModuleTypes.Scanning)\n    private set\n\n  fun updatePreviewType(type: SmartModuleTypes) {\n    previewTypes = type\n  }\n\n  // 用来跟ios形成视图绘画对冲\n  internal val scaleFlow = MutableStateFlow(1f)\n\n  /**\n   * 创建窗口控制器\n   */\n  @OptIn(ExperimentalCoroutinesApi::class)\n  suspend fun getWindowController() = winLock.withLock {\n    if (viewDeferred.isCompleted) {\n      val controller = viewDeferred.getCompleted()\n      if (controller.id == smartScanNMM.getMainWindowId()) {\n        return@withLock controller\n      }\n      viewDeferredFlow.value = CompletableDeferred()\n    }\n\n    smartScanNMM.getOrOpenMainWindow().also { newController ->\n      viewDeferred.complete(newController)\n      newController.setStateFromManifest(smartScanNMM)\n      newController.state.resizable = false // 禁止 resize\n      newController.state.alwaysOnTop = true // 扫码模块置顶\n      /// 提供渲染适配\n      windowAdapterManager.provideRender(newController.id) { modifier ->\n        // 智能扫码\n        this@SmartScanController.scaleFlow.value = scale\n        WindowSurface(modifier) {\n          RenderBarcodeScanning(\n            modifier = Modifier.fillMaxSize(),\n            controller = this@SmartScanController\n          )\n        }\n        // AI识物\n      }\n\n      // 适配各个平台样式 移动端默认最大化\n      when {\n        IPureViewController.isMobile -> {\n          newController.fullscreen()\n        }\n\n        else -> {}\n      }\n      newController.onHidden {\n        onCancel(\"onHidden\")\n      }\n      newController.onClose {\n        viewDeferredFlow.value = CompletableDeferred()\n      }\n    }\n  }\n\n  // 返回识别结果\n  var saningResult = CompletableDeferred<String>()\n\n  // 拿到的解码流\n  val barcodeResultFlow = MutableStateFlow<List<BarcodeResult>>(emptyList())\n\n  // 相册选中的图片\n  val albumImageFlow = MutableStateFlow<ByteArray?>(null)\n\n  /**识别成功*/\n  fun onSuccess(result: String) {\n    saningResult.complete(result)\n    saningResult = CompletableDeferred()\n    closeWindow()\n  }\n\n  fun onCancel(reason: String) {\n    saningResult.cancel(reason)\n    saningResult = CompletableDeferred()\n    closeWindow()\n  }\n\n  private val canCloseWindow get() = viewDeferred.isCompleted\n\n  private fun closeWindow() {\n    cameraController?.stop()  // 暂停\n    smartScanNMM.scopeLaunch(cancelable = true) {\n      if (canCloseWindow) {\n        smartScanNMM.getOrOpenMainWindow().closeRoot()\n      }\n    }\n  }\n\n  /**解码二维码*/\n  suspend fun decodeQrCode(processer: suspend ScanningController.() -> List<BarcodeResult>) {\n    barcodeResultFlow.value = scanningController.processer()\n  }\n\n  // 相机控制器\n  var cameraController: CameraController? = null\n}\n\n\ninterface CameraController {\n  fun toggleTorch()\n  fun openAlbum()\n  fun stop()\n}\n\nenum class SmartModuleTypes {\n  Scanning,\n  Album,\n  Endoscopic\n}"},{"language":"kotlin","path":"scan/SmartScanNMM.kt","content":"package org.dweb_browser.browser.scan\n\nimport io.ktor.http.HttpStatusCode\nimport kotlinx.coroutines.CancellationException\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.core.help.types.DwebPermission\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.core.std.permission.AuthorizationStatus\nimport org.dweb_browser.helper.Debugger\nimport org.dweb_browser.helper.DisplayMode\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.buildUrlString\nimport org.dweb_browser.helper.listen\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.sys.permission.SystemPermissionName\nimport org.dweb_browser.sys.permission.SystemPermissionTask\nimport org.dweb_browser.sys.permission.ext.requestSystemPermissions\nimport org.dweb_browser.sys.window.ext.onRenderer\nimport org.jetbrains.compose.resources.ExperimentalResourceApi\n\nval debugSCAN = Debugger(\"scan.browser\")\n\nclass SmartScanNMM : NativeMicroModule(\"scan.browser.dweb\", \"Smart Scan\") {\n  init {\n    short_name = BrowserI18nResource.QRCode.short_name.text\n    categories = listOf(\n      MICRO_MODULE_CATEGORY.Application,\n    )\n    dweb_protocols = listOf(\"barcode-scanning.sys.dweb\")\n    icons = listOf(\n      ImageResource(src = \"file:///sys/browser-icons/$mmid.svg\", type = \"image/svg+xml\")\n    )\n    display = DisplayMode.Fullscreen\n    dweb_permissions = listOf(\n      DwebPermission(\n        pid = \"$mmid/open\",\n        routes = listOf(\"file://$mmid/open\"),\n        title = BrowserI18nResource.QRCode.permission_tip_camera_title.text,\n        description = BrowserI18nResource.QRCode.permission_tip_camera_message.text\n      )\n    )\n  }\n\n  inner class ScanRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n    @OptIn(ExperimentalResourceApi::class)\n    override suspend fun _bootstrap() {\n      val scanningController = ScanningController(mmScope)\n      // 实现barcodeScanning协议\n      barcodeScanning(scanningController)\n      val scanController = SmartScanController(this, scanningController)\n      onRenderer {\n        val isPermission = requestSystemPermission()\n        if (isPermission) {\n          val controller = scanController.getWindowController()\n          // 渲染扫码页面，在桌面端作用为选择图片文件\n          controller.show()\n          try {\n            val result = scanController.saningResult.await()\n            openDeepLink(result)\n          } catch (e: CancellationException) {\n            debugSCAN(\"onRenderer\", \"Deferred was cancelled=> ${e.message}\")\n          }\n        }\n      }\n\n      routes(\n        /**\n         * 打开扫码界面，并返回扫码字符串\n         */\n        \"/open\" bind PureMethod.GET by defineStringResponse {\n          val isPermission = requestSystemPermission()\n          debugSCAN(\"scan/open\", \"${request.href} isPermission=>$isPermission\")\n          if (isPermission) {\n            // 创建对应的控制器\n            val controller = scanController.getWindowController()\n            controller.show()\n          } else {\n            throwException(\n              HttpStatusCode.Unauthorized,\n              BrowserI18nResource.QRCode.permission_denied.text\n            )\n          }\n          try {\n            scanController.saningResult.await()\n          } catch (e: Exception) {\n            throwException(\n              HttpStatusCode.InternalServerError,\n              e.message\n            )\n          }\n        },\n        \"/parseImage\" bind PureMethod.POST by defineEmptyResponse {\n          val controller = scanController.getWindowController()\n          controller.show()\n          scanController.albumImageFlow.tryEmit(request.body.toPureBinary())\n        }\n      )\n\n      // 获取ShortcutManage发起的open操作\n      ipcConnectedProducer.consumer(\"for-shortcut-scan\").listen { connectEvent ->\n        val (ipc) = connectEvent.consume()\n        ipc.onEvent(\"shortcut-open\").collect {\n          debugSCAN(\"shortcut-open\", \"open scan => from=${ipc.remote.mmid}, name=${it.data.name}\")\n          if (it.data.name == \"shortcut-open\") {\n            nativeFetch(buildUrlString(\"file://desk.browser.dweb/openAppOrActivate\") {\n              parameters[\"app_id\"] = mmid\n            })\n          }\n        }\n      }\n    }\n\n    private suspend fun requestSystemPermission(): Boolean {\n      val permission = requestSystemPermissions(\n        SystemPermissionTask(\n          name = SystemPermissionName.CAMERA,\n          title = BrowserI18nResource.QRCode.permission_tip_camera_title.text,\n          description = BrowserI18nResource.QRCode.permission_tip_camera_message.text\n        )\n      )\n      return permission.filterValues { it != AuthorizationStatus.GRANTED }.isEmpty()\n    }\n\n    override suspend fun _shutdown() {\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext): Runtime {\n    return ScanRuntime(bootstrapContext)\n  }\n}"},{"language":"kotlin","path":"scan/SmartScanRender.kt","content":"package org.dweb_browser.browser.scan\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.animation.core.LinearEasing\nimport androidx.compose.animation.core.RepeatMode\nimport androidx.compose.animation.core.animateFloat\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.infiniteRepeatable\nimport androidx.compose.animation.core.rememberInfiniteTransition\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxScope\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.aspectRatio\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.sizeIn\nimport androidx.compose.foundation.lazy.rememberLazyListState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.AddCircle\nimport androidx.compose.material.icons.twotone.FlashlightOff\nimport androidx.compose.material.icons.twotone.FlashlightOn\nimport androidx.compose.material.icons.twotone.PhotoLibrary\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.FilledTonalIconButton\nimport androidx.compose.material3.FilledTonalIconToggleButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButtonColors\nimport androidx.compose.material3.IconButtonDefaults\nimport androidx.compose.material3.IconToggleButtonColors\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.DisposableEffect\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.mutableStateMapOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.clipToBounds\nimport androidx.compose.ui.draw.rotate\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Path\nimport androidx.compose.ui.graphics.PathEffect\nimport androidx.compose.ui.graphics.PathMeasure\nimport androidx.compose.ui.graphics.StrokeCap\nimport androidx.compose.ui.graphics.StrokeJoin\nimport androidx.compose.ui.graphics.TileMode\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.drawscope.Stroke\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.IntSize\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport kotlinx.coroutines.launch\nimport kotlin.math.max\nimport kotlin.math.min\n\n\ninternal class BarcodeResultDrawer(val index: Int, result: BarcodeResult) {\n  var result by mutableStateOf(result)\n  var visible by mutableStateOf(false)\n  val bgAlphaAni = Animatable(0f)\n}\n\n/**渲染识别后的图片*/\n@Composable\ninternal fun SmartScanController.RenderScanResultView(modifier: Modifier) {\n  // 框出二维码框框的动画效果\n  val infiniteTransition = rememberInfiniteTransition()\n  val animatedOffset by infiniteTransition.animateFloat(\n    initialValue = 0f, targetValue = 1f, animationSpec = infiniteRepeatable(\n      animation = tween(4000, easing = LinearEasing), repeatMode = RepeatMode.Restart\n    )\n  )\n  val resultList by barcodeResultFlow.collectAsState()\n  BoxWithConstraints(modifier = modifier.clipToBounds()) {\n    // 画出框框\n    Canvas(modifier = Modifier.fillMaxSize()) {\n      for (result in resultList) {\n        drawAnimatedBoundingBox(result, animatedOffset)\n      }\n    }\n    // 画出识别到的内容\n    val draws = remember { mutableStateMapOf<String, BarcodeResultDrawer>() }\n    draws.values.forEach { it.visible = false }\n    resultList.forEach {\n      draws.getOrPut(it.data) { BarcodeResultDrawer(draws.size + 1, it) }.apply {\n        result = it\n        visible = true\n      }\n    }\n    LaunchedEffect(draws.size) {\n      scanningController.decodeHaptics()\n    }\n    val listState = rememberLazyListState()\n    val scope = rememberCoroutineScope()\n    for ((key, drawer) in draws) {\n      key(key) {\n        AnimatedVisibility(\n          drawer.visible,\n          enter = fadeIn(),\n          exit = fadeOut(tween(durationMillis = 500, easing = LinearEasing))\n        ) {\n          Box(Modifier.fillMaxSize()) {// 需要一个外壳，否则会错误\n            ScanButtonPreview(\n              onClick = {\n                scope.launch {\n                  launch {\n                    drawer.bgAlphaAni.snapTo(1f)\n                    drawer.bgAlphaAni.animateTo(0f, tween(durationMillis = 1000))\n                  }\n                  listState.animateScrollToItem(draws.size - drawer.index)\n                }\n              },\n              drawer = drawer,\n            )\n          }\n        }\n      }\n    }\n    /// 画出结果列表\n    ChatScreenPreview(listState, draws.values.toList().sortedBy { -it.index })\n  }\n}\n\n/**我是扫码显示内容的按钮，现在还有点丑*/\n@Composable\ninternal fun SmartScanController.ScanButtonPreview(\n  onClick: () -> Unit,\n  drawer: BarcodeResultDrawer,\n  modifier: Modifier = Modifier,\n) {\n  val density = LocalDensity.current.density\n  var textIntSize by remember { mutableStateOf(IntSize.Zero) }\n  val result = drawer.result\n  val size by animateFloatAsState(\n    (max(result.boundingBox.height, result.boundingBox.width) / density)\n  )\n  val offsetX by animateFloatAsState((result.boundingBox.x + result.boundingBox.width / 2) / density)\n  val offsetY by animateFloatAsState((result.boundingBox.y + result.boundingBox.height / 2) / density)\n  val fontSize = min(14f, (size / 2)).sp\n  val colors = ButtonDefaults.filledTonalButtonColors().run {\n    copy(\n      contentColor = contentColor.copy(alpha = 0.9f),\n      containerColor = containerColor.copy(alpha = 0.5f),\n    )\n  }\n  val padding = (fontSize.value / 2).dp\n  Box(\n    modifier = modifier.sizeIn(\n      maxWidth = (result.boundingBox.width * 0.8 / density).dp,\n      maxHeight = (result.boundingBox.height * 0.8 / density).dp,\n    ).aspectRatio(1f).offset(offsetX.dp, offsetY.dp).graphicsLayer {\n      translationX = -textIntSize.width / 2f\n      translationY = -textIntSize.height / 2f\n    }.onGloballyPositioned { textIntSize = it.size }.clip(RoundedCornerShape(padding * 2))\n      .background(colors.containerColor).clickable { onClick() },\n    contentAlignment = Alignment.Center,\n  ) {\n    Text(\n      text = \"${drawer.index}\",\n      maxLines = 1,\n      style = MaterialTheme.typography.bodySmall.copy(\n        fontSize = fontSize, color = colors.contentColor, fontWeight = FontWeight.Bold\n      ),\n      modifier = Modifier.shadow(padding),\n    )\n  }\n}\n\n/**把二维码框出来，必须使用canvas才能画出偏移角度*/\nfun DrawScope.drawAnimatedBoundingBox(barcode: BarcodeResult, animatedOffset: Float) {\n  val path = Path().apply {\n    moveTo(barcode.topLeft.x, barcode.topLeft.y)\n    lineTo(barcode.topRight.x, barcode.topRight.y)\n    lineTo(barcode.bottomRight.x, barcode.bottomRight.y)\n    lineTo(barcode.bottomLeft.x, barcode.bottomLeft.y)\n    close()\n  }\n  val gradient = Brush.linearGradient(\n    colors = listOf(\n      Color(0xFFe91e63), // Pink\n      Color(0xFF9c27b0), // Purple\n      Color(0xFFab397d), // Light Purple\n      Color(0xFF0899f9), // Light Blue\n      Color(0xFF3f51b5), // Indigo\n      Color(0xFFffeb3b), // Yellow\n      Color(0xFF00bcd4), // Cyan\n      Color(0xFF03a9f4), // Blue\n      Color(0xFFffeb3b), // Yellow\n      Color(0xFF2196f3), // Blue\n      Color(0xFFf18842), // Orange\n      Color(0xFF44cadc), // Light Cyan\n      Color(0xFFff9800), // Orange\n      Color(0xFFff5722), // Deep Orange\n      Color(0xFFff9800), // Orange\n      Color(0xFFffeb3b)  // Yellow\n    ), start = Offset(0f, 0f), end = Offset(size.width, size.height), tileMode = TileMode.Repeated\n  )\n  val pathMeasure = PathMeasure()\n  pathMeasure.setPath(path, false)\n\n  val length = pathMeasure.length\n  val segmentLength = 100f  // 移动段的长度\n  val offset = length * animatedOffset\n\n  // 计算段的开始和结束位置\n  val start = offset - segmentLength\n  val dashPathEffect = PathEffect.dashPathEffect(\n    floatArrayOf(segmentLength, length - segmentLength), if (start < 0) length + start else start\n  )\n  drawPath(\n    path = path, brush = gradient, style = Stroke(\n      width = 12f, pathEffect = dashPathEffect, cap = StrokeCap.Round,  // 圆角端点\n      join = StrokeJoin.Round  // 圆角连接\n    )\n  )\n}\n\n/**扫码节目中的扫描线，灯光按钮等UI*/\n@Composable\nfun SmartScanController.DefaultScanningView(modifier: Modifier, showLight: Boolean = true) {\n  Box(modifier = modifier) {\n    ScannerLine() // 添加扫描线\n    CloseIcon { onCancel(\"close\") } // 关闭按钮\n    // 内窥按钮\n//    WarpButton(\n//      alignment = Alignment.BottomStart,\n//      openHandle = {\n//        previewTypes = SmartModuleTypes.Endoscopic\n//      }) {\n//      Icon(\n//        imageVector = Icons.Default.Fullscreen,\n//        contentDescription = \"Endoscopic\",\n//        tint = MaterialTheme.colorScheme.background,\n//        modifier = Modifier.size(22.dp)\n//      )\n//      Text(\n//        text = BrowserI18nResource.QRCode.photo_endoscopic(),\n//        color = MaterialTheme.colorScheme.background,\n//        fontSize = 12.sp\n//      )\n//    }\n\n    Row(\n      Modifier.fillMaxWidth().align(Alignment.BottomCenter).padding(8.dp),\n      horizontalArrangement = Arrangement.SpaceBetween\n    ) {\n      var isTorchOpened by remember { mutableStateOf(false) }\n      FilledTonalIconToggleButton(\n        checked = isTorchOpened,\n        onCheckedChange = {\n          cameraController?.apply {\n            toggleTorch()\n            isTorchOpened = !isTorchOpened\n          }\n        },\n        enabled = showLight,\n        colors = IconButtonDefaults.filledTonalIconToggleButtonColors().run {\n          remember(this) {\n            IconToggleButtonColors(\n              containerColor = containerColor.copy(0.5f),\n              contentColor = contentColor,\n              disabledContainerColor = disabledContainerColor.copy(0.5f),\n              disabledContentColor = disabledContentColor,\n              checkedContainerColor = checkedContainerColor.copy(0.5f),\n              checkedContentColor = checkedContentColor,\n            )\n          }\n        }\n      ) {\n        Icon(\n          if (isTorchOpened) Icons.TwoTone.FlashlightOn else Icons.TwoTone.FlashlightOff,\n          contentDescription = \"Toggle Flashlight\",\n        )\n      }\n\n      FilledTonalIconButton(\n        onClick = {\n          cameraController?.openAlbum()\n        },\n        colors = IconButtonDefaults.filledTonalIconButtonColors().run {\n          remember(this) {\n            IconButtonColors(\n              containerColor = containerColor.copy(0.5f),\n              contentColor = contentColor,\n              disabledContainerColor = disabledContainerColor.copy(0.5f),\n              disabledContentColor = disabledContentColor,\n            )\n          }\n        }\n      ) {\n        Icon(\n          Icons.TwoTone.PhotoLibrary,\n          contentDescription = \"Pick Photo\",\n        )\n      }\n    }\n  }\n}\n\n\n@Composable\nfun ScannerLine() {\n  var linePosition by remember { mutableFloatStateOf(0f) }\n  val infiniteTransition = rememberInfiniteTransition(label = \"\")\n  val animatedLinePosition by infiniteTransition.animateFloat(\n    initialValue = 0f, targetValue = 1f, animationSpec = infiniteRepeatable(\n      animation = tween(durationMillis = 3000), repeatMode = RepeatMode.Restart\n    ), label = \"\"\n  )\n  DisposableEffect(animatedLinePosition) {\n    linePosition = animatedLinePosition\n    onDispose { }\n  }\n  Box(modifier = Modifier.fillMaxSize()) {\n    Canvas(modifier = Modifier.matchParentSize()) {\n      val canvasWidth = size.width\n      val canvasHeight = size.height\n      val lineWidth = canvasWidth * 0.8f\n      val lineHeight = canvasHeight * 0.5f\n      val lineStart = canvasWidth * 0.1f\n      val lineTop = canvasHeight * 0.2f\n\n      drawOval(\n        color = Color.White.copy(alpha = 0.7f),\n        topLeft = Offset(lineStart, lineTop + lineHeight * linePosition),\n        size = Size(lineWidth, 3.dp.toPx()),\n      )\n    }\n  }\n}\n\n@Composable\nprivate fun BoxScope.CloseIcon(onClick: () -> Unit) {\n  Icon(\n    imageVector = Icons.Default.AddCircle,\n    contentDescription = \"Close\",\n    tint = MaterialTheme.colorScheme.background,\n    modifier = Modifier.clickable { onClick() }.padding(16.dp).size(32.dp).rotate(45f)\n      .align(Alignment.TopStart)\n  )\n}"},{"language":"kotlin","path":"search/SearchController.kt","content":"package org.dweb_browser.browser.search\n\nimport org.dweb_browser.helper.SimpleSignal\n\nclass SearchController(private val searchNMM: SearchNMM.SearchRuntime) {\n  private val searchStore = SearchStore(searchNMM)\n\n  internal val searchEngineList = mutableListOf<SearchEngine>()\n  internal val searchInjectList = mutableListOf<SearchInject>()\n\n  // 状态更新信号\n  internal val engineUpdateSignal = SimpleSignal()\n  val onEngineUpdate = engineUpdateSignal.toListener()\n\n  internal val injectUpdateSignal = SimpleSignal()\n  val onInjectUpdate = injectUpdateSignal.toListener()\n\n  init {\n    searchNMM.scopeLaunch(cancelable = true) {\n      searchEngineList.addAll(searchStore.getAllEnginesState())\n      engineUpdateSignal.emit()\n      searchInjectList.addAll(searchStore.getAllInjects())\n      injectUpdateSignal.emit()\n    }\n  }\n\n  /**\n   * 判断当前的关键字是否是引擎，如果是，可以打开搜索界面，并且返回引擎的主页地址\n   */\n  suspend fun enableAndGetEngineHomeLink(key: String): String? {\n    for (item in searchEngineList) {\n      if (item.matchKeyWord(key)) {\n        item.enable = true\n        engineUpdateSignal.emit()\n        searchNMM.scopeLaunch(cancelable = true) { searchStore.saveEngineState(item) }\n        return item.homeLink\n      }\n    }\n    return null\n  }\n\n  /**\n   * 注入内部可搜索数据\n   */\n  suspend fun inject(searchInject: SearchInject): Boolean {\n    searchInjectList.add(searchInject) // TODO 暂时没做去重等操作。\n    injectUpdateSignal.emit()\n    searchNMM.scopeLaunch(cancelable = true) { searchStore.saveInject(searchInjectList) } // 通知监听\n    return true\n  }\n\n  /**\n   * 搜索符合关键字信息都离线搜索，TODO 具体规则待定\n   */\n  suspend fun containsInject(key: String): List<SearchInject> {\n    return searchInjectList.filter { item ->\n      item.name.contains(key)\n    }\n  }\n\n  suspend fun updateSearchEngine(searchEngine: SearchEngine, enable: Boolean) {\n    searchEngineList.firstOrNull { it.homeLink == searchEngine.homeLink }?.let { item ->\n      debugSearch(\"updateSearchEngine\", \"item=$item>>${item.enable} => $enable\")\n      item.enable = enable\n      engineUpdateSignal.emit()\n      searchNMM.scopeLaunch(cancelable = true) { searchStore.saveEngineState(item) }\n    }\n  }\n}"},{"language":"kotlin","path":"search/SearchNMM.kt","content":"package org.dweb_browser.browser.search\n\nimport io.ktor.http.HttpStatusCode\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.http.router.byChannel\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.helper.Debugger\nimport org.dweb_browser.helper.DisplayMode\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.decodeURIComponent\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.queryAs\n\nval debugSearch = Debugger(\"search\")\n\nclass SearchNMM : NativeMicroModule(\"search.browser.dweb\", \"Search Browser\") {\n  init {\n    short_name = BrowserI18nResource.search_short_name.text\n    categories = listOf(MICRO_MODULE_CATEGORY.Web_Browser)\n    icons =\n      listOf(ImageResource(src = \"file:///sys/browser-icons/$mmid.svg\", type = \"image/svg+xml\"))\n    display = DisplayMode.Fullscreen\n  }\n\n  inner class SearchRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n    override suspend fun _bootstrap() {\n      val controller = SearchController(this)\n\n      routes(\n        /**\n         * 判断当前是否属于引擎关键字,如果是，返回首页地址\n         */\n        \"/homeLink\" bind PureMethod.GET by defineStringResponse {\n          val key = request.queryOrNull(\"key\")?.decodeURIComponent()\n            ?: throwException(HttpStatusCode.BadRequest, \"not found key param\")\n          debugSearch(\"browser/enable\", \"key=$key\")\n          controller.enableAndGetEngineHomeLink(key) ?: \"\"\n        },\n        /**\n         * 监听所有可用引擎\n         */\n        \"/observe/engines\" byChannel { ctx ->\n          controller.onEngineUpdate {\n            debugSearch(\"browser\", \"/observe/engines => send\")\n            ctx.sendJsonLine(controller.searchEngineList)\n          }.removeWhen(onClose)\n          controller.engineUpdateSignal.emit()\n        },\n        /**\n         * 搜索都有注入的搜索列表\n         */\n        \"/injectList\" bind PureMethod.GET by defineStringResponse {\n          val key = request.queryOrNull(\"key\")\n            ?: throwException(HttpStatusCode.BadRequest, \"not found key param\")\n          debugSearch(\"browser\", \"/injects key=$key\")\n          Json.encodeToString(controller.containsInject(key))\n        },\n        /**\n         * 修改搜索引擎状态\n         */\n        \"/updateEngineState\" bind PureMethod.POST by defineEmptyResponse {\n          val enable = request.queryBoolean(\"state\", false)\n          val searchEngine = Json.decodeFromString<SearchEngine>(request.body.toPureString())\n          debugSearch(\"browser\", \"/updateEngineState enable=$enable, engine=$searchEngine\")\n          controller.updateSearchEngine(searchEngine, enable)\n        },\n      )\n\n      protocol(\"search.std.dweb\") {\n        routes(\n          /**\n           * 注入离线搜索的内容\n           */\n          \"/inject\" bind PureMethod.POST by defineBooleanResponse {\n            debugSearch(\"std/inject\")\n            val searchInject = request.queryAs<SearchInject>()\n            debugSearch(\"std/inject\", \"injectSearch=$searchInject\")\n            controller.inject(searchInject)\n          }\n        )\n      }\n    }\n\n    override suspend fun _shutdown() {\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = SearchRuntime(bootstrapContext)\n}"},{"language":"kotlin","path":"search/SearchStore.kt","content":"package org.dweb_browser.browser.search\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.graphics.painter.BitmapPainter\nimport dweb_browser_kmp.browser.generated.resources.Res\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_360\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_baidu\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_bing\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_duckgo\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_google\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_sm\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_sogou\nimport dweb_browser_kmp.browser.generated.resources.ic_engine_yahoo\nimport io.ktor.http.Url\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.browser.BrowserDrawResource\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.file.ext.createStore\nimport org.dweb_browser.helper.format\nimport org.dweb_browser.helper.platform.toImageBitmap\nimport org.dweb_browser.helper.toWebUrl\nimport org.jetbrains.compose.resources.DrawableResource\nimport org.jetbrains.compose.resources.painterResource\n\n@Serializable\nenum class SearchEngine(\n  val host: String, // 域名 如：baidu.com, cn.bing.com, www.google.com,\n  val keys: String, // 名称，多个可以使用“逗号”分隔，如 \"baidu,百度\", \"google,谷歌\"\n  val displayName: String,\n  val searchLinks: List<String>,\n  val homeLink: String,\n  private val iconRes: DrawableResource,\n) {\n  Bing(\n    host = \"bing.com\",\n    keys = \"bing,必应,bing.com,www.bing.com,cn.bing.com\",\n    displayName = \"必应\",\n    searchLinks = listOf(\n      \"http://cn.bing.com/search?q=%s\", \"https://www.bing.com/search?q=%s\"\n    ),\n    homeLink = \"https://www.bing.com\",\n    iconRes = Res.drawable.ic_engine_bing\n  ),\n  BaiDu(\n    host = \"baidu.com\",\n    keys = \"baidu,百度,baidu.com,www.baidu.com,m.baidu.com\",\n    displayName = \"百度\",\n    searchLinks = listOf(\"https://m.baidu.com/s?word=%s\", \"https://www.baidu.com/s?wd=%s\"),\n    homeLink = \"https://www.baidu.com\",\n    iconRes = Res.drawable.ic_engine_baidu\n  ),\n  Google(\n    host = \"google.com\",\n    keys = \"Google,谷歌,google.com,www.google.com\",\n    displayName = \"Google\",\n    searchLinks = listOf(\"https://www.google.com/search?q=%s\"),\n    homeLink = \"https://www.google.com\",\n    iconRes = Res.drawable.ic_engine_google\n  ),\n  So360(\n    host = \"so.com\",\n    keys = \"360,so.com,www.so.com,m.so.com\",\n    displayName = \"360\",\n    searchLinks = listOf(\"https://m.so.com/s?q=%s\", \"https://www.so.com/s?q=%s\"),\n    homeLink = \"https://www.so.com/\",\n    iconRes = Res.drawable.ic_engine_360\n  ),\n  SoGou(\n    host = \"sogou.com\",\n    keys = \"sogou,搜狗,sogou.com,www.sogou.com,wap.sogou.com\",\n    displayName = \"搜狗\",\n    searchLinks = listOf(\n      \"https://wap.sogou.com/web/searchList.jsp?keyword=%s\", \"https://www.sogou.com/web?query=%s\"\n    ),\n    homeLink = \"https://www.sogou.com\",\n    iconRes = Res.drawable.ic_engine_sogou\n  ),\n  DuckDuckGo(\n    host = \"duckduckgo.com\",\n    keys = \"DuckDuckGo,duckduckgo.com\",\n    displayName = \"DuckDuckGo\",\n    searchLinks = listOf(\"https://duckduckgo.com/?q=%s\"),\n    homeLink = \"https://duckduckgo.com\",\n    iconRes = Res.drawable.ic_engine_duckgo\n  ),\n  Yahoo(\n    host = \"yahoo.com\",\n    keys = \"yahoo,雅虎,yahoo.com,sg.search.yahoo.com,search.yahoo.com\",\n    displayName = \"雅虎\",\n    searchLinks = listOf(\n      \"https://search.yahoo.com/search?p=%s\", \"https://sg.search.yahoo.com/search?p=%s\"\n    ),\n    homeLink = \"https://sg.search.yahoo.com/\",\n    iconRes = Res.drawable.ic_engine_yahoo\n  ),\n  SM(\n    host = \"m.sm.cn\",\n    keys = \"神马,sm.cn,so.m.sm.cn,m.sm.cn\",\n    displayName = \"神马\",\n    searchLinks = listOf(\"https://so.m.sm.cn/s?q=%s\", \"https://m.sm.cn/s?q=%s\"),\n    homeLink = \"https://so.m.sm.cn\",\n    iconRes = Res.drawable.ic_engine_sm\n  ),\n  ;\n\n  var enable by mutableStateOf(false)\n\n  @Composable\n  fun painter() = painterResource(iconRes)\n\n  fun matchKeyWord(keyWord: String): Boolean {\n    val searchUrls = searchLinks.map { link -> Url(link.format(\"test\")) }\n    return keyWord.toWebUrl()?.let { keyWordUrl ->\n      val searchUrl1 = searchUrls.firstOrNull { it.host == keyWordUrl.host }\n      if (searchUrl1 != null) {\n        searchUrls.firstOrNull { searchUrl ->\n          keyWordUrl.parameters[searchUrl.parameters.names().first()] != null\n        } != null\n      } else false\n    } ?: run {\n      keys.split(\",\").find { it == keyWord } != null\n    }\n  }\n\n  /**\n   * 获取关键字对应的内容，用于搜索栏显示\n   */\n  fun queryKeyWordValue(url: Url): String? {\n    val searchUrls = searchLinks.map { link -> Url(link.format(\"test\")) }\n    return searchUrls.firstOrNull { url.host == it.host }?.let { findUrl ->\n      val keyWord = findUrl.parameters.names().first()\n      url.parameters[keyWord]\n    }\n  }\n}\n\n//@OptIn(ExperimentalResourceApi::class)\n//@Serializable\n//data class SearchEngine(\n//  val host: String, // 域名 如：baidu.com, cn.bing.com, www.google.com,\n//  val keys: String, // 名称，多个可以使用“逗号”分隔，如 \"baidu,百度\", \"google,谷歌\"\n//  val name: String,\n//  val searchLinks: List<String>,\n//  val homeLink: String,\n//  val iconRes: DrawableResource,\n//  var enable: Boolean = false\n//) {\n//  fun matchKeyWord(keyWord: String): Boolean {\n//    val searchUrls = searchLinks.map { link -> Url(link.format(\"test\")) }\n//    return keyWord.toWebUrl()?.let { keyWordUrl ->\n//      val searchUrl1 = searchUrls.firstOrNull { it.host == keyWordUrl.host }\n//      if (searchUrl1 != null) {\n//        searchUrls.firstOrNull { searchUrl ->\n//          keyWordUrl.parameters[searchUrl.parameters.names().first()] != null\n//        } != null\n//      } else false\n//    } ?: run {\n//      keys.split(\",\").find { it == keyWord } != null\n//    }\n//  }\n//\n//  /**\n//   * 获取关键字对应的内容，用于搜索栏显示\n//   */\n//  fun queryKeyWordValue(url: Url): String? {\n//    val searchUrls = searchLinks.map { link -> Url(link.format(\"test\")) }\n//    return searchUrls.firstOrNull { url.host == it.host }?.let { findUrl ->\n//      val keyWord = findUrl.parameters.names().first()\n//      url.parameters[keyWord]\n//    }\n//  }\n//\n//\n//}\n//\n//@OptIn(ExperimentalResourceApi::class)\n//val SearchEngineList = mutableStateListOf(\n//  SearchEngine(\n//    host = \"baidu.com\",\n//    keys = \"baidu,百度,www.baidu.com,m.baidu.com\",\n//    name = \"百度\",\n//    searchLinks = listOf(\n//      \"https://m.baidu.com/s?word=%s\", \"https://www.baidu.com/s?wd=%s\"\n//    ),\n//    homeLink = \"https://www.baidu.com\",\n//    iconRes = Res.drawable.ic_engine_baidu,\n//  ),\n//  SearchEngine(\n//    host = \"bing.com\",\n//    keys = \"bing,必应,www.bing.com,cn.bing.com\",\n//    name = \"必应\",\n//    searchLinks = listOf(\n//      \"http://cn.bing.com/search?q=%s\", \"https://www.bing.com/search?q=%s\"\n//    ),\n//    homeLink = \"https://www.bing.com\",\n//    iconRes = Res.drawable.ic_engine_bing,\n//  ),\n//  SearchEngine(\n//    host = \"sogou.com\",\n//    keys = \"sogou,搜狗,www.sogou.com,wap.sogou.com\",\n//    name = \"搜狗\",\n//    searchLinks = listOf(\n//      \"https://wap.sogou.com/web/searchList.jsp?keyword=%s\", \"https://www.sogou.com/web?query=%s\"\n//    ),\n//    homeLink = \"https://www.sogou.com\",\n//    iconRes = Res.drawable.ic_engine_sogou,\n//  ),\n//  SearchEngine(\n//    host = \"so.com\",\n//    keys = \"360,www.so.com,m.so.com\",\n//    name = \"360\",\n//    searchLinks = listOf(\"https://m.so.com/s?q=%s\", \"https://www.so.com/s?q=%s\"),\n//    homeLink = \"https://www.so.com/\",\n//    iconRes = Res.drawable.ic_engine_360,\n//  ),\n//  SearchEngine(\n//    host = \"google.com\",\n//    keys = \"Google,谷歌,www.google.com\",\n//    name = \"Google\",\n//    searchLinks = listOf(\"https://www.google.com/search?q=%s\"),\n//    homeLink = \"https://www.google.com\",\n//    iconRes = Res.drawable.ic_engine_google,\n//  ),\n//  SearchEngine(\n//    host = \"duckduckgo.com\",\n//    keys = \"DuckDuckGo,duckduckgo.com\",\n//    name = \"DuckDuckGo\",\n//    searchLinks = listOf(\"https://duckduckgo.com/?q=%s\"),\n//    homeLink = \"https://duckduckgo.com\",\n//    iconRes = Res.drawable.ic_engine_duckgo,\n//  ),\n//  SearchEngine(\n//    host = \"yahoo.com\",\n//    keys = \"yahoo,雅虎,sg.search.yahoo.com,search.yahoo.com\",\n//    name = \"雅虎\",\n//    searchLinks = listOf(\n//      \"https://search.yahoo.com/search?p=%s\", \"https://sg.search.yahoo.com/search?p=%s\"\n//    ),\n//    homeLink = \"https://sg.search.yahoo.com/\",\n//    iconRes = Res.drawable.ic_engine_yahoo,\n//  ),\n//  SearchEngine(\n//    host = \"m.sm.cn\",\n//    keys = \"神马,so.m.sm.cn,m.sm.cn\",\n//    name = \"神马\",\n//    searchLinks = listOf(\"https://so.m.sm.cn/s?q=%s\", \"https://m.sm.cn/s?q=%s\"),\n//    homeLink = \"https://so.m.sm.cn\",\n//    iconRes = Res.drawable.ic_engine_sm,\n//  ),\n//)\n\n@Serializable\ndata class SearchInject(\n  val name: String = \"unKnow\", // 表示应用名称\n  val icon: ByteArray? = null, // 表示应用的图标\n  val url: String, // ipc 链接、https 链接\n) {\n  @Composable\n  fun iconPainter() = key(icon) { icon?.toImageBitmap()?.let { BitmapPainter(it) } }\n    ?: BrowserDrawResource.Web.painter()\n}\n\nclass SearchStore(mm: MicroModule.Runtime) {\n  private val keyInject = \"key_inject\"\n  private val storeEngine = mm.createStore(\"engines_state\", false)\n  private val storeInject = mm.createStore(\"inject_engine\", false)\n\n  suspend fun getAllEnginesState(): List<SearchEngine> {\n    val save = storeEngine.getAll<Boolean>()\n    return SearchEngine.entries.onEach { item ->\n      item.enable = save[item.host] ?: false\n    }\n  }\n\n  suspend fun saveEngineState(searchEngine: SearchEngine) {\n    storeEngine.set(searchEngine.host, searchEngine.enable)\n  }\n\n  suspend fun getAllInjects(): MutableList<SearchInject> {\n    return storeInject.getOrPut<MutableList<SearchInject>>(keyInject) {\n      mutableStateListOf()\n    }\n  }\n\n  suspend fun saveInject(list: MutableList<SearchInject>) {\n    storeInject.set(keyInject, list)\n  }\n}"},{"language":"kotlin","path":"util/StringUtil.kt","content":"package org.dweb_browser.browser.util\n\n/**\n * 判断字符串是否是 dweb link\n */\nfun String.regexDeepLink() = Regex(\"dweb:.+\").matchEntire(this.trim())?.groupValues?.firstOrNull()\n"},{"language":"kotlin","path":"web/BrowserApi.kt","content":"package org.dweb_browser.browser.web\n\nimport org.dweb_browser.browser.web.model.DwebLinkSearchItem\n\nexpect fun getImageResourceRootPath(): String\n\n// 通过 search 和 openinbrowser 打开 web 搜索，目前主要是提供给 Ios 操作，Android直接在common实现\nexpect suspend fun deepLinkDoSearch(dwebLinkSearchItem: DwebLinkSearchItem)\n\n/**\n * 该方法的功能是为了打开文件，可以是下载文件，也可以是本地文件\n * @param realPath 打开文件的真实路径\n * @param justInstall 如果为 true 表示只打开安装文件，如果是false，表示打开所有文件\n */\nexpect suspend fun openFileByPath(realPath: String, justInstall: Boolean): Boolean\n\nexpect suspend fun dwebviewProxyPrepare()"},{"language":"kotlin","path":"web/BrowserController.kt","content":"package org.dweb_browser.browser.web\n\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.browser.web.data.AppBrowserTarget\nimport org.dweb_browser.browser.web.data.BrowserStore\nimport org.dweb_browser.browser.web.data.WebLinkManifest\nimport org.dweb_browser.browser.web.data.WebLinkStore\nimport org.dweb_browser.browser.web.data.WebSiteInfo\nimport org.dweb_browser.browser.web.model.BrowserViewModel\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.dwebview.WebDownloadArgs\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.Signal\nimport org.dweb_browser.helper.SimpleSignal\nimport org.dweb_browser.helper.UUID\nimport org.dweb_browser.helper.buildUrlString\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.platform.isMobile\nimport org.dweb_browser.pure.http.IPureBody\nimport org.dweb_browser.pure.http.PureClientRequest\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.sys.toast.ToastPositionType\nimport org.dweb_browser.sys.toast.ext.showToast\nimport org.dweb_browser.sys.window.core.WindowController\nimport org.dweb_browser.sys.window.core.helper.setStateFromManifest\nimport org.dweb_browser.sys.window.core.windowAdapterManager\nimport org.dweb_browser.sys.window.ext.getWindow\n\nclass BrowserController(\n  private val browserNMM: BrowserNMM.BrowserRuntime,\n) {\n  val webLinkStore: WebLinkStore = browserNMM.webLinkStore\n  private val windowVisibleSignal = Signal<Boolean>()\n  val onWindowVisible = windowVisibleSignal.toListener()\n\n  private val closeWindowSignal = SimpleSignal()\n  val onCloseWindow = closeWindowSignal.toListener()\n\n  val downloadController = BrowserDownloadController(browserNMM, this)\n  val viewModel = BrowserViewModel(this, browserNMM)\n  private val browserStore = BrowserStore(browserNMM)\n\n  private var winLock = Mutex(false)\n\n  val lifecycleScope get() = browserNMM.getRuntimeScope()\n\n  val bookmarksStateFlow = MutableStateFlow<List<WebSiteInfo>>(listOf())\n  val historyStateFlow = MutableStateFlow<Map<String, List<WebSiteInfo>>>(mapOf())\n\n  init {\n    lifecycleScope.launch {\n      bookmarksStateFlow.value = browserStore.getBookLinks()\n      historyStateFlow.value = browserStore.getHistoryLinks()\n    }\n  }\n\n  suspend fun loadMoreHistory(offset: Int) {\n    historyStateFlow.value += browserStore.getDaysHistoryLinks(offset)\n  }\n\n  suspend fun saveBookLinks() = browserStore.setBookLinks(bookmarksStateFlow.value)\n\n  suspend fun saveHistoryLinks(key: String, dayList: List<WebSiteInfo>) =\n    browserStore.setHistoryLinks(key, dayList)\n\n//  suspend fun saveSearchEngines() = browserStore.setSearchEngines(searchEngines)\n\n  /**\n   * 窗口是单例模式\n   */\n  private var win: WindowController? = null\n  suspend fun renderBrowserWindow(wid: UUID) = winLock.withLock {\n    browserNMM.getWindow(wid).also { newWin ->\n      if (win == newWin) {\n        return@withLock\n      }\n      viewModel.addNewPageUI() // 第一次渲染需要添加一个HomePage\n      win = newWin\n      newWin.setStateFromManifest(browserNMM)\n\n      /// 移动端默认最大化\n      // TODO 这里应使用屏幕尺寸来判定\n      if (IPureViewController.isMobile) {\n        newWin.maximize()\n      }\n\n      /// 提供渲染适配\n      windowAdapterManager.provideRender(wid) { modifier ->\n        Render(modifier, this)\n\n        // 不能直接将整个应用切换到后台，而是关闭当前应用\n        win?.navigation?.GoBackHandler {\n          win?.tryCloseOrHide()\n        }\n      }\n      newWin.onVisible {\n        windowVisibleSignal.emit(true)\n      }\n      newWin.onHidden {\n        viewModel.hideAllPanel()\n        windowVisibleSignal.emit(false)\n      }\n      newWin.onClose {\n        closeWindowSignal.emit()\n        winLock.withLock {\n          if (newWin == win) {\n            win = null\n          }\n        }\n      }\n    }\n  }\n\n  // 用于获取窗口的视图盒子，对android来说，可以通过这个试图盒子获取activity\n  val viewBox get() = win?.viewBox\n\n  /**\n   * 通过 deeplink 来打开 web browser界面后，需要考虑是否加载\n   */\n  suspend fun tryOpenBrowserPage(url: String, target: AppBrowserTarget = AppBrowserTarget.SELF) {\n    viewModel.openSearchPanelUI(url, target)\n  }\n\n  /**\n   * 将webLink迁移到desk，迁移完成后，本身数据进行删除\n   */\n  suspend fun loadWebLinkApps() {\n    webLinkStore.getAll().map { (_, webLinkManifest) ->\n      addUrlToDesktop(webLinkManifest.copy(\n        url = buildUrlString(\"dweb://openinbrowser\") {\n          parameters[\"url\"] = webLinkManifest.url\n        }\n      ))\n    }\n    webLinkStore.clear()\n  }\n\n  /**\n   * 浏览器添加webLink到桌面\n   */\n  suspend fun addUrlToDesktop(title: String, url: String, icon: String): Boolean {\n    val linkId = WebLinkManifest.createLinkId(url)\n    val webLinkManifest = WebLinkManifest(\n      id = linkId,\n      title = title,\n      url = buildUrlString(\"dweb://openinbrowser\") { parameters[\"url\"] = url },\n      icons = listOf(ImageResource(icon, purpose = \"maskable\"))\n    )\n\n    return addUrlToDesktop(webLinkManifest)\n  }\n\n  suspend fun addUrlToDesktop(webLinkManifest: WebLinkManifest): Boolean {\n    // TODO 直接调用 DesktopNMM 进行存储管理等\n    return browserNMM.nativeFetch(\n      PureClientRequest(\n        href = \"file://desk.browser.dweb/addWebLink\",\n        method = PureMethod.POST,\n        body = IPureBody.from(Json.encodeToString(webLinkManifest))\n      )\n    ).boolean()\n  }\n\n  suspend fun saveStringToStore(key: String, data: String) = browserStore.saveString(key, data)\n  suspend fun getStringFromStore(key: String) = browserStore.getString(key)\n\n  /**\n   * 打开BottomSheetModal\n   */\n  suspend fun openDownloadDialog(args: WebDownloadArgs) =\n    downloadController.openDownloadDialog(args)\n\n  fun showToastMessage(message: String, position: ToastPositionType? = null) =\n    lifecycleScope.launch {\n      browserNMM.showToast(message = message, position = position)\n    }\n}"},{"language":"kotlin","path":"web/BrowserDownloadController.kt","content":"package org.dweb_browser.browser.web\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport io.ktor.http.URLBuilder\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.coroutines.sync.withLock\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.download.model.DownloadStateEvent\nimport org.dweb_browser.browser.download.ext.createDownloadTask\nimport org.dweb_browser.browser.download.ext.downloadProgressFlow\nimport org.dweb_browser.browser.download.ext.existDownloadTask\nimport org.dweb_browser.browser.download.ext.getDownloadTask\nimport org.dweb_browser.browser.download.ext.pauseDownload\nimport org.dweb_browser.browser.download.ext.removeDownload\nimport org.dweb_browser.browser.download.ext.startDownload\nimport org.dweb_browser.browser.web.data.BrowserDownloadItem\nimport org.dweb_browser.browser.web.data.BrowserDownloadStore\nimport org.dweb_browser.browser.web.data.BrowserDownloadType\nimport org.dweb_browser.core.ipc.helper.IpcEvent\nimport org.dweb_browser.dwebview.WebDownloadArgs\nimport org.dweb_browser.helper.PromiseOut\nimport org.dweb_browser.helper.collectIn\nimport org.dweb_browser.helper.trueAlso\nimport org.dweb_browser.helper.valueIn\n\nclass BrowserDownloadController(\n  private val browserNMM: BrowserNMM.BrowserRuntime,\n  private val browserController: BrowserController,\n) {\n  private val downloadStore = BrowserDownloadStore(browserNMM)\n\n  val downloadList: MutableList<BrowserDownloadItem> = mutableStateListOf()\n  val completeList: MutableList<BrowserDownloadItem> = mutableStateListOf()\n  private val newDownloadMaps: HashMap<String, BrowserDownloadItem> = hashMapOf() // 保存当前启动后新增的临时列表\n  var curDownloadItem by mutableStateOf<BrowserDownloadItem?>(null)\n  var alreadyExists by mutableStateOf(false) // 用于判断当前的下载地址是否在 newDownloadMaps 中\n\n  init {\n    // 初始化下载数据\n    browserNMM.scopeLaunch(cancelable = true) {\n      completeList.addAll(downloadStore.getCompleteAll())\n      downloadList.addAll(downloadStore.getDownloadAll())\n      var save = false\n      downloadList.forEach { item ->\n        if (item.state.state.valueIn(DownloadState.Downloading, DownloadState.Paused)) {\n          save = true\n          item.state = item.taskId?.let { browserNMM.getDownloadTask(it)?.status }?.let { status ->\n            if (status.state != DownloadState.Completed && status.current >= 0L) {\n              item.state.copy(current = status.current, total = status.total, state = status.state)\n            } else null // 如果下载状态已完成了，但是当前记录是下载中，目前考虑直接移除重下，TODO 另一中处理方案就是直接打开安装界面？？\n          } ?: run {\n            item.taskId?.let { taskId -> browserNMM.removeDownload(taskId) }\n            item.state.copy(current = 0L, state = DownloadState.Init)\n          }\n        }\n      }\n      if (save) saveDownloadList() // 只保存下载中的内容\n    }\n  }\n\n  /**\n   * 保存下载的数据\n   */\n  private fun saveDownloadList(download: Boolean = true, complete: Boolean = false) {\n    browserNMM.scopeLaunch(cancelable = false) {\n      downloadStore.saveDownloadList(downloadList)\n    }\n  }\n\n  private fun saveCompleteList() {\n    browserNMM.scopeLaunch(cancelable = false) {\n      downloadStore.saveCompleteList(completeList)\n    }\n  }\n\n  private val downloadLock = Mutex()\n\n  /**\n   * 创建任务，如果存在则恢复\n   */\n  suspend fun startDownload(item: BrowserDownloadItem) = downloadLock.withLock {\n    var taskId = item.taskId\n    if (taskId == null || browserNMM.existDownloadTask(taskId)) {\n      val downloadTask = browserNMM.createDownloadTask(\n        item.downloadArgs.url, item.downloadArgs.contentLength, external = true\n      )\n      item.taskId = downloadTask.id\n      taskId = downloadTask.id\n\n      /// 如果重新下载时，需要将 已完成 和 下载中 列表的数据删除，然后将该记录插入到 下载中 的列表\n      completeList.remove(item)\n      saveCompleteList()\n\n      downloadList.remove(item)\n      downloadList.add(0, item)\n      saveCompleteList()\n\n      /// 监听\n      browserNMM.scopeLaunch(cancelable = true) {\n        if (watchProcess(taskId, item)) {\n          // 如果是完成的话，需要添加到 “已下载”列表并保存，如果是其他状态，直接保存“下载中”列表\n          if (downloadTask.status.state == DownloadState.Completed) {\n            downloadList.remove(item)\n            saveDownloadList()\n\n            completeList.add(0, item)\n            item.filePath = downloadTask.filepath // 保存下载路径\n            saveCompleteList()\n          } else {\n            saveDownloadList()\n          }\n        }\n      }\n    }\n\n    browserNMM.startDownload(item.taskId!!)\n  }\n\n  suspend fun pauseDownload(item: BrowserDownloadItem) = item.taskId?.let { taskId ->\n    browserNMM.pauseDownload(taskId)\n  }\n\n\n  private suspend fun watchProcess(\n    taskId: String,\n    browserDownloadItem: BrowserDownloadItem,\n  ): Boolean {\n    var success = false;\n    browserNMM.downloadProgressFlow(taskId).collect { status ->\n      if (status.state == DownloadState.Completed) {\n        success = true\n      }\n      val newStatus = DownloadStateEvent(\n        current = status.current, total = status.total, state = status.state\n      )\n      if (newStatus != browserDownloadItem.state) {\n        browserDownloadItem.state = newStatus\n        saveDownloadList()\n      }\n    }\n    return success\n  }\n\n  fun deleteDownloadItems(list: List<BrowserDownloadItem>) =\n    browserNMM.scopeLaunch(cancelable = true) {\n      list.forEach { item -> item.taskId?.let { taskId -> browserNMM.removeDownload(taskId) } }\n      completeList.removeAll(list)\n      saveCompleteList()\n\n      downloadList.removeAll(list)\n      saveDownloadList()\n    }\n\n  /**\n   * 打开网页下载的提示框\n   */\n  suspend fun openDownloadDialog(webDownloadArgs: WebDownloadArgs) {\n    val urlKey = URLBuilder(webDownloadArgs.url).apply { parameters.clear() }.buildString()\n    alreadyExists = true // 获取状态前，先置为 true\n    curDownloadItem = newDownloadMaps.getOrPut(urlKey) {\n      alreadyExists = false // 如果是属于新增的，那么就是不存在的，状态为 false\n      BrowserDownloadItem(urlKey, downloadArgs = webDownloadArgs).apply {\n        val name = webDownloadArgs.suggestedFilename\n        val suffix = name.split(\".\").last()\n        fileType = BrowserDownloadType.entries.find { downloadType ->\n          downloadType.matchSuffix(suffix)\n        } ?: BrowserDownloadType.Other\n\n        // 名称去重操作\n        var index = 1\n        var tmpName: String = name\n        do {\n          if (downloadList.firstOrNull { it.fileName == tmpName && it.urlKey == urlKey } == null && completeList.firstOrNull { it.fileName == tmpName && it.urlKey == urlKey } == null) {\n            fileName = tmpName\n            break\n          }\n          tmpName = name.substringBeforeLast(\".\") + \"_${index}.\" + suffix\n          index++\n        } while (true)\n      }\n    }\n  }\n\n  /**\n   * 隐藏网页下载的提示框\n   */\n  fun closeDownloadDialog() {\n    curDownloadItem = null\n    alreadyExists = false\n  }\n\n  /**\n   * 用于响应点击“下载中”列表的按钮\n   */\n  fun clickDownloadButton(downloadItem: BrowserDownloadItem) =\n    browserNMM.scopeLaunch(cancelable = true) {\n      when (downloadItem.state.state) {\n        DownloadState.Completed -> {\n          openFileOnDownload(downloadItem) // 直接调用系统级别的打开文件操作\n        }\n\n        DownloadState.Downloading -> {\n          pauseDownload(downloadItem)\n        }\n\n        else -> {\n          startDownload(downloadItem)\n        }\n      }\n    }\n\n  /**\n   * 用于响应重新下载操作，主要就是网页点击下载后，如果判断列表中已经存在下载数据时调用\n   */\n  fun clickRetryButton(downloadItem: BrowserDownloadItem) =\n    browserNMM.scopeLaunch(cancelable = true) {\n      // 将状态进行修改下，然后启动下载\n      alreadyExists = false\n      if (downloadItem.state.state != DownloadState.Init) {\n        downloadItem.taskId?.let { taskId ->\n          browserNMM.removeDownload(taskId)\n          downloadItem.taskId = null\n        }\n        downloadItem.state = downloadItem.state.copy(state = DownloadState.Init, current = 0L)\n        clickDownloadButton(downloadItem)\n      }\n    }\n\n  /// TODO waterbang fix this\n  suspend fun shareDownloadItem(downloadItem: BrowserDownloadItem): Boolean {\n    val ipc = browserNMM.connect(\"share.sys.dweb\")\n    ipc.postMessage(\n      IpcEvent.fromUtf8(\"shareLocalFile\", downloadItem.filePath)\n    )\n    val sharePromiseOut = PromiseOut<String>()\n    ipc.onEvent(\"shareLocalFile\").collectIn(browserNMM.getRuntimeScope()) { event ->\n      event.consumeFilter { ipcEvent ->\n        (ipcEvent.name == \"shareLocalFile\").trueAlso {\n          sharePromiseOut.resolve(ipcEvent.data as String)\n          ipc.close()\n        }\n      }\n    }\n    return sharePromiseOut.waitPromise() == \"success\"\n  }\n\n  suspend fun openFileOnDownload(downloadItem: BrowserDownloadItem) =\n    openFileByPath(realPath = downloadItem.filePath, justInstall = false)\n}\n"},{"language":"kotlin","path":"web/BrowserNMM.kt","content":"package org.dweb_browser.browser.web\n\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.data.AppBrowserTarget\nimport org.dweb_browser.browser.web.data.WebLinkStore\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.http.router.bindDwebDeeplink\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.dns.nativeFetchAdaptersManager\nimport org.dweb_browser.core.std.file.ext.RespondLocalFileContext.Companion.respondLocalFile\nimport org.dweb_browser.helper.Debugger\nimport org.dweb_browser.helper.DisplayMode\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.sys.window.ext.onRenderer\nimport org.dweb_browser.sys.window.ext.openMainWindow\n\nval debugBrowser = Debugger(\"browser\")\n\n/**\n * TODO 这个模块应该进一步抽象，从而共享给IOS侧\n */\nclass BrowserNMM : NativeMicroModule(\"web.browser.dweb\", \"Web Browser\") {\n  init {\n    short_name = BrowserI18nResource.browser_short_name.text\n    dweb_deeplinks = listOf(\"dweb://search\", \"dweb://openinbrowser\")\n    categories = listOf(MICRO_MODULE_CATEGORY.Application, MICRO_MODULE_CATEGORY.Web_Browser)\n    icons = listOf(\n      ImageResource(src = \"file:///sys/browser-icons/$mmid.svg\", type = \"image/svg+xml\")\n    )\n    display = DisplayMode.Fullscreen\n\n    /// 提供图标文件的适配器。注意，这里不需要随着 BrowserNMM bootstrap 来安装，而是始终有效。\n    /// 因为只要存在 BrowserNMM 这个模块，那么就会有桌面链接图标\n    nativeFetchAdaptersManager.append(order = 5) { fromMM, request ->\n      return@append request.respondLocalFile {\n        if (filePath.startsWith(\"/web_icons/\")) {\n          debugBrowser(\"IconFile\", \"$fromMM => ${request.href}\")\n          returnFile(getImageResourceRootPath(), filePath.substring(\"/web_icons/\".length))\n        } else returnNext()\n      }\n    }\n  }\n\n  inner class BrowserRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n\n    val webLinkStore = WebLinkStore(this)\n    val browserController = BrowserController(this)\n    override suspend fun _bootstrap() {\n      // 用于修复iOS新版桌面如果启动之后直接使用browser会导致代理为启动\n      dwebviewProxyPrepare()\n\n      // 由于 WebView创建需要在主线程，所以这边做了 withContext 操作\n      browserController.loadWebLinkApps()\n\n      onRenderer {\n        browserController.renderBrowserWindow(wid)\n      }\n      val openBrowser = defineBooleanResponse {\n        debugBrowser(\"do openinbrowser\", request.href)\n        val url = request.queryOrNull(\"url\") ?: return@defineBooleanResponse false\n        openMainWindow()\n        val target = request.queryOrNull(\"target\")?.let { AppBrowserTarget.ALL[it] }\n          ?: AppBrowserTarget.BLANK\n        browserController.tryOpenBrowserPage(url = url, target = target)\n        true\n      }\n      val searchBrowser = defineBooleanResponse {\n        debugBrowser(\"do search\", request.href)\n        val url = request.queryOrNull(\"q\") ?: return@defineBooleanResponse false\n        openMainWindow()\n        browserController.tryOpenBrowserPage(url = url, target = AppBrowserTarget.SELF)\n        true\n      }\n      routes(\n        \"search\" bindDwebDeeplink searchBrowser,\n        \"/search\" bind PureMethod.GET by searchBrowser,\n        \"openinbrowser\" bindDwebDeeplink openBrowser,\n        \"/openinbrowser\" bind PureMethod.GET by openBrowser\n      )\n    }\n\n    override suspend fun _shutdown() {\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = BrowserRuntime(bootstrapContext)\n}"},{"language":"kotlin","path":"web/BrowserViewRender.kt","content":"package org.dweb_browser.browser.web\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport org.dweb_browser.browser.web.model.BrowserViewModel\nimport org.dweb_browser.browser.web.ui.BrowserDownloadDialog\nimport org.dweb_browser.sys.window.core.WindowContentRenderScope\n\n@Composable\nfun BrowserController.Render(modifier: Modifier, windowRenderScope: WindowContentRenderScope) {\n  CommonBrowserView(viewModel, modifier, windowRenderScope)\n  downloadController.BrowserDownloadDialog()\n}\n\n@Composable\nexpect fun CommonBrowserView(\n  viewModel: BrowserViewModel,\n  modifier: Modifier,\n  windowRenderScope: WindowContentRenderScope,\n)\n\n"},{"language":"kotlin","path":"web/BrowserWebLinkNMM.kt","content":"package org.dweb_browser.browser.web\n\nimport org.dweb_browser.browser.web.data.WebLinkManifest\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\n\n/**\n * 仅用于添加到桌面后，能够点击打开 web\n */\nclass WebLinkMicroModule(webLink: WebLinkManifest) : NativeMicroModule(webLink.id, webLink.title) {\n  init {\n    short_name = webLink.title\n    categories = listOf(MICRO_MODULE_CATEGORY.Application, MICRO_MODULE_CATEGORY.Web_Browser)\n    icons = webLink.icons\n    homepage_url = webLink.url\n  }\n\n  inner class WebLinkRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n    override suspend fun _bootstrap() {\n      /// TODO 在浏览器中打开新的Tab页面，或者如果能找到url完全一样的，就直接聚焦那个页面\n    }\n\n    override suspend fun _shutdown() {\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = WebLinkRuntime(bootstrapContext)\n}"},{"language":"kotlin","path":"zip/ZipApi.kt","content":"package org.dweb_browser.browser.zip\n\nexpect fun decompress(zipFilePath: String, destPath: String): Boolean"},{"language":"kotlin","path":"zip/ZipNMM.kt","content":"package org.dweb_browser.browser.zip\n\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.file.ext.moveFile\nimport org.dweb_browser.core.std.file.ext.realPath\nimport org.dweb_browser.helper.Debugger\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.helper.falseAlso\nimport org.dweb_browser.pure.http.PureMethod\n\nclass ZipNMM : NativeMicroModule(\"zip.browser.dweb\", \"Zip\") {\n  init {\n    short_name = \"Zip存档管理\"\n    categories = listOf(\n      MICRO_MODULE_CATEGORY.Service\n    )\n    icons = listOf(ImageResource(src = \"file:///sys/icons/$mmid.svg\", type = \"image/svg+xml\"))\n  }\n\n  inner class ZipRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n    override suspend fun _bootstrap() {\n      routes(\n        \"/decompress\" bind PureMethod.GET by defineEmptyResponse {\n          val sourcePath = realPath(request.query(\"sourcePath\"))\n          val targetPath = realPath(request.query(\"targetPath\"))\n          // 先解压到一个临时目录\n          val tmpVfsPath = \"/data/tmp/${targetPath.name}\"\n          // 获取真实目录\n          val tmpPath = realPath(tmpVfsPath)\n          // 开始解压\n          val ok = decompress(sourcePath.toString(), tmpPath.toString())\n          if (!ok) {\n            throwException(message = \"decompress fail\")\n          }\n          moveFile(tmpVfsPath, targetPath.toString()).falseAlso {\n            throwException(message = \"moveFile fail\")\n          }\n        }\n      )\n    }\n\n    override suspend fun _shutdown() {\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = ZipRuntime(bootstrapContext)\n}\n"},{"language":"kotlin","path":"common/loading/LoadingView.kt","content":"package org.dweb_browser.browser.common.loading\n\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.aspectRatio\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.DisposableEffect\nimport androidx.compose.runtime.MutableState\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.StrokeCap\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.helper.compose.NativeBackHandler\nimport org.dweb_browser.helper.compose.rememberScreenSize\nimport kotlin.math.PI\nimport kotlin.math.cos\nimport kotlin.math.sin\n\n@Composable\nfun LoadingView(show: MutableState<Boolean>) {\n  LoadingView(show.value) { show.value = false }\n}\n\n@Composable\nfun LoadingView(isShow: Boolean, onDismissRequest: () -> Unit) {\n  if (isShow) {\n    val colors = LoadingViewModel.rememberColors()\n    DisposableEffect(LoadingViewModel) {\n      LoadingViewModel.startTimer()\n      onDispose {\n        LoadingViewModel.timerDestroy()\n      }\n    }\n    NativeBackHandler {\n      onDismissRequest()\n    }\n    val width = rememberScreenSize().screenWidth\n    val rotateAngle = (360 / LoadingViewModel.COUNT).toDouble()\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n      //1284总宽度  计划宽度：209    17宽 38长     106     17/53  38/53\n      Box(\n        modifier = Modifier\n          .width((width * 0.16f).dp)\n          .aspectRatio(1f)\n          .clip(RoundedCornerShape(10.dp))\n          .background(MaterialTheme.colorScheme.background),\n        contentAlignment = Alignment.Center\n      ) {\n        Canvas(modifier = Modifier.fillMaxWidth(0.50f).aspectRatio(1f) /* 横纵比 */) {\n          val radius = size.width / 2 // 绘制区域的半径\n          // 圆弧形的矩形 长度\n          val drawWidth = radius / 2 // 圆弧矩形的长度 半径的一半\n          // 圆弧形的矩形 宽度\n          val strokeWidth = radius / 4 // 圆弧矩形的宽度 0.32*r\n          val curIndex = LoadingViewModel.startIndex\n          for (index in curIndex until curIndex + LoadingViewModel.COUNT) {\n            // 中心点的坐标是 (radius, radius)，计算弧度 radians\n            val radians = -rotateAngle * index * PI / 180 // 负号是为了顺时间\n            val startX = (radius + (radius - drawWidth) * cos(radians)).toFloat()\n            val startY = (radius - (radius - drawWidth) * sin(radians)).toFloat()\n            val endX = (radius + radius * cos(radians)).toFloat()\n            val endY = (radius - radius * sin(radians)).toFloat()\n            val color = colors[index - curIndex]\n            drawLine(\n              color = color,\n              start = Offset(startX, startY),\n              end = Offset(endX, endY),\n              cap = StrokeCap.Round,\n              strokeWidth = strokeWidth,\n            )\n          }\n        }\n      }\n    }\n  }\n}"},{"language":"kotlin","path":"common/loading/LoadingViewModel.kt","content":"package org.dweb_browser.browser.common.loading\n\nimport androidx.compose.foundation.isSystemInDarkTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.graphics.Color\nimport kotlinx.atomicfu.atomic\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.helper.globalDefaultScope\n\nobject LoadingViewModel {\n  private var isRunning: Boolean = false\n  const val COUNT = 8\n\n  private val whiteList = mutableListOf(\n    Color(0xFFCCCCCC),\n    Color(0xD6CCCCCC),\n    Color(0xB8CCCCCC),\n    Color(0x99CCCCCC),\n    Color(0x7ACCCCCC),\n    Color(0x5CCCCCCC),\n    Color(0x3DCCCCCC),\n    Color(0x1FCCCCCC)\n  )\n\n  private val blackList = mutableListOf(\n    Color(0xFF000000),\n    Color(0xD6000000),\n    Color(0xB8000000),\n    Color(0x99000000),\n    Color(0x7A000000),\n    Color(0x5C000000),\n    Color(0x3D000000),\n    Color(0x1F000000),\n  )\n\n  @Composable\n  fun rememberColors(): List<Color> {\n    return if (isSystemInDarkTheme()) whiteList else blackList\n  }\n\n  // val mTicker = mutableStateOf(0L)\n  private val atomicIndex = atomic(0)\n  var startIndex by mutableStateOf(atomicIndex.value)\n\n  /**\n   * 支付倒计时\n   */\n  fun startTimer() {\n    isRunning = true\n    globalDefaultScope.launch {\n      startIndex = 0\n      while (isRunning) {\n        delay(100)\n        startIndex = atomicIndex.addAndGet(1)\n      }\n    }\n  }\n\n  fun timerDestroy() {\n    isRunning = false\n    // mTicker.value = datetimeNow()\n  }\n}"},{"language":"kotlin","path":"data/render/DataControllerRender.kt","content":"package org.dweb_browser.browser.data.render\n\nimport androidx.compose.animation.AnimatedContent\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\nimport androidx.compose.animation.SharedTransitionLayout\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.adaptive.ExperimentalMaterial3AdaptiveApi\nimport androidx.compose.material3.adaptive.layout.AnimatedPane\nimport androidx.compose.material3.adaptive.layout.ListDetailPaneScaffold\nimport androidx.compose.material3.adaptive.layout.ListDetailPaneScaffoldRole\nimport androidx.compose.material3.adaptive.layout.PaneAdaptedValue\nimport androidx.compose.material3.adaptive.navigation.rememberListDetailPaneScaffoldNavigator\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport org.dweb_browser.browser.data.DataController\nimport org.dweb_browser.browser.data.DataI18n\nimport org.dweb_browser.helper.compose.NoDataRender\nimport org.dweb_browser.sys.window.core.LocalWindowController\nimport org.dweb_browser.sys.window.core.WindowContentRenderScope\nimport org.dweb_browser.sys.window.core.WindowContentScaffoldWithTitleText\nimport org.dweb_browser.sys.window.core.WindowSurface\nimport org.dweb_browser.sys.window.core.withRenderScope\n\n@OptIn(ExperimentalMaterial3AdaptiveApi::class, ExperimentalSharedTransitionApi::class)\n@Composable\nfun DataController.Render(modifier: Modifier, windowRenderScope: WindowContentRenderScope) {\n  val navigator = rememberListDetailPaneScaffoldNavigator<DataController.ProfileDetail>()\n  LocalWindowController.current.navigation.GoBackHandler(enabled = navigator.canNavigateBack()) {\n    navigator.navigateBack()\n  }\n\n  val isListAndDetailVisible =\n    navigator.scaffoldValue[ListDetailPaneScaffoldRole.Detail] == PaneAdaptedValue.Expanded && navigator.scaffoldValue[ListDetailPaneScaffoldRole.List] == PaneAdaptedValue.Expanded\n\n  SharedTransitionLayout {\n    AnimatedContent(isListAndDetailVisible, label = \"Data Manager\") {\n      ListDetailPaneScaffold(\n        directive = navigator.scaffoldDirective,\n        value = navigator.scaffoldValue,\n        modifier = modifier.withRenderScope(windowRenderScope),\n        listPane = {\n          AnimatedPane {\n            ListRender { profileDetail ->\n              navigator.navigateTo(ListDetailPaneScaffoldRole.Detail, profileDetail)\n            }\n          }\n        },\n        detailPane = {\n          AnimatedPane {\n            when (val profileDetail = navigator.currentDestination?.content) {\n              null -> WindowContentRenderScope.Unspecified.WindowSurface {\n                Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                  Text(DataI18n.select_profile_for_detail_view())\n                }\n              }\n\n              else -> WindowContentRenderScope.Unspecified.WindowContentScaffoldWithTitleText(\n                Modifier.fillMaxSize(), topBarTitleText = profileDetail.short_name\n              ) { paddingValues ->\n                Box(Modifier.fillMaxSize().padding(paddingValues)) {\n                  NoDataRender(DataI18n.no_support_detail_view())\n                }\n              }\n            }\n          }\n        },\n      )\n    }\n  }\n\n  DeleteDialogRender()\n}\n"},{"language":"kotlin","path":"data/render/DataDeleteDialogRender.kt","content":"package org.dweb_browser.browser.data.render\n\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.twotone.DeleteForever\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.FilledTonalButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.data.DataController\nimport org.dweb_browser.browser.data.DataI18n\nimport org.dweb_browser.helper.compose.CommonI18n\nimport org.dweb_browser.helper.compose.collectAsMutableState\n\n@Composable\nfun DataController.DeleteDialogRender() {\n  val deleteProfile by deleteProfileFlow.collectAsState()\n  when (val profileInfo = deleteProfile) {\n    null -> {}\n    else -> {\n      var deleteJob by deleteJobFlow.collectAsMutableState()\n      val isRunning by isRunningFlow.collectAsState()\n      val appName = when (profileInfo) {\n        is DataController.ProfileBase -> profileInfo.mmid\n        is DataController.ProfileDetail -> profileInfo.short_name\n      }\n      AlertDialog(\n        { closeDeleteDialog() },\n        title = {\n          when {\n            isRunning -> Text(DataI18n.uninstall_running_app_title())\n            else -> Text(CommonI18n.warning())\n          }\n        },\n        text = {\n          when {\n            isRunning -> Text(DataI18n.uninstall_running_app_tip(appName))\n            else -> Text(DataI18n.uninstall_app_tip (appName))\n          }\n        },\n        confirmButton = {\n          FilledTonalButton(\n            {\n              deleteJobFlow.value = storeNMM.scopeLaunch(cancelable = true) {\n                storeNMM.bootstrapContext.dns.close(profileInfo.mmid)\n                deleteProfile(profileInfo)\n                closeDeleteDialog()\n              }\n            },\n            enabled = deleteJob == null,\n            colors = ButtonDefaults.filledTonalButtonColors(contentColor = MaterialTheme.colorScheme.error),\n          ) {\n            Row(verticalAlignment = Alignment.CenterVertically) {\n              when (deleteJob) {\n                null -> Icon(\n                  Icons.TwoTone.DeleteForever, contentDescription = \"kill and delete profile\"\n                )\n\n                else -> CircularProgressIndicator(\n                  modifier = Modifier.size(24.dp),\n                  color = MaterialTheme.colorScheme.secondary,\n                  trackColor = MaterialTheme.colorScheme.surfaceVariant,\n                )\n              }\n              Text(\"关停并清除\")\n            }\n\n          }\n        },\n        dismissButton = {\n          Button({\n            deleteJob?.cancel()\n            deleteJob = null\n            closeDeleteDialog()\n          }) {\n            Text(CommonI18n.cancel())\n          }\n        },\n      )\n    }\n  }\n}\n"},{"language":"kotlin","path":"data/render/DataListRender.kt","content":"package org.dweb_browser.browser.data.render\n\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Refresh\nimport androidx.compose.material.icons.twotone.DeleteForever\nimport androidx.compose.material.icons.twotone.Image\nimport androidx.compose.material.icons.twotone.MoreHoriz\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.ListItem\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.material3.LocalTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.text.AnnotatedString\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.font.FontStyle\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.data.DataController\nimport org.dweb_browser.browser.data.DataI18n\nimport org.dweb_browser.core.std.file.ext.blobFetchHook\nimport org.dweb_browser.helper.compose.CommonI18n\nimport org.dweb_browser.helper.compose.SwipeToViewBox\nimport org.dweb_browser.helper.compose.rememberSwipeToViewBoxState\nimport org.dweb_browser.sys.window.core.WindowContentRenderScope\nimport org.dweb_browser.sys.window.core.WindowContentScaffoldWithTitleText\nimport org.dweb_browser.sys.window.render.AppLogo\n\n@Composable\nfun DataController.ListRender(goToDetail: (DataController.ProfileDetail) -> Unit) {\n  WindowContentRenderScope.Unspecified.WindowContentScaffoldWithTitleText(\n    Modifier.fillMaxSize(),\n    topBarTitleText = \"数据列表\",\n    topBarActions = {\n      IconButton({ refresh() }) {\n        Icon(Icons.Default.Refresh, contentDescription = \"refresh list\")\n      }\n    }) { paddingValues ->\n    var isLoading by remember { mutableStateOf(true) }\n    var profileInfos by remember { mutableStateOf<List<DataController.ProfileInfo>>(emptyList()) }\n    LaunchedEffect(isLoading, refreshFlow.collectAsState().value) {\n      profileInfos = loadProfileInfos()\n      isLoading = false\n    }\n    when {\n      isLoading -> Box(\n        Modifier.fillMaxSize().padding(paddingValues), contentAlignment = Alignment.Center\n      ) {\n        Text(\"数据加载中……\")\n      }\n\n      profileInfos.isEmpty() -> Box(\n        Modifier.fillMaxSize().padding(paddingValues), contentAlignment = Alignment.Center\n      ) {\n        Text(\"暂无数据\")\n      }\n\n      else -> LazyColumn(Modifier.fillMaxSize().padding(paddingValues)) {\n        itemsIndexed(\n          profileInfos,\n          key = { _, profileInfo -> profileInfo.profileName.key },\n        ) { index, profileInfo ->\n          val mmidText: @Composable () -> AnnotatedString = {\n            profileInfo.profileName.profile?.let { alias ->\n              buildAnnotatedString {\n                append(profileInfo.mmid)\n                withStyle(LocalTextStyle.current.toSpanStyle()\n                  .run { copy(fontSize = fontSize * 0.8f, fontStyle = FontStyle.Italic) }) {\n                  append(\" ($alias)\")\n                }\n              }\n            } ?: AnnotatedString(profileInfo.mmid)\n          }\n          val state = rememberSwipeToViewBoxState()\n          val scope = rememberCoroutineScope()\n\n          val trailingContent: @Composable () -> Unit = {\n            IconButton({\n              state.toggleJob()\n            }) {\n              Icon(Icons.TwoTone.MoreHoriz, \"open menu\")\n            }\n          }\n          if (index > 0) {\n            HorizontalDivider()\n          }\n          SwipeToViewBox(state, backgroundContent = {\n            Row {\n              TextButton(\n                onClick = {\n                  scope.launch {\n                    openDeleteDialog(profileInfo)\n                  }\n                },\n                modifier = Modifier.fillMaxHeight(),\n                colors = ButtonDefaults.textButtonColors(\n                  containerColor = MaterialTheme.colorScheme.errorContainer,\n                  contentColor = MaterialTheme.colorScheme.error\n                ),\n                shape = RectangleShape,\n//                enabled = deleteJob == null,\n              ) {\n                Column(\n                  Modifier.padding(horizontal = 8.dp),\n                  verticalArrangement = Arrangement.spacedBy(4.dp),\n                  horizontalAlignment = Alignment.CenterHorizontally,\n                ) {\n                  Icon(Icons.TwoTone.DeleteForever, \"delete\")\n                  Text(CommonI18n.delete())\n                }\n              }\n            }\n          }) {\n            when (profileInfo) {\n              is DataController.ProfileBase -> ListItem(\n                headlineContent = {\n                  Text(\n                    DataI18n.uninstalled(),\n                    fontStyle = FontStyle.Italic,\n                    color = LocalContentColor.current.copy(alpha = 0.8f)\n                  )\n                },\n                supportingContent = {\n                  Text(mmidText())\n                },\n                trailingContent = trailingContent,\n              )\n\n              is DataController.ProfileDetail -> ListItem(\n                leadingContent = {\n                  // TODO MicroModule Icon\n                  AppLogo.fromResources(\n                    profileInfo.icons,\n                    fetchHook = storeNMM.blobFetchHook,\n                    base = AppLogo(errorContent = {\n                      Icon(Icons.TwoTone.Image, profileInfo.short_name)\n                    })\n                  ).toIcon().Render(Modifier.size(32.dp))\n                },\n                modifier = Modifier.clickable { goToDetail(profileInfo) },\n                headlineContent = { Text(profileInfo.short_name) },\n                supportingContent = { Text(mmidText()) },\n                trailingContent = trailingContent,\n              )\n            }\n          }\n        }\n      }\n    }\n  }\n}"},{"language":"kotlin","path":"desk/ext/MicroModuleActivity.kt","content":"package org.dweb_browser.browser.desk.ext\n\nimport org.dweb_browser.browser.desk.ActivityController\nimport org.dweb_browser.browser.desk.DeskNMM\nimport org.dweb_browser.browser.desk.model.ActivityItem\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.helper.falseAlso\n\nprivate suspend fun MicroModule.Runtime.getCurrentActivityController(): ActivityController {\n  bootstrapContext.dns.open(\"activity.sys.dweb\").falseAlso {\n    throw Exception(\"activity.sys.dweb no working\")\n  }\n  return DeskNMM.controllersMap.values.last().activityController\n}\n\nsuspend fun MicroModule.Runtime.requestActivity(\n  leadingIcon: ActivityItem.Icon = ActivityItem.NoneIcon,\n  trailingIcon: ActivityItem.Icon,\n  centerTitle: ActivityItem.Content,\n  bottomActions: List<ActivityItem.Action> = emptyList(),\n): String {\n  return getCurrentActivityController().request(\n    ActivityItem(\n      owner = this,\n      leadingIcon = leadingIcon,\n      trailingIcon = trailingIcon,\n      centerTitle = centerTitle,\n      bottomActions = bottomActions,\n    )\n  )\n}\n\nsuspend fun MicroModule.Runtime.updateActivity(\n  id: String,\n  leadingIcon: ActivityItem.Icon? = null,\n  trailingIcon: ActivityItem.Icon? = null,\n  centerTitle: ActivityItem.Content? = null,\n  bottomActions: List<ActivityItem.Action>? = null,\n): Boolean {\n  return getCurrentActivityController().update(\n    owner = this,\n    id = id,\n    leadingIcon = leadingIcon,\n    trailingIcon = trailingIcon,\n    centerTitle = centerTitle,\n    bottomActions = bottomActions,\n  )\n}\n\nsuspend fun MicroModule.Runtime.endActivity(\n  id: String,\n): Boolean {\n  return getCurrentActivityController().end(\n    owner = this,\n    id = id,\n  )\n}"},{"language":"kotlin","path":"desk/model/ActivityModel.kt","content":"package org.dweb_browser.browser.desk.model\n\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.helper.randomUUID\nimport org.dweb_browser.sys.window.core.helper.pickLargest\nimport org.dweb_browser.sys.window.core.helper.toStrict\n\nclass ActivityItem(\n  val key: String = randomUUID(),\n  val owner: MicroModule.Runtime,\n  leadingIcon: Icon,\n  trailingIcon: Icon,\n  centerTitle: Content,\n  bottomActions: List<Action> = emptyList(),\n) {\n  val id get() = \"${owner.id}:$key\"\n  var leadingIcon by mutableStateOf(leadingIcon)\n  var trailingIcon by mutableStateOf(trailingIcon)\n  var centerTitle by mutableStateOf(centerTitle)\n  var bottomActions by mutableStateOf(bottomActions)\n\n  @Serializable\n  sealed interface Icon\n\n  @Serializable\n  @SerialName(\"none\")\n  data object NoneIcon : Icon\n\n  /**\n   * 支持动态图片，比如 Gif/WebP\n   */\n  @Serializable\n  @SerialName(\"image\")\n  class ImageIcon(val url: String) : Icon\n\n  class ComposeIcon(val content: @Composable (Modifier) -> Unit) : Icon\n\n  @Serializable\n  sealed interface Content\n\n  @Serializable\n  @SerialName(\"text\")\n  class TextContent(val text: String) : Content\n\n  @Serializable\n  sealed interface Action\n\n  @Serializable\n  @SerialName(\"cancel\")\n  class CancelAction(val text: String, val uri: String?) : Action\n\n  @Serializable\n  @SerialName(\"confirm\")\n  class ConfirmAction(val text: String, val uri: String?) : Action\n\n  @Serializable\n  @SerialName(\"link\")\n  class LinkAction(val text: String, val uri: String) : Action\n\n  @Transient\n  val renderProp = ActivityItemRenderProp()\n  val appIcon by lazy { owner.icons.toStrict().pickLargest() }\n}\n\nclass ActivityItemRenderProp {\n  var open by mutableStateOf(true)\n  val viewAni = Animatable(0f)\n  var showDetail by mutableStateOf(false)\n  val detailAni = Animatable(0f)\n  val viewAniRunning get() = viewAni.isRunning || viewAni.value != 0f\n  val viewAniFinished get() = !viewAni.isRunning && viewAni.value == 1f\n  val detailAniRunning get() = detailAni.isRunning || detailAni.value != 0f\n  val detailAniFinished get() = !detailAni.isRunning && detailAni.value == 1f\n  val canView get() = open || viewAniRunning\n  val canViewDetail get() = showDetail || detailAniRunning\n}"},{"language":"kotlin","path":"desk/model/ActivityStyle.kt","content":"package org.dweb_browser.browser.desk.model\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxScope\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.asPaddingValues\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.safeDrawing\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.Dp\n\ndata class ActivityStyle(\n  val centerWidth: Float = 0f,\n  val openCenterWidth: Float = 0f,\n  val overlayCutoutHeight: Float = 0f,\n  val openOverlayCutoutHeight: Float = 0f,\n  val screenMarginTop: Float = 0f,\n  val openScreenMarginTop: Float = 0f,\n  val radius: Float = 16f,\n  val openRadius: Float = radius * 2,\n  val shadowElevation: Float = 0f,\n  val openShadowElevation: Float = 16f,\n  val containerBox: @Composable ContainerScope.(content: @Composable BoxScope.() -> Unit) -> Unit = { content ->\n    Box(\n      Modifier.offset(y = offsetDp),\n      content = content,\n    )\n  },\n  val contentBox: @Composable ContentScope.(content: @Composable BoxScope.() -> Unit) -> Unit = { content ->\n    Box(\n      modifier,\n      contentAlignment = Alignment.Center,\n      content = content,\n    )\n  },\n) {\n  class ContainerScope(val offsetDp: Dp)\n  class ContentScope(val modifier: Modifier)\n\n  companion object {\n    val defaultCutoutOrStatusBarTop: Float\n      @Composable get() {\n        return WindowInsets.safeDrawing.asPaddingValues().calculateTopPadding().value\n      }\n\n    @Composable\n    fun common(\n      displayWidth: Float,\n      topPadding: Float = 8f,\n      cutoutOrStatusBarTop: Float,\n      canOverlayCutoutHeight: Float,\n      builder: (ActivityStyle.() -> ActivityStyle)? = null,\n    ): ActivityStyle {\n      return remember(displayWidth, cutoutOrStatusBarTop, canOverlayCutoutHeight, builder) {\n        ActivityStyle(\n          centerWidth = 96f,\n          openCenterWidth = displayWidth * 0.9f - 48f - 48f - 16f - 16f,\n          overlayCutoutHeight = 0f,\n          screenMarginTop = cutoutOrStatusBarTop + topPadding,\n          openOverlayCutoutHeight = when (canOverlayCutoutHeight) {\n            0f -> 0f\n            else -> canOverlayCutoutHeight + topPadding\n          },\n          openScreenMarginTop = when (canOverlayCutoutHeight) {\n            0f -> cutoutOrStatusBarTop + topPadding\n            else -> cutoutOrStatusBarTop - canOverlayCutoutHeight\n          },\n        ).let {\n          builder?.invoke(it) ?: it\n        }\n      }\n    }\n  }\n}\n\n/// 根据不同平台与不同硬件情况来配置样式\n@Composable\nexpect fun rememberActivityStyle(builder: (ActivityStyle.() -> ActivityStyle)? = null): ActivityStyle"},{"language":"kotlin","path":"desk/model/AppMenuModel.kt","content":"package org.dweb_browser.browser.desk.model\n\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.twotone.Delete\nimport androidx.compose.material.icons.twotone.Description\nimport androidx.compose.material.icons.twotone.HighlightOff\nimport androidx.compose.material.icons.twotone.Share\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.desk.DeskI18n\n\ninternal data class AppMenuModel(val type: AppMenuType, val enable: Boolean)\ninternal enum class AppMenuType {\n  OFF {\n    override val data: AppModelTypeData\n      get() = AppModelTypeData(\n        BrowserI18nResource.Desktop.quit.text, Icons.TwoTone.HighlightOff\n      )\n  },\n\n  DETAIL {\n    override val data: AppModelTypeData\n      get() = AppModelTypeData(\n        BrowserI18nResource.Desktop.detail.text, Icons.TwoTone.Description\n      )\n  },\n\n  UNINSTALL {\n    override val data: AppModelTypeData\n      get() = AppModelTypeData(\n        DeskI18n.uninstall.text, Icons.TwoTone.Delete, color = Color(0xFFEF5350)\n      )\n  },\n\n  SHARE {\n    override val data: AppModelTypeData\n      get() = AppModelTypeData(BrowserI18nResource.Desktop.share.text, Icons.TwoTone.Share)\n  },\n\n  DELETE {\n    override val data: AppModelTypeData\n      get() = AppModelTypeData(\n        BrowserI18nResource.Desktop.delete.text,\n        Icons.TwoTone.Delete,\n        color = Color.Red\n      )\n  };\n\n  data class AppModelTypeData(\n    val title: String,\n    val icon: ImageVector,\n    val color: Color = Color.Black,\n  )\n\n  abstract val data: AppModelTypeData\n}\n\ninternal fun DesktopAppModel.getAppMenuDisplays(): List<AppMenuModel> {\n  val displays = mutableListOf<AppMenuModel>()\n  when {\n    isWebLink -> {\n      displays.add(AppMenuModel(AppMenuType.DELETE, true))\n    }\n\n    else -> {\n      displays.add(\n        AppMenuModel(AppMenuType.OFF, running == DesktopAppModel.DesktopAppRunStatus.Opened)\n      )\n      if (!isSystemApp) {\n        displays.add(AppMenuModel(AppMenuType.DETAIL, true))\n        displays.add(AppMenuModel(AppMenuType.UNINSTALL, true))\n      }\n    }\n  }\n\n  displays.add(AppMenuModel(AppMenuType.SHARE, false))\n\n  return displays\n}"},{"language":"kotlin","path":"desk/model/DesktopAppData.kt","content":"package org.dweb_browser.browser.desk.model\n\ninternal sealed class DesktopAppData {\n  abstract val mmid: String\n\n  data class App(override val mmid: String) : DesktopAppData()\n  data class WebLink(override val mmid: String, val url: String) : DesktopAppData()\n}"},{"language":"kotlin","path":"desk/model/DesktopAppModel.kt","content":"package org.dweb_browser.browser.desk.model\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.geometry.Size\nimport org.dweb_browser.browser.desk.types.DeskAppMetaData\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.sys.window.core.helper.pickLargest\nimport org.dweb_browser.sys.window.core.helper.toStrict\n\ninternal class DesktopAppModel(\n  val appMetaData: DeskAppMetaData,\n  initRunningState: DesktopAppRunStatus = DesktopAppRunStatus.Close,\n) {\n  val name by lazy { appMetaData.short_name.ifEmpty { appMetaData.name } }\n  val mmid get() = appMetaData.mmid\n  val webLink by lazy {\n    if (appMetaData.categories.contains(MICRO_MODULE_CATEGORY.Web_Browser) && appMetaData.mmid != \"web.browser.dweb\" && !appMetaData.homepage_url.isNullOrEmpty()) {\n      appMetaData.homepage_url\n    } else null\n  }\n  val isWebLink get() = webLink != null\n  val icon by lazy { appMetaData.icons.toStrict().pickLargest() }\n  val isSystemApp get() = appMetaData.targetType == \"nmm\"\n  var running = initRunningState\n  var size by mutableStateOf(Size.Zero)\n  var offset by mutableStateOf(Offset.Zero)\n\n  enum class DesktopAppRunStatus {\n    Close, Opening, Opened\n  }\n\n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other == null || this::class != other::class) return false\n\n    other as DesktopAppModel\n\n    if (mmid != other.mmid) return false\n    if (name != other.name) return false\n    if (running != other.running) return false\n\n    return true\n  }\n\n\n  override fun hashCode(): Int {\n    var result = name.hashCode()\n    result = 31 * result + mmid.hashCode() + 100 * running.hashCode()\n    return result\n  }\n\n  override fun toString(): String {\n    return \"$mmid, $running\"\n  }\n}"},{"language":"kotlin","path":"desk/model/TaskbarAppModel.kt","content":"package org.dweb_browser.browser.desk.model\n\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.spring\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.RememberObserver\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.unit.dp\nimport kotlinx.atomicfu.atomic\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.helper.SafeHashMap\nimport org.dweb_browser.helper.SafeHashSet\nimport org.dweb_browser.helper.StrictImageResource\nimport org.dweb_browser.helper.globalDefaultScope\nimport org.dweb_browser.sys.window.core.constant.WindowMode\n\ninternal data class TaskbarAppModelState(\n  var focus: Boolean = false, var visible: Boolean = false, var mode: WindowMode = WindowMode.FLOAT,\n)\n\ninternal class TaskbarAppModel(\n  val mmid: String,\n  val icon: StrictImageResource?,\n  running: Boolean,\n  var isShowClose: Boolean = false,\n  var state: TaskbarAppModelState = TaskbarAppModelState(),\n) {\n  val runningFlow = MutableStateFlow(false)\n  val running get() = runningFlow.value\n\n  val openingFlow = MutableStateFlow(false)\n  val opening get() = openingFlow.value\n\n\n  @Composable\n  fun rememberAniProp() = remember {\n    object : RememberObserver {\n      private val rid = AnimationProp.ridAcc++\n      val prop = AnimationProp.getOrCreate(mmid, rid)\n      private fun free() {\n        prop.unRef(rid)\n      }\n\n      override fun onAbandoned() {\n        free()\n      }\n\n      override fun onForgotten() {\n        free()\n      }\n\n      override fun onRemembered() {\n      }\n    }\n  }.prop\n\n  class AnimationProp(val mmid: MMID) {\n    companion object {\n      internal var ridAcc by atomic(0)\n      private val all = SafeHashMap<String, AnimationProp>()\n      fun getOrCreate(mmid: MMID, rid: Int) =\n        all.getOrPut(mmid) { AnimationProp(mmid) }.also { prop -> prop.ref(rid) }\n\n    }\n\n    private val refs = SafeHashSet<Int>()\n    fun ref(rid: Int) {\n      refs += rid\n      freeJob?.cancel()\n      freeJob = null\n    }\n\n    private var freeJob: Job? = null\n    fun unRef(rid: Int) {\n      refs -= rid\n      if (refs.isEmpty()) {\n        freeJob ?: globalDefaultScope.launch {\n          delay(1000)\n          if (refs.isEmpty()) {\n            all.remove(mmid)\n          }\n        }.also { freeJob = it }\n      }\n    }\n\n    internal var offsetYDp by mutableStateOf(0.dp)\n      private set\n    private var targetOffsetY by mutableStateOf(0f)\n    fun setOffsetY(offsetY: Float) {\n      targetOffsetY = offsetY\n//      offsetYDp = offsetY.dp\n    }\n\n    @Composable\n    internal fun Effect() {\n      offsetYDp = animateFloatAsState(targetOffsetY, taskbarAppAniSpec()).value.dp\n    }\n  }\n}\n\nprivate fun <T> taskbarAppAniSpec() =\n  spring<T>(Spring.DampingRatioLowBouncy, stiffness = Spring.StiffnessMediumLow)"},{"language":"kotlin","path":"desk/render/AlertControllerRender.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.twotone.Error\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport org.dweb_browser.browser.desk.AlertController\nimport org.dweb_browser.helper.compose.CommonI18n\nimport org.dweb_browser.helper.compose.collectAsMutableState\n\n/**\n * 错误信息\n */\n@Composable\nfun AlertController.Render() {\n  var alertMessages by alertMessagesFlow.collectAsMutableState()\n  // 每次只显示一个\n  alertMessages.firstOrNull()?.also { message ->\n    key(message) {\n      val dismissHandler: () -> Unit = {\n        alertMessages -= message\n      }\n      AlertDialog(\n        onDismissRequest = dismissHandler,\n        icon = {\n          Icon(Icons.TwoTone.Error, contentDescription = \"error\")\n        },\n        title = {\n          Text(message.title ?: CommonI18n.error(), color = MaterialTheme.colorScheme.error)\n        },\n        text = {\n          Text(\n            message.message,\n            modifier = Modifier.verticalScroll(rememberScrollState()),\n            style = MaterialTheme.typography.bodySmall,\n          )\n        },\n        containerColor = MaterialTheme.colorScheme.errorContainer,\n        confirmButton = {\n          Button(onClick = dismissHandler) {\n            Text(CommonI18n.close())\n          }\n        },\n      )\n    }\n  }\n}"},{"language":"kotlin","path":"desk/render/AppItem.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.animation.core.LinearEasing\nimport androidx.compose.animation.core.RepeatMode\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.animateFloat\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.infiniteRepeatable\nimport androidx.compose.animation.core.rememberInfiniteTransition\nimport androidx.compose.animation.core.spring\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Shadow\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.layout.positionInWindow\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport org.dweb_browser.browser.desk.model.DesktopAppModel\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.file.ext.blobFetchHook\nimport org.dweb_browser.helper.compose.ENV_SWITCH_KEY\nimport org.dweb_browser.helper.compose.div\nimport org.dweb_browser.helper.compose.envSwitch\nimport org.dweb_browser.sys.window.render.AppLogo\n\n@Composable\ninternal fun AppItem(\n  app: DesktopAppModel,\n  edit: Boolean,\n  editDragging: Boolean,\n  isCustomLayout: Boolean = false,\n  microModule: NativeMicroModule.NativeRuntime,\n  modifier: Modifier,\n  iconModifier: Modifier,\n) {\n  val density = LocalDensity.current.density\n\n  val shakeAnimation by rememberInfiniteTransition().animateFloat(\n    -5f,\n    5f,\n    animationSpec = infiniteRepeatable(\n      animation = tween(200, easing = LinearEasing),\n      repeatMode = RepeatMode.Reverse\n    )\n  )\n\n  val scaleAnimation = animateFloatAsState(\n    if (editDragging) 1.1f else 1.0f,\n    spring(Spring.DampingRatioLowBouncy, Spring.StiffnessLow)\n  )\n\n  Column(\n    modifier = modifier.fillMaxSize().padding(top = 8.dp),\n    verticalArrangement = Arrangement.Center,\n    horizontalAlignment = Alignment.CenterHorizontally,\n  ) {\n    AppLogo.from(app.icon, fetchHook = microModule.blobFetchHook, description = \"desk:${app.mmid}\").toDeskAppIcon()\n      .Render(iconModifier.run {\n        when {\n          isCustomLayout -> weight(0.65f)\n          else -> this\n        }\n      }.size(52.dp).graphicsLayer {\n        if (editDragging) {\n          scaleX = scaleAnimation.value\n          scaleY = scaleAnimation.value\n        } else if (edit) {\n          rotationZ = shakeAnimation\n        }\n      }.onGloballyPositioned {\n        app.size = it.size / density\n        app.offset = it.positionInWindow() / density\n      }.jump(app.running == DesktopAppModel.DesktopAppRunStatus.Opening))\n\n    Text(\n      text = app.name, maxLines = 2, overflow = TextOverflow.Ellipsis, style = TextStyle(\n        color = Color.White,\n        fontSize = 10.sp,\n        textAlign = TextAlign.Center,\n        fontWeight = FontWeight.Light,\n        shadow = Shadow(Color.Black.copy(alpha = 0.5f), Offset(0f, 2f), 4f)\n      ), modifier = Modifier.run {\n        when {\n          isCustomLayout -> weight(0.35f)\n          else -> this\n        }\n      }.fillMaxWidth().padding(top = 6.dp)\n    )\n  }\n}"},{"language":"kotlin","path":"desk/render/AppMenuPanel.kt","content":"package org.dweb_browser.browser.desk.render\n\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.requiredSize\nimport androidx.compose.foundation.layout.safeDrawing\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.union\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.referentialEqualityPolicy\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.platform.LocalLayoutDirection\nimport androidx.compose.ui.unit.IntSize\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.desk.DesktopV2Controller\nimport org.dweb_browser.browser.desk.model.AppMenuModel\nimport org.dweb_browser.browser.desk.model.AppMenuType\nimport org.dweb_browser.browser.desk.model.DesktopAppModel\nimport org.dweb_browser.browser.desk.model.getAppMenuDisplays\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.core.std.file.ext.blobFetchHook\nimport org.dweb_browser.helper.PureIntBounds\nimport org.dweb_browser.helper.PureRect\nimport org.dweb_browser.helper.compose.NativeBackHandler\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.helper.compose.hoverCursor\nimport org.dweb_browser.helper.compose.minus\nimport org.dweb_browser.helper.compose.plus\nimport org.dweb_browser.helper.compose.timesIntOffset\nimport org.dweb_browser.helper.compose.timesToInt\nimport org.dweb_browser.helper.toRect\nimport org.dweb_browser.sys.window.render.AppLogo\n\n\n@Composable\ninternal fun rememberAppMenuPanel(\n  desktopController: DesktopV2Controller,\n  microModule: NativeMicroModule.NativeRuntime,\n) = remember(desktopController, microModule) { AppMenuPanel(desktopController, microModule) }\n\ninternal class AppMenuPanel(\n  val desktopController: DesktopV2Controller,\n  val microModule: NativeMicroModule.NativeRuntime,\n) {\n  private var cacheApp by mutableStateOf<DesktopAppModel?>(\n    null,\n    // 不知道为什么， DesktopAppModel 就是得用 === ，而不能是 ==\n    policy = referentialEqualityPolicy()\n  )\n  var safeAreaInsets by mutableStateOf(WindowInsets(0))\n\n  /**\n   * 是否打开应用菜单\n   */\n  var isOpenMenu by mutableStateOf(false)\n    private set\n  private val menuProgressAni = Animatable(0f)\n  val visibilityProgress get() = menuProgressAni.value\n  var isOpenDeleteDialog by mutableStateOf(false)\n    private set\n\n  val isOpen get() = isOpenMenu || isOpenDeleteDialog\n\n  fun hide() {\n    isOpenMenu = false\n    isOpenDeleteDialog = false\n  }\n\n  fun show(app: DesktopAppModel) {\n    this.cacheApp = app\n    doHaptics()\n    isOpenMenu = true\n  }\n\n  fun doQuit(mmid: String) {\n    microModule.scopeLaunch(cancelable = true) {\n      desktopController.closeApp(mmid)\n    }\n  }\n\n  fun doDetail(mmid: String) {\n    microModule.scopeLaunch(cancelable = true) {\n      desktopController.detail(mmid)\n    }\n  }\n\n  fun doRemove(mmid: String, isWebLink: Boolean) {\n    microModule.scopeLaunch(cancelable = true) {\n      desktopController.remove(mmid, isWebLink)\n    }\n  }\n\n  fun doShare(mmid: String) {\n    microModule.scopeLaunch(cancelable = true) {\n      desktopController.share(mmid)\n    }\n  }\n\n  fun doHaptics() {\n    microModule.scopeLaunch(cancelable = true) {\n      microModule.nativeFetch(\"file://haptics.sys.dweb/vibrateHeavyClick\")\n    }\n  }\n\n  /**\n   * 图层是否最终可见\n   */\n  private var menuLayerVisibility by mutableStateOf(false)\n\n\n  companion object {\n    val appMenuLayerBgAlpha = when {\n      canSupportModifierBlur() -> 0.12f\n      else -> 0.6f\n    }\n\n    val appMenuAlpha = when {\n      canSupportModifierBlur() -> 0.5f\n      else -> 1f\n    }\n  }\n\n\n  @Composable\n  fun Render(modifier: Modifier = Modifier) {\n    LaunchedEffect(isOpen) {\n      menuLayerVisibility = true\n      if (isOpen) {\n        menuProgressAni.animateTo(1f, deskAniSpec())\n      } else {\n        menuProgressAni.animateTo(0f, deskAniSpec())\n        menuLayerVisibility = false\n      }\n    }\n    val app = this.cacheApp ?: return\n    Box(modifier) {\n      if (menuLayerVisibility) {\n        AppMenuLayer(app)\n      }\n      AnimatedVisibility(isOpenDeleteDialog) {\n        DeskDeleteAlert(app, microModule, onDismissRequest = { hide() }, onConfirm = {\n          hide()\n          doRemove(app.mmid, app.isWebLink)\n        })\n      }\n    }\n  }\n\n  @Composable\n  fun AppMenuLayer(app: DesktopAppModel, modifier: Modifier = Modifier) {\n    NativeBackHandler(isOpenMenu) {\n      hide()\n    }\n    val density = LocalDensity.current\n    val layoutDirection = LocalLayoutDirection.current\n    val d = density.density\n    val p = visibilityProgress\n\n    BoxWithConstraints(\n      modifier.fillMaxSize().background(Color.Black.copy(appMenuLayerBgAlpha * p)).composed {\n        // 这里要做到事件穿透，所以不能用 enabled 来控制\n        when {\n          isOpenMenu -> clickableWithNoEffect { hide() }\n          else -> this\n        }\n      },\n      Alignment.TopStart,\n    ) {\n      val p1 = if (p >= 0.5f) 1f else p * 2\n      val p2 = if (p >= 0.5f) (p - 0.5f) * 2 else 0f\n      val iconScaleDiff = 0.1f\n      val iconScale = 1f + iconScaleDiff * p2\n      val iconAlpha = safeAlpha(p1)\n      val appOffset = app.offset\n      val appSize = app.size\n\n      AppLogo.from(app.icon, fetchHook = microModule.blobFetchHook).toDeskAppIcon().Render(\n        Modifier.requiredSize(\n          appSize.width.dp,\n          appSize.height.dp\n        )// 不要用 translationXY 去做变换，会有消失不见的问题\n          .offset(appOffset.x.dp, appOffset.y.dp).graphicsLayer {\n            scaleX = iconScale\n            scaleY = iconScale\n            alpha = iconAlpha\n          },\n      )\n\n      val safeDrawing = WindowInsets.safeDrawing\n      val safeWindowBounds = remember(safeDrawing, safeAreaInsets, density, layoutDirection) {\n        val safeInsets = safeDrawing.union(safeAreaInsets)\n        PureIntBounds(\n          left = safeInsets.getLeft(density, layoutDirection),\n          right = safeInsets.getRight(density, layoutDirection),\n          top = safeInsets.getTop(density),\n          bottom = safeInsets.getBottom(density),\n        )\n      }\n\n      val appBounds = remember(appOffset, appSize) {\n        PureRect(\n          x = appOffset.x,\n          y = appOffset.y,\n          width = appSize.width,\n          height = appSize.height,\n        ).toPureBounds().centerScale(1f + iconScaleDiff)\n      }\n      var appMenuIntSizeReady by remember { mutableStateOf(false) }\n      var appMenuIntSize by remember {\n        mutableStateOf(\n          Size(\n            appBounds.width,\n            appBounds.height\n          ).timesToInt(d)\n        )\n      }\n\n      val positionProvider = rememberMenuTooltipPositionProvider()\n      val appMenuIntOffset =\n        remember(appMenuIntSize, appBounds, safeWindowBounds, layoutDirection) {\n          if (!appMenuIntSizeReady) {\n            return@remember Offset(appBounds.left, appBounds.top).timesIntOffset(d)\n          }\n          val windowSize = IntSize(constraints.maxWidth, constraints.maxHeight).minus(\n            w = safeWindowBounds.left + safeWindowBounds.right,\n            h = safeWindowBounds.top + safeWindowBounds.bottom,\n          )\n          val anchorBounds = appBounds.toPureRect().toRect().timesToInt(d).minus(\n            l = safeWindowBounds.left,\n            t = safeWindowBounds.top,\n            b = safeWindowBounds.top,\n            r = safeWindowBounds.left,\n          )\n          positionProvider.calculatePosition(\n            anchorBounds = anchorBounds,\n            windowSize = windowSize,\n            layoutDirection = layoutDirection,\n            popupContentSize = appMenuIntSize\n          ).plus(x = safeWindowBounds.left, y = safeWindowBounds.top)\n        }\n\n      val menuAlpha = safeAlpha(p)\n      val p3 = 0.9f + p * 0.1f\n      val startIntX = appBounds.left * d\n      val startIntY = appBounds.top * d\n      val endIntX = appMenuIntOffset.x\n      val endIntY = appMenuIntOffset.y\n      val aniTranslationX = startIntX + (endIntX - startIntX) * p3\n      val aniTranslationY = startIntY + (endIntY - startIntY) * p3\n\n      val startScaleX = appSize.width / (appMenuIntSize.width / d)\n      val startScaleY = appSize.height / (appMenuIntSize.height / d)\n      val aniScaleX = startScaleX + (1f - startScaleX) * p3\n      val aniScaleY = startScaleY + (1f - startScaleY) * p3\n\n      AppMenu(\n        displays = remember(app) { app.getAppMenuDisplays() },\n        modifier = Modifier.offset(\n          (aniTranslationX / d).dp,\n          (aniTranslationY / d).dp\n        )// 不要用 translationXY 去做变换，会有消失不见的问题\n          .graphicsLayer {\n//            transformOrigin = TransformOrigin(0f, 0f)\n//            translationX = aniTranslationX\n//            translationY = aniTranslationY\n            scaleX = aniScaleX\n            scaleY = aniScaleY\n            alpha = menuAlpha\n          }.onGloballyPositioned {\n            appMenuIntSizeReady = true\n            appMenuIntSize = it.size\n          },\n        action = { type ->\n          when (type) {\n            AppMenuType.OFF -> hide().also { doQuit(app.mmid) }\n            AppMenuType.DETAIL -> hide().also { doDetail(app.mmid) }\n            AppMenuType.SHARE -> hide().also { doShare(app.mmid) }\n            AppMenuType.UNINSTALL, AppMenuType.DELETE -> {\n              isOpenMenu = false\n              isOpenDeleteDialog = true\n            }\n          }\n        },\n      )\n    }\n  }\n\n  @Composable\n  private fun AppMenu(\n    displays: List<AppMenuModel>,\n    modifier: Modifier,\n    action: (AppMenuType) -> Unit,\n  ) {\n    Box(modifier.background(Color.White.copy(alpha = appMenuAlpha), deskSquircleShape())) {\n      Row(\n        modifier = Modifier.padding(8.dp),\n        horizontalArrangement = Arrangement.SpaceBetween,\n        verticalAlignment = Alignment.CenterVertically\n      ) {\n        displays.forEach { display ->\n          TextButton(\n            {\n              action(display.type)\n            },\n            enabled = display.enable,\n            shape = deskSquircleShape(),\n            modifier = Modifier.hoverCursor(),\n            colors = ButtonDefaults.textButtonColors().run {\n              remember {\n                copy(\n                  contentColor = display.type.data.color.copy(alpha = 0.9f),\n                  disabledContentColor = Color.Black.copy(alpha = 0.4f),\n                )\n              }\n            }\n          ) {\n            Column(\n              horizontalAlignment = Alignment.CenterHorizontally,\n              verticalArrangement = Arrangement.spacedBy(4.dp)\n            ) {\n              Icon(display.type.data.icon, null, modifier = Modifier.size(24.dp))\n              Text(display.type.data.title, style = MaterialTheme.typography.bodySmall)\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"},{"language":"kotlin","path":"desk/render/BezGradient.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.animation.AnimatedContent\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Path\nimport androidx.compose.ui.graphics.drawscope.DrawStyle\nimport androidx.compose.ui.graphics.drawscope.Fill\nimport kotlin.math.PI\nimport kotlin.math.cos\nimport kotlin.math.sin\nimport kotlin.random.Random\n\n@Composable\nfun BezGradient(color: Color, modifier: Modifier, style: DrawStyle = Fill, random: Float = 20f) {\n  fun toCanvasCoordinate(point: Offset, center: Offset): Offset {\n    return Offset(point.x + center.x, point.y + center.y)\n  }\n\n  fun randomPolarPoint(degree: Float, oR: Float, iR: Float): Offset {\n    val oY = oR * sin(degree / 180f * PI)\n    val iY = iR * sin(degree / 180f * PI)\n\n    val oX = oR * cos(degree / 180f * PI)\n    val iX = iR * cos(degree / 180f * PI)\n\n    val randomX = Random.nextFloat()\n    val randomY = Random.nextFloat()\n\n\n    val x = when (degree) {\n      in 0f..90f -> randomX * (oX - iX) + iX\n      in 270f..360f -> randomX * (oX - iX) + iX\n      else -> randomX * (iX - oX) + oX\n    }.toInt()\n\n    val y = when (degree) {\n      in 0f..180f -> randomY * (oY - iY) + iY\n      else -> randomY * (oY - iY) + iY\n    }.toInt()\n\n    return Offset(x.toFloat(), y.toFloat())\n  }\n\n  fun allDegress(number: Int): List<Float> {\n    val result = mutableListOf<Float>()\n    val step = 360f / number.toFloat()\n    var i = 0\n    while (i < number) {\n      result.add(step * i)\n      i++;\n    }\n    return result\n  }\n\n  fun bezierEndPoint(c0: Offset, c1: Offset): Offset {\n    return Offset((c1.x - c0.x) / 2 + c0.x, (c1.y - c0.y) / 2 + c0.y)\n  }\n\n  fun getPath(center: Offset, radius: Float): Path {\n    val points = allDegress(8).map {\n      randomPolarPoint(it, radius.toFloat(), radius.toFloat() - random)\n    }.map {\n      toCanvasCoordinate(it, center)\n    }\n\n    val path = Path()\n\n    var start = points[0]\n    var c0 = Offset.Zero\n    var c1 = Offset.Zero\n    var end = Offset.Zero\n\n    var index = 0\n    var count = points.count()\n\n    path.moveTo(start.x, start.y)\n\n    while ((index + 1) < count) {\n      c0 = points[index]\n      c1 = points[index + 1]\n      end = bezierEndPoint(c0, c1)\n      path.quadraticTo(c0.x, c0.y, end.x, end.y)\n      index++\n    }\n    val last = points.last()\n    path.quadraticTo(last.x, last.y, start.x, start.y)\n    path.close()\n\n    return path\n  }\n\n  var path by remember {\n    mutableStateOf<Path?>(null)\n  }\n\n  AnimatedContent(path) {\n    Canvas(\n      modifier.fillMaxSize().clip(CircleShape)\n    ) {\n\n      val center = Offset(size.width / 2.0f, size.height / 2.0f)\n      val radius = size.minDimension / 2.0\n      val path0 = getPath(center, radius.toFloat())\n      drawPath(path0, color, style = style)\n    }\n  }\n}"},{"language":"kotlin","path":"desk/render/CloseButton.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.StrokeCap\nimport androidx.compose.ui.graphics.drawscope.Stroke\nimport androidx.compose.ui.platform.LocalDensity\n\n@Composable\nfun CloseButton(color: Color, modifier: Modifier = Modifier) {\n  val lineWidth = 1 * LocalDensity.current.density\n  Canvas(modifier.background(color.copy(alpha = 0.1f), CircleShape)) {\n    val r = size.minDimension / 2.0f * 0.8f\n\n    val xLeft = (size.width - 2 * r) / 2f + r * 0.7f\n    val xRight = size.width - (size.width - 2 * r) / 2f - r * 0.7f\n    val yTop = (size.height - 2 * r) / 2f + r * 0.7f\n    val yBottom = size.height - (size.height - 2 * r) / 2f - r * 0.7f\n\n    drawCircle(color.copy(alpha = 0.5f), r, style = Stroke(width = lineWidth))\n\n    drawLine(\n      color, Offset(xLeft, yTop), Offset(xRight, yBottom), lineWidth, cap = StrokeCap.Square\n    )\n\n    drawLine(\n      color, Offset(xLeft, yBottom), Offset(xRight, yTop), lineWidth, cap = StrokeCap.Square\n    )\n  }\n}"},{"language":"kotlin","path":"desk/render/DeskAppIcon.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.graphics.Color\nimport org.dweb_browser.sys.window.render.AppIcon\nimport org.dweb_browser.sys.window.render.AppIconContainer\nimport org.dweb_browser.sys.window.render.AppLogo\n\n@Composable\nfun AppLogo.toDeskAppLogo() = remember(this) { copyToDeskAppLogo() }\nfun AppLogo.copyToDeskAppLogo() = if (color == null) withColor(color = Color.Black) else this\n\n@Composable\nfun AppLogo.toDeskAppIcon(\n  containerBase: AppIconContainer? = null,\n  containerColor: Color? = null,\n  containerAlpha: Float? = null,\n) =\n  toDeskAppLogo().toIcon(\n    when (containerBase) {\n      null -> AppIconContainer(\n        color = containerColor ?: Color.White,\n        alpha = containerAlpha ?: deskIconAlpha\n      )\n\n      else -> containerBase.withColorAndAlpha(\n        color = containerColor ?: Color.White,\n        alpha = containerAlpha ?: deskIconAlpha\n      )\n    }\n  )\n\n@Composable\nfun AppIcon.toDeskAppIcon() =\n  logo.toDeskAppLogo().toIcon(container.withColorAndAlpha(color = Color.White, alpha = deskIconAlpha))\n\ninternal val deskIconAlpha = when {\n  canSupportModifierBlur() -> 0.9f\n  else -> 1f\n}\n"},{"language":"kotlin","path":"desk/render/DeskDeleteAlert.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.font.FontStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.desk.DeskI18n\nimport org.dweb_browser.browser.desk.model.DesktopAppModel\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.file.ext.blobFetchHook\nimport org.dweb_browser.helper.compose.CommonI18n\nimport org.dweb_browser.helper.platform.theme.LocalColorful\nimport org.dweb_browser.sys.window.ext.AlertDeleteDialog\nimport org.dweb_browser.sys.window.render.AppLogo\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\ninternal fun DeskDeleteAlert(\n  app: DesktopAppModel,\n  microModule: NativeMicroModule.NativeRuntime,\n  onDismissRequest: () -> Unit,\n  onConfirm: () -> Unit,\n) {\n  AlertDeleteDialog(\n    onDismissRequest = onDismissRequest, onDelete = onConfirm,\n    title = {\n      when {\n        app.isWebLink -> Text(DeskI18n.delete_weblink_title())\n        else -> Text(DeskI18n.delete_app_title())\n      }\n    },\n    message = {\n      Column {\n        Row(verticalAlignment = Alignment.CenterVertically) {\n          AppLogo.from(app.icon, fetchHook = microModule.blobFetchHook)\n            .toDeskAppIcon(containerAlpha = 1f).Render(Modifier.size(36.dp))\n          Column(Modifier.padding(start = 4.dp), verticalArrangement = Arrangement.spacedBy(2.dp)) {\n            Text(app.name, style = MaterialTheme.typography.bodySmall, fontWeight = FontWeight.Bold)\n            when (val webLink = app.webLink) {\n              null -> Text(\n                app.mmid,\n                style = MaterialTheme.typography.bodySmall.run { copy(fontSize = fontSize * 0.8f) },\n                fontStyle = FontStyle.Italic,\n                color = LocalColorful.current.Cyan.current,\n              )\n\n              else -> Text(\n                webLink,\n                style = MaterialTheme.typography.bodySmall.run { copy(fontSize = fontSize * 0.8f) },\n                fontStyle = FontStyle.Italic,\n                color = LocalColorful.current.Blue.current,\n              )\n            }\n          }\n        }\n\n        if (!app.isWebLink) {\n          Text(DeskI18n.delete_app_tip(), modifier = Modifier.padding(top = 4.dp))\n        }\n      }\n    },\n    deleteText = CommonI18n.confirm(),\n    jobCancelable = true,\n  )\n}"},{"language":"kotlin","path":"desk/render/DeskLayoutCaculator.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.IntSize\n\n\nclass NFCaculater() {\n  companion object {\n    fun sizeReq(toPlaceType: NFDataType, params: NFCacalaterParams): IntSize {\n      return IntSize(\n        params.itemSize.width * toPlaceType.width + params.hSpace * (toPlaceType.width - 1).coerceAtLeast(\n          0\n        ),\n        params.itemSize.height * toPlaceType.height + params.vSpace * (toPlaceType.height - 1).coerceAtLeast(\n          0\n        ),\n      )\n    }\n\n    fun <T> searchAreas(\n      offset: IntOffset,\n      layout: NFLayoutData<T>,\n      params: NFCacalaterParams,\n    ): NFLayoutData<T> {\n\n      val triggler = IntOffset(\n        params.itemSize.width / 2,\n        params.itemSize.height / 2\n      )\n\n      var indexX = (offset.x + triggler.x) / (params.itemSize.width + params.hSpace)\n      var indexY = (offset.y + triggler.y) / (params.itemSize.height + params.vSpace)\n\n      indexX = indexX.coerceIn(0 until params.column)\n      indexY = indexY.coerceAtLeast(0)\n\n      return if (indexX == layout.sCGeo.x && indexY == layout.sCGeo.y) {\n        layout\n      } else {\n        val geo = layout.geo.copy(\n          x = indexX * (params.itemSize.width + params.hSpace),\n          y = indexY * (params.itemSize.height + params.vSpace)\n        )\n        val scGeo = layout.sCGeo.copy(indexX, indexY)\n        layout.copy(sCGeo = scGeo, geo = geo)\n      }\n    }\n\n    fun <T> getLayout(\n      value: T,\n      spaceCoordinateLayout: NFSpaceCoordinateLayout,\n      params: NFCacalaterParams\n    ): NFLayoutData<T> {\n\n      val offX = spaceCoordinateLayout.offset.x\n      val offY = spaceCoordinateLayout.offset.y\n\n      val offset = IntOffset(\n        x = offX * (params.itemSize.width + params.hSpace),\n        y = offY * (params.itemSize.height + params.vSpace)\n      )\n\n      val sizeW = spaceCoordinateLayout.size.width\n      val sizeH = spaceCoordinateLayout.size.height\n\n      val size = IntSize(\n        params.itemSize.width * sizeW + params.hSpace * (sizeW - 1).coerceAtLeast(0),\n        params.itemSize.height * sizeH + params.vSpace * (sizeH - 1).coerceAtLeast(0),\n      )\n\n      return NFLayoutData(value, spaceCoordinateLayout, NFGeometry.from(offset, size))\n    }\n\n    fun logBoard(board: MutableList<BooleanArray>, tag: String = \"\") {\n      println(\"FUUU logBoard: <<<<<< $tag >>>>>>>\")\n      board.forEachIndexed { index, v ->\n        var info = \"$index: \"\n        info += v.joinToString(\",\") { if (it) \"O\" else \"X\" }\n        println(\"FUUU logBoard:\" + info)\n      }\n      println(\"FUUU logBoard: >>>>>>> $tag <<<<<<<\")\n    }\n\n    // 检查是否指点位置，指定的类似的子board是否可用。\n    fun checkIsUseful(\n      offset: NFSpaceCoordinateOffSet,\n      size: NFSpaceCoordinateSize,\n      inBoard: MutableList<BooleanArray>,\n      column: Int\n    ): Boolean {\n//    println(\"FUUU checkIsUseful ${position.first}-${position.second}\")\n      val toFillSet = mutableSetOf<Pair<Int, Int>>()\n      var r = offset.y\n\n      while (r < offset.y + size.height) {\n\n        while (r >= inBoard.size) {\n          spaceBoardExpand(inBoard, column)\n        }\n\n        val row = inBoard[r]\n        var c = offset.x\n\n        if (c + size.width > row.size) {\n          return false\n        }\n\n        var count = 0\n        while (c < row.size && count < size.width) {\n          count++\n          if (!row[c]) {\n            return false\n          } else {\n            toFillSet.add(Pair(r, c))\n          }\n          c++\n        }\n        r++\n      }\n\n      toFillSet.forEach {\n        inBoard[it.first][it.second] = false\n      }\n\n      return true\n    }\n\n    fun spaceBoardExpand(inBoard: MutableList<BooleanArray>, column: Int) {\n      inBoard.add(BooleanArray(column) { true })\n    }\n\n    fun <T> layout(\n      layouts: List<NFLayoutData<T>>,\n      blockLayouts: List<NFLayoutData<T>>,\n      params: NFCacalaterParams,\n      refresh: Boolean\n    ): List<NFLayoutData<T>> {\n      val spaceBoard = MutableList(8) { BooleanArray(params.column) { true } }\n\n      blockLayouts.forEach {\n        val scGeo = it.sCGeo\n        while (scGeo.y >= spaceBoard.count()) {\n          spaceBoardExpand(spaceBoard, params.column)\n        }\n        for (y in scGeo.y until scGeo.y + scGeo.height) {\n          for (x in scGeo.x until scGeo.x + scGeo.width) {\n            spaceBoard[y][x] = false\n          }\n        }\n      }\n\n//      logBoard(spaceBoard, \"SYNC BLOCKS\")\n\n      //从指定位置开始遍历所有指类型的子board，找出第一个可用位置。\n      fun findNextAvailablePosition(\n        startOffSet: NFSpaceCoordinateOffSet,\n        size: NFSpaceCoordinateSize\n      ): Pair<IntOffset, NFSpaceCoordinateOffSet> {\n        var r = startOffSet.y\n        while (true) {\n          var c = if (r == startOffSet.y) startOffSet.x else 0\n          while (c < params.column) {\n            val isUseFull = checkIsUseful(IntOffset(c, r), size, spaceBoard, params.column)\n            if (isUseFull) {\n              val offset = IntOffset(\n                c * (params.itemSize.width + params.hSpace),\n                r * (params.itemSize.height + params.vSpace)\n              )\n              return Pair(offset, IntOffset(c, r))\n            }\n            c++\n          }\n          r++\n        }\n      }\n\n      fun resort(): List<NFLayoutData<T>> {\n        return layouts.sortedBy {\n          it.sCGeo.x + it.sCGeo.y * params.column\n        }\n      }\n\n      val result = mutableListOf<NFLayoutData<T>>()\n      var start = NFSpaceCoordinateOffSet.Zero\n      val resortLayouts = resort()\n      for (index in 0 until resortLayouts.count()) {\n        val layout = resortLayouts[index]\n        if (!refresh) {\n          val isCanInsert =\n            checkIsUseful(layout.sCGeo.offset, layout.sCGeo.size, spaceBoard, params.column)\n          if (isCanInsert) {\n            result.add(layout)\n            continue\n          }\n        }\n\n        val r = findNextAvailablePosition(start, layout.sCGeo.size)\n        val s = sizeReq(layout.sCGeo.size, params)\n        result.add(\n          NFLayoutData(\n            layout.data,\n            NFGeometry.from(r.second, layout.sCGeo.size),\n            NFGeometry.from(r.first, s)\n          )\n        )\n        start = r.second\n      }\n      return result\n    }\n  }\n}"},{"language":"kotlin","path":"desk/render/DeskLayoutModels.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.IntSize\nimport kotlinx.serialization.Serializable\n\n\ndata class NFCacalaterParams(\n  val column: Int,\n  val screenWidth: Int,\n  val hSpace: Int = 10,\n  val vSpace: Int = 10,\n  val aspectRatio: Pair<Int, Int> = Pair(1, 1) // 宽高比，默认为1 : 1\n) {\n\n  val itemSize: IntSize by lazy {\n    if (screenWidth <= 0) {\n      return@lazy IntSize.Zero\n    }\n    val w = screenWidth - hSpace * (column - 1).coerceAtLeast(0)\n    IntSize(w / column, w / column / aspectRatio.first * aspectRatio.second)\n  }\n}\n\n//棋盘上OffSet\ntypealias NFSpaceCoordinateOffSet = IntOffset\n\n//棋盘上Size\ntypealias NFSpaceCoordinateSize = IntSize\n\n//棋盘上Geometry\ntypealias NFSpaceCoordinateLayout = NFGeometry\n\n//实际layout的Geometry\n@Serializable\ndata class NFGeometry(val x: Int, val y: Int, val width: Int, val height: Int) {\n  val offset: IntOffset\n    get() = IntOffset(x, y)\n\n  val size: IntSize\n    get() = IntSize(width, height)\n\n  companion object {\n    fun from(offset: IntOffset, size: IntSize): NFGeometry {\n      return NFGeometry(offset.x, offset.y, size.width, size.height)\n    }\n  }\n}\n\ntypealias NFDataType = NFSpaceCoordinateSize\n\n//布局模型\ndata class NFLayoutData<T>(val data: T, val sCGeo: NFSpaceCoordinateLayout, val geo: NFGeometry) {\n  val key get() = data.hashCode()\n}\n\n\nfun Offset.toInt() = IntOffset(x.toInt(), y.toInt())\n"},{"language":"kotlin","path":"desk/render/DeskLayoutV6.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.animation.core.LinearEasing\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.animateIntOffsetAsState\nimport androidx.compose.animation.core.spring\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.ScrollState\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.gestures.animateScrollBy\nimport androidx.compose.foundation.gestures.detectDragGesturesAfterLongPress\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.State\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberUpdatedState\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.zIndex\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.conflate\nimport kotlinx.coroutines.flow.map\nimport org.dweb_browser.helper.getOrDefault\nimport kotlin.math.abs\n\nclass DeskLayoutStateV6<T : Any>(\n  val recommendLayout: (screenWidth: Int) -> Map<T, NFSpaceCoordinateLayout>,\n  val resortLayout: (layoutWith: Int, layouts: Map<T, NFSpaceCoordinateLayout>) -> Unit\n) {\n\n  internal var calculatorParams by mutableStateOf(getCalculatorParams(0, 0))\n\n  internal var blockLayouts by mutableStateOf<List<NFLayoutData<T>>>(emptyList())\n\n  internal var flowLayouts by mutableStateOf<List<NFLayoutData<T>>>(emptyList())\n\n  fun refresh(list: List<T>, screenWith: Int, screenHeight: Int) {\n    calculatorParams = getCalculatorParams(screenWith, screenHeight)\n    val recommendLayouts = recommendLayout(calculatorParams.screenWidth)\n    flowLayouts = list.map { data ->\n      val scLayout = recommendLayouts.getOrDefault(data, NFSpaceCoordinateLayout(0, 0, 1, 1))\n      NFCaculater.getLayout(data, scLayout, calculatorParams)\n    }\n    calculateBlockLayout()\n  }\n\n  internal fun exportDatasGeometryMap() {\n    val r = flowLayouts.associate { layout ->\n      Pair(layout.data, layout.sCGeo)\n    }\n    resortLayout(calculatorParams.screenWidth, r)\n  }\n\n  fun calculateBlockLayout(): List<NFLayoutData<T>> {\n    val blockKeys = blockLayouts.map {\n      it.key\n    }\n\n    flowLayouts = NFCaculater.layout(\n      layouts = flowLayouts.filter { !blockKeys.contains(it.key) },\n      blockLayouts = blockLayouts,\n      params = calculatorParams,\n      refresh = false\n    )\n    return flowLayouts + blockLayouts\n  }\n\n  fun getCalculatorParams(width: Int, height: Int): NFCacalaterParams {\n    return getLayoutParams(width, height)\n  }\n\n  fun getContainerBoxGeometry(width: Int, height: Int): Pair<IntOffset, Int> {\n    val caculatorParams = getLayoutParams(width, height)\n    val offset = IntOffset((width - caculatorParams.screenWidth) / 2, 0)\n    return Pair(offset, caculatorParams.screenWidth)\n  }\n\n  fun doDragStart(dragLayout: NFLayoutData<T>) {\n    blockLayouts += dragLayout\n  }\n\n  fun doDragMoveAction(\n    draggingLayout: NFLayoutData<T>,\n    dragOffset: IntOffset,\n  ) {\n    val blockLayout = NFCaculater.searchAreas(dragOffset, draggingLayout, calculatorParams)\n    if (blockLayout != draggingLayout) {\n      blockLayouts = blockLayouts.filter { it.data != draggingLayout.data } + blockLayout\n    }\n  }\n\n  fun doDragEndAction() {\n    flowLayouts += blockLayouts\n    blockLayouts = emptyList()\n  }\n}\n\n@Composable\nfun <T : Any> DeskLayoutStateV6<T>.Render(\n  modifier: Modifier,\n  edit: Boolean,\n  content: @Composable (T, NFGeometry, Boolean) -> Unit\n) {\n  BoxWithConstraints(modifier) {\n    val screenWidth = constraints.maxWidth\n    val screenHeight = constraints.maxHeight\n\n    val containerBoxLayoutParams by remember(screenWidth, screenHeight) {\n      mutableStateOf(getContainerBoxGeometry(screenWidth, screenHeight))\n    }\n\n    var layouts by remember {\n      mutableStateOf(flowLayouts)\n    }\n\n    LaunchedEffect(flowLayouts) {\n      layouts = flowLayouts + blockLayouts\n    }\n\n    LaunchedEffect(blockLayouts) {\n      layouts = calculateBlockLayout()\n    }\n\n    val contentHeight = remember(layouts) {\n      layouts.maxOfOrNull { it.geo.offset.y + it.geo.size.height }?.toInt() ?: 500\n    }\n\n    val scrollState = rememberScrollState()\n\n    Box(\n      modifier = Modifier.fillMaxSize()\n        .offset { containerBoxLayoutParams.first }\n        .width(containerBoxLayoutParams.second.dp).verticalScroll(scrollState)\n        .height(contentHeight.div(LocalDensity.current.density).dp)\n    ) {\n      layouts.forEach { rlayout ->\n        key(rlayout.key) {\n          DraggableItem(rlayout, scrollState, edit, content)\n        }\n      }\n    }\n  }\n}\n\n@Composable\nprivate fun <T : Any> DeskLayoutStateV6<T>.DraggableItem(\n  rlayout: NFLayoutData<T>,\n  scrollState: ScrollState,\n  edit: Boolean,\n  content: @Composable (T, NFGeometry, Boolean) -> Unit\n) {\n  val density = LocalDensity.current.density\n  val layout by rememberUpdatedState(rlayout)\n\n  // dragOffset：相对与整个box的布局偏移量。\n  var dragOffset by remember(layout.key) { mutableStateOf(IntOffset.Zero) }\n  var startDragScrollOffY by remember { mutableStateOf(0) }\n  val dragging = remember(blockLayouts, layout) {\n    blockLayouts.find { it.data == layout.data } != null\n  }\n\n  var layoutStartOffset by remember { mutableStateOf(IntOffset.Zero) }\n  var dragStartOffset by remember { mutableStateOf(Offset.Zero) }\n  var draggingOffset by remember { mutableStateOf(Offset.Zero) }\n\n  if (dragging) {\n    val scrollV = draggingOffset.y - dragStartOffset.y\n    if (abs(scrollV / density) > 25) {\n      LaunchedEffect(scrollV) {\n        while (true) {\n          scrollState.animateScrollBy(scrollV, tween(500, easing = LinearEasing))\n        }\n      }\n    }\n\n    dragOffset = layoutStartOffset + // 起始位置\n        IntOffset(0, scrollState.value - startDragScrollOffY) + // 滚动差异\n        (draggingOffset - dragStartOffset).toInt() // 拖动差异\n\n    val changed by rememberThrottleUpdatedState(dragOffset, 500)\n\n    LaunchedEffect(changed) {\n      doDragMoveAction(\n        layout,\n        dragOffset,\n      )\n    }\n  }\n\n  val animationOffset by animateIntOffsetAsState(\n    if (dragging) {\n      dragOffset\n    } else {\n      layout.geo.offset\n    },\n    if (dragging) {\n      tween(0)\n    } else {\n      spring(Spring.DampingRatioLowBouncy, Spring.StiffnessLow)\n    }\n  )\n\n  var boxModifier = Modifier.offset { animationOffset }\n    .size(layout.geo.size.width.div(density).dp, layout.geo.size.height.div(density).dp)\n    .zIndex(if (dragging) 1.0f else 0.0f)\n\n  boxModifier = if (edit) {\n    boxModifier.pointerInput(layout.key, calculatorParams) {\n      detectDragGesturesAfterLongPress(\n        onDragStart = { off ->\n          dragStartOffset = off\n          draggingOffset = dragStartOffset\n          startDragScrollOffY = scrollState.value\n          layoutStartOffset = layout.geo.offset\n          doDragStart(layout)\n        },\n        onDrag = { change, dragAmount ->\n          draggingOffset += dragAmount\n        },\n        onDragEnd = {\n          dragOffset = IntOffset.Zero\n          doDragEndAction()\n        },\n      )\n    }\n  } else {\n    boxModifier\n  }\n\n//  if (dragging) {\n//    DragPlaceIndicator(layout)\n//  }\n\n  Box(modifier = boxModifier) {\n    content(layout.data, layout.geo, dragging)\n  }\n\n}\n\n@Composable\nfun <T> DragPlaceIndicator(layout: NFLayoutData<T>) {\n  val density = LocalDensity.current.density\n\n  Box(\n    modifier = Modifier.offset {\n      layout.geo.offset\n    }.size(\n      layout.geo.size.width.div(density).dp,\n      layout.geo.size.height.div(density).dp\n    )\n      .border(1.dp, Color.White, RoundedCornerShape(16))\n  )\n}\n\n@Composable\nfun <T : Any> DeskLayoutV6(\n  datas: List<T>,\n  modifier: Modifier,\n  contentPadding: PaddingValues,\n  edit: Boolean,\n  layout: (screenWidth: Int) -> Map<T, NFSpaceCoordinateLayout>,\n  relayout: (screenWidth: Int, geoMaps: Map<T, NFSpaceCoordinateLayout>) -> Unit,\n  content: @Composable (T, NFGeometry, Boolean) -> Unit\n) {\n  BoxWithConstraints(Modifier.padding(contentPadding)) {\n    var isNeedSaveNextChanged by remember { mutableStateOf(false) }\n\n    val desk = remember(datas, constraints.maxWidth) {\n      DeskLayoutStateV6(layout, relayout).apply {\n        refresh(datas, constraints.maxWidth, constraints.maxHeight)\n      }\n    }\n\n    LaunchedEffect(edit) {\n      if (isNeedSaveNextChanged) {\n        desk.exportDatasGeometryMap()\n        isNeedSaveNextChanged = false\n      }\n      isNeedSaveNextChanged = edit\n    }\n    desk.Render(modifier, edit, content)\n  }\n}\n\n@Composable\nfun <T> rememberThrottleUpdatedState(value: T, ms: Long): State<Any?> {\n  val stateFlow = remember { MutableSharedFlow<T>() }\n  LaunchedEffect(value) {\n    stateFlow.emit(value)\n  }\n  return remember { stateFlow.conflate().map { delay(ms);it } }.collectAsState(value)\n}"},{"language":"kotlin","path":"desk/render/DesktopSearchBar.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.animation.Animatable\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.spring\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.focusable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.sizeIn\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.BasicTextField\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.outlined.Search\nimport androidx.compose.material3.Icon\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.focus.focusRequester\nimport androidx.compose.ui.focus.onFocusChanged\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.SolidColor\nimport androidx.compose.ui.platform.LocalFocusManager\nimport androidx.compose.ui.text.TextRange\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.helper.compose.NativeBackHandler\n\nprivate fun <T> aniSpec() = spring<T>(Spring.DampingRatioLowBouncy, Spring.StiffnessLow)\n\nprivate val outlineShape = RoundedCornerShape(24.dp)\n\n@OptIn(ExperimentalFoundationApi::class)\n@Composable\nfun rememberDesktopSearchBar() = remember { DesktopSearchBar() }\n\nclass DesktopSearchBar {\n  private var isFocused by mutableStateOf(false)\n  private val focusRequester = FocusRequester()\n//  private val isFocused get() = focusRequester.\n\n  private var searchValue by mutableStateOf(TextFieldValue(\"\"))\n  private val bgColorAni = Animatable(Color.White.copy(alpha = 0.2f))\n  val onSearchFlow = MutableSharedFlow<String>()\n\n  fun open() {\n    isFocused = true\n  }\n\n  fun close() {\n    isFocused = false\n  }\n\n  val isOpened get() = isFocused\n\n\n  @Composable\n  fun Render(modifier: Modifier = Modifier) {\n    val focusManager = LocalFocusManager.current\n    LaunchedEffect(isFocused) {\n      if (isFocused) {\n        searchValue = TextFieldValue(searchValue.text, TextRange(0, searchValue.text.length))\n        focusRequester.captureFocus()\n//        focusRequester.requestFocus()\n      } else {\n        focusRequester.freeFocus()\n        focusManager.clearFocus()\n      }\n      bgColorAni.animateTo(\n        when {\n          isFocused -> Color.Black.copy(alpha = 0.2f)\n          else -> Color.White.copy(alpha = 0.2f)\n        }, aniSpec()\n      )\n    }\n    val scope = rememberCoroutineScope()\n\n    Box(modifier, contentAlignment = Alignment.Center) {\n      BasicTextField(\n        searchValue,\n        onValueChange = { searchValue = it },\n        modifier = Modifier\n          // 布局与大小\n          .padding(horizontal = 8.dp).height(48.dp)\n          // 样式\n          .background(color = bgColorAni.value, shape = outlineShape)\n          .border(1.dp, color = Color.White, shape = outlineShape).animateContentSize(aniSpec())\n          // 行为\n          .focusRequester(focusRequester)\n          .focusable()\n          .onFocusChanged {\n            isFocused = it.isFocused\n          },\n        singleLine = true,\n        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),\n        keyboardActions = KeyboardActions(onSearch = {\n          val searchText = searchValue.text\n          scope.launch {\n            onSearchFlow.emit(searchText)\n          }\n//          onSearch(searchValue.text)\n//      onKeyboardDismiss()\n//          focusManager.clearFocus()\n          isFocused = false\n          searchValue = TextFieldValue(\"\")\n        }),\n        decorationBox = { innerTextField ->\n          NativeBackHandler(isFocused) {\n            isFocused = false\n//            focusManager.clearFocus()\n          }\n          LazyRow(\n            Modifier.padding(start = 12.dp, end = 16.dp).sizeIn(minWidth = 120.dp),\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.Center\n          ) {\n            item {\n              val iconScaleAni = remember { Animatable(0f) }\n              LaunchedEffect(isFocused) {\n                iconScaleAni.animateTo(if (isFocused) 24f / 32f else 1f, aniSpec())\n              }\n              Icon(\n                imageVector = Icons.Outlined.Search,\n                contentDescription = \"desk:search\",\n                tint = Color.White,\n                modifier = Modifier.animateItem(placementSpec = aniSpec())\n                  /// 这里不直接操作size，避免布局计算异常导致崩溃\n                  .size(32.dp).scale(iconScaleAni.value),\n              )\n            }\n            item {\n              Box(\n                contentAlignment = Alignment.CenterStart,\n                modifier = Modifier.padding(start = 4.dp).animateItem(placementSpec = aniSpec())\n                  .composed { if (isFocused) fillMaxWidth() else width(0.dp) }.fillMaxHeight()\n              ) {\n                innerTextField()\n              }\n            }\n          }\n        },\n        textStyle = TextStyle(Color.White, fontSize = 18.sp),\n        cursorBrush = SolidColor(Color.White),\n      )\n    }\n\n  }\n}"},{"language":"kotlin","path":"desk/render/DesktopV1View.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.safeContent\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.platform.LocalLayoutDirection\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.desk.DesktopV1Controller\nimport org.dweb_browser.dwebview.Render\nimport org.dweb_browser.helper.PureBounds\nimport org.dweb_browser.helper.compose.NativeBackHandler\n\n@Composable\nfun DesktopV1Controller.RenderImpl() {\n  val safeContent = WindowInsets.safeContent\n  val density = LocalDensity.current\n  val layoutDirection = LocalLayoutDirection.current\n  LaunchedEffect(safeContent, density, layoutDirection) {\n    desktopView.setSafeAreaInset(\n      PureBounds(\n        left = safeContent.getLeft(density, layoutDirection) / density.density,\n        top = safeContent.getTop(density) / density.density,\n        right = safeContent.getRight(density, layoutDirection) / density.density,\n        bottom = safeContent.getBottom(density) / density.density,\n      )\n    )\n  }\n  desktopView.Render(Modifier.fillMaxSize())\n  val canGoBack by desktopView.canGoBackStateFlow.collectAsState()\n  NativeBackHandler(canGoBack) {\n    desktopView.lifecycleScope.launch {\n      desktopView.goBack()\n    }\n  }\n\n  /// 新版本\n  // newVersionController.NewVersionView() // 先不搞这个\n}\n\n\n"},{"language":"kotlin","path":"desk/render/DesktopV2View.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.combinedClickable\nimport androidx.compose.foundation.interaction.MutableInteractionSource\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.asPaddingValues\nimport androidx.compose.foundation.layout.calculateEndPadding\nimport androidx.compose.foundation.layout.calculateStartPadding\nimport androidx.compose.foundation.layout.exclude\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.safeGestures\nimport androidx.compose.foundation.layout.union\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\nimport androidx.compose.foundation.lazy.grid.itemsIndexed\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.blur\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.layout.positionInWindow\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.platform.LocalLayoutDirection\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.util.fastRoundToInt\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.desk.DeskNMM\nimport org.dweb_browser.browser.desk.DesktopV2AppLayoutController\nimport org.dweb_browser.browser.desk.DesktopV2Controller\nimport org.dweb_browser.browser.desk.model.DesktopAppModel\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.helper.compose.pointerActions\nimport org.dweb_browser.helper.compose.uiTestTag\n\n@OptIn(ExperimentalFoundationApi::class)\n@Composable\nfun DesktopV2Controller.RenderImpl() {\n\n  val desktopController = this\n  val microModule = deskNMM\n  val appMenuPanel = rememberAppMenuPanel(desktopController, microModule)\n\n  val searchBar = rememberDesktopSearchBar()\n  val desktopWallpaper = rememberDesktopWallpaper()\n  Box(Modifier.fillMaxSize()) {\n    BoxWithConstraints(\n      modifier = Modifier.fillMaxSize().then(\n        when {\n          canSupportModifierBlur() -> Modifier.blur(20.dp * appMenuPanel.visibilityProgress)\n          else -> Modifier\n        }\n      ),\n      contentAlignment = Alignment.TopStart,\n    ) {\n      var edit by remember { mutableStateOf(false) }\n\n      desktopWallpaper.Render(Modifier.clickableWithNoEffect {\n        if (searchBar.isOpened) {\n          searchBar.close()\n        } else {\n          desktopWallpaper.play()\n        }\n      })\n      val layout = desktopGridLayout()\n      val layoutDirection = LocalLayoutDirection.current\n      val density = LocalDensity.current\n\n      val safeGestures = WindowInsets.safeGestures\n      val outerPadding = remember(layout.insets, safeGestures) {\n        val desktopPadding = layout.insets.union(safeGestures).asPaddingValues(density)\n        val safeGesturesPadding = safeGestures.asPaddingValues(density)\n        PaddingValues(\n          top = desktopPadding.calculateTopPadding(),\n          start = safeGesturesPadding.calculateStartPadding(layoutDirection),\n          bottom = desktopPadding.calculateBottomPadding(),\n          end = safeGesturesPadding.calculateEndPadding(layoutDirection),\n        )\n      }\n      Column(\n        horizontalAlignment = Alignment.CenterHorizontally,\n        modifier = Modifier\n          .fillMaxWidth()\n          .padding(outerPadding)\n          .combinedClickable(\n            indication = null,\n            interactionSource = remember { MutableInteractionSource() },\n            onClick = {\n              if (searchBar.isOpened) {\n                searchBar.close()\n              }\n              if (edit) {\n                edit = false\n              } else {\n                desktopWallpaper.play()\n              }\n            },\n            onLongClick = {\n              edit = true\n            }\n          ),\n      ) {\n        searchBar.Render(Modifier.padding(vertical = 16.dp))\n        LaunchedEffect(Unit) {\n          searchBar.onSearchFlow.collect { searchWord ->\n            if (searchWord.isNotEmpty()) {\n              desktopController.search(searchWord)\n            }\n          }\n        }\n        val innerPadding = remember(layout.insets, safeGestures) {\n          with(layout.insets.exclude(safeGestures).asPaddingValues(density)) {\n            PaddingValues(\n              start = calculateStartPadding(layoutDirection),\n              end = calculateEndPadding(layoutDirection),\n            )\n          }\n        }\n\n        when (val appsLayout = desktopController.appsLayout) {\n          null -> DeskGridUseLazyGridLayout(desktopController, deskNMM, appMenuPanel, innerPadding)\n          else -> DeskGridUseCustomGridLayout(\n            desktopController,\n            appsLayout,\n            deskNMM,\n            appMenuPanel,\n            innerPadding,\n            edit\n          )\n        }\n      }\n    }\n\n    appMenuPanel.Render(Modifier.fillMaxSize())\n  }\n}\n\n@Composable\ninternal fun DeskGridUseLazyGridLayout(\n  desktopController: DesktopV2Controller,\n  microModule: DeskNMM.DeskRuntime,\n  appMenuPanel: AppMenuPanel,\n  innerPadding: PaddingValues,\n) {\n  val scope = rememberCoroutineScope()\n  val apps = desktopController.appsFlow.collectAsState().value\n  val layout = desktopGridLayout()\n\n  LazyVerticalGrid(\n    columns = layout.cells,\n    contentPadding = innerPadding,\n    modifier = Modifier.fillMaxWidth().padding(top = 4.dp).onGloballyPositioned {\n      val pos = it.positionInWindow()\n      appMenuPanel.safeAreaInsets = WindowInsets(\n        top = pos.y.fastRoundToInt(),\n        left = pos.x.fastRoundToInt(),\n        right = pos.x.fastRoundToInt(),\n        bottom = 0,\n      )\n    },\n    horizontalArrangement = Arrangement.spacedBy(layout.horizontalSpace),\n    verticalArrangement = Arrangement.spacedBy(layout.verticalSpace)\n  ) {\n    itemsIndexed(apps) { index, app ->\n      AppItem(\n        app = app,\n        microModule = microModule,\n        edit = false,\n        editDragging = false,\n        modifier = Modifier.fillMaxSize(),\n        iconModifier = Modifier.pointerActions(\n          onMenu = {\n            appMenuPanel.show(app)\n          },\n          onTap = {\n            scope.launch {\n              desktopController.openAppOrActivate(app.mmid)\n            }\n          }\n        )\n      )\n    }\n  }\n}\n\n@Composable\ninternal fun DeskGridUseCustomGridLayout(\n  desktopController: DesktopV2Controller,\n  appsLayout: DesktopV2AppLayoutController,\n  microModule: DeskNMM.DeskRuntime,\n  appMenuPanel: AppMenuPanel,\n  innerPadding: PaddingValues,\n  edit: Boolean,\n) {\n  val scope = rememberCoroutineScope()\n  val apps = desktopController.appsFlow.collectAsState().value\n  val appsLayouts = appsLayout.appLayoutsFlow.collectAsState().value\n\n  key(apps, appsLayouts) {\n    DeskLayoutV6(\n      datas = apps,\n      modifier = Modifier.fillMaxSize().padding(top = 4.dp).onGloballyPositioned {\n        // 这里是计算app 菜单栏的位置\n        val pos = it.positionInWindow()\n        appMenuPanel.safeAreaInsets = WindowInsets(\n          top = pos.y.fastRoundToInt(),\n          left = pos.x.fastRoundToInt(),\n          right = pos.x.fastRoundToInt(),\n          bottom = 0,\n        )\n      },\n      edit = edit,\n      contentPadding = innerPadding,\n      layout = { screen ->\n        val layoutInfo = appsLayouts.firstOrNull {\n          it.screenWidth == screen\n        }\n        val result = mutableMapOf<DesktopAppModel, NFGeometry>()\n        apps.forEach { app ->\n          layoutInfo?.layouts?.get(app.mmid)?.let { layout ->\n            result[app] = layout\n          }\n        }\n        result\n      },\n      relayout = { layoutScreenWidth, geoMaps ->\n        scope.launch {\n          appsLayout.updateAppsLayouts(\n            screenWidth = layoutScreenWidth,\n            layouts = geoMaps.mapKeys { it.key.mmid },\n          )\n        }\n      }) { app, geometry, draging ->\n\n      val iConModifier = Modifier.run {\n        when {\n          edit -> this\n          else -> pointerActions(\n            onMenu = {\n              appMenuPanel.show(app)\n            },\n            onTap = {\n              scope.launch {\n                desktopController.openAppOrActivate(app.mmid)\n              }\n            },\n          )\n        }\n      }\n\n      AppItem(\n        app = app,\n        edit,\n        draging,\n        microModule = microModule,\n        modifier = Modifier.fillMaxSize(),\n        iconModifier = iConModifier.uiTestTag(\"desk:${app.mmid}\")\n      )\n    }\n  }\n}"},{"language":"kotlin","path":"desk/render/DesktopWallpaper.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.animation.core.LinearEasing\nimport androidx.compose.animation.core.exponentialDecay\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.BlendMode\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.drawscope.withTransform\nimport androidx.compose.ui.graphics.lerp\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.Constraints\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.delay\nimport kotlinx.datetime.Clock\nimport kotlinx.datetime.Instant\nimport kotlinx.datetime.LocalDateTime\nimport kotlinx.datetime.TimeZone\nimport kotlinx.datetime.toLocalDateTime\nimport org.dweb_browser.helper.SimplexNoise\nimport org.dweb_browser.helper.compose.hex\nimport org.dweb_browser.helper.datetimeNow\nimport org.dweb_browser.helper.scale\nimport kotlin.math.PI\nimport kotlin.math.cos\nimport kotlin.math.min\nimport kotlin.math.sin\n\n@Composable\nfun rememberDesktopWallpaper(calculation: DesktopWallpaper.() -> Unit = { }): DesktopWallpaper {\n  val scope = rememberCoroutineScope()\n  return remember(scope) { DesktopWallpaper(scope).apply(calculation) }\n}\n\nclass DesktopWallpaper(private val scope: CoroutineScope) {\n  //  var isTapDoAnimation by mutableStateOf(true)\n  var circleCount by mutableIntStateOf(8)\n\n  private val circles = mutableStateListOf<DesktopBgCircleModel>().apply {\n    addAll(randomCircle(circleCount))\n  }\n\n  private fun randomCircle(count: Int): List<DesktopBgCircleModel> {\n    val currentMoment: Instant = Clock.System.now()\n    val datetimeInSystemZone: LocalDateTime =\n      currentMoment.toLocalDateTime(TimeZone.currentSystemDefault())\n\n    val list = List(count) { index ->\n      DesktopBgCircleModel(index)\n    }\n\n    return list\n  }\n\n  var hour by mutableStateOf(0).apply {\n    val currentMoment: Instant = Clock.System.now()\n    val datetimeInSystemZone: LocalDateTime =\n      currentMoment.toLocalDateTime(TimeZone.currentSystemDefault())\n    value = datetimeInSystemZone.hour\n  }\n\n  fun play() {\n    circles.forEach {\n      it.doBubbleAnimation()\n    }\n  }\n\n  @Composable\n  fun Render(modifier: Modifier = Modifier) {\n    LaunchedEffect(Unit) {\n      while (true) {\n        val currentMoment: Instant = Clock.System.now()\n        val datetimeInSystemZone = currentMoment.toLocalDateTime(TimeZone.currentSystemDefault())\n        val toggleSeconds = (60 - datetimeInSystemZone.minute) * 60 - datetimeInSystemZone.second\n        delay(toggleSeconds.toLong() * 1000)\n        hour = datetimeInSystemZone.hour\n\n        /// 播放动画\n        play()\n        bgAni.animateTo(hour / 23f)\n      }\n    }\n\n/// 测试代码 记住当前时间的小时数\n//    var hour by remember { mutableStateOf(0) }\n//    // 使用 LaunchedEffect 实现每两秒钟更换一次配色\n//    LaunchedEffect(Unit) {\n//      while (true) {\n//        delay(2000) // 等待两秒钟\n//        hour = (hour + 1) % 24 // 更新小时数，保持在 0 到 23 之间循环\n//      }\n//    }\n/// 测试代码结束\n\n    // 根据小时数获取颜色列表\n    val colors = remember(hour) { desktopBgPrimaryColorStrings(hour) }\n//    val nextColors = remember(hour) { desktopBgPrimaryColorStrings(hour + 1) }\n//    val circleColors = colors + nextColors\n    BoxWithConstraints(modifier.fillMaxSize()) {\n      // 预备动画基本参数\n//      for (circle in circles) {\n//        circle.PrepareAnimation()\n//      }\n      Canvas(Modifier.fillMaxSize()) {\n        // 背景\n        drawBackground(colors)\n        // 动圈\n//        for (circle in circles) {\n//          circle.drawIntoCanvas(this, circleColors, constraints)\n//        }\n      }\n// 测试代码\n//      Text(\"$hour\", modifier.offset(26.dp, 26.dp), fontWeight = FontWeight.Bold)\n    }\n  }\n\n  private val bgAni = Animatable(hour / 23f);\n\n\n  /**\n   * 背景\n   */\n  private fun DrawScope.drawBackground(colors: List<Color>) {\n    val angle = bgAni.value / 24f * 360f + 90f //添加90度的偏移\n    val angleRad = angle * PI / 180\n\n    val start = Offset(\n      x = 0.5f + 0.5f * cos(angleRad).toFloat(), y = 0.5f - 0.5f * sin(angleRad).toFloat()\n    )\n    val end = Offset(\n      x = 0.5f - 0.5f * cos(angleRad).toFloat(), y = 0.5f + 0.5f * sin(angleRad).toFloat()\n    )\n    drawRect(\n      brush = Brush.linearGradient(\n        colors = colors,\n        start = Offset(size.width * start.x, size.height * start.y),\n        end = Offset(size.width * end.x, size.height * end.y)\n      )\n    )\n  }\n\n  var aniSpeed = 1 / 3000f\n  var aniDurationMillis\n    get() = ingSpec.durationMillis\n    set(value) {\n      ingSpec = tween(durationMillis = value, easing = LinearEasing)\n    }\n  private var ingSpec = tween<Float>(durationMillis = 3000, easing = LinearEasing)\n\n  private inner class DesktopBgCircleModel(private val seed: Int, initProgress: Float = 0f) {\n    val noise = SimplexNoise(seed)\n\n    val progressAni = Animatable(initProgress);\n\n\n    fun doBubbleAnimation() {\n      animationEndTime = datetimeNow() + ingSpec.durationMillis\n    }\n\n    var animationEndTime by mutableStateOf(0L)\n\n    @Composable\n    fun PrepareAnimation() {\n      LaunchedEffect(this, animationEndTime) {\n        while (animationEndTime > datetimeNow()) {\n          progressAni.animateTo(progressAni.value + aniSpeed * ingSpec.durationMillis, ingSpec)\n        }\n        val decay =\n          exponentialDecay<Float>(frictionMultiplier = aniSpeed * aniDurationMillis * 0.1f, 0.001f)\n        progressAni.animateDecay(aniSpeed * 1000, decay)\n      }\n    }\n\n\n    fun drawIntoCanvas(\n      scope: DrawScope,\n      colors: List<Color>,\n      constraints: Constraints,\n    ) {\n      val maxWidthPx = constraints.maxWidth\n      val maxHeightPx = constraints.maxHeight\n      val progress = progressAni.value.toDouble()\n      val n_size = noise.n2d(progress / 30, 2000.0).scale(0.1..0.4).toFloat()\n      val n_x = noise.n2d(progress / 10, 200.0).scale(-1.2..1.2).toFloat()\n      val n_y = noise.n2d(100.0, progress / 10).scale(-1.2..1.2).toFloat()\n      val n_brush = noise.n2d(1000.0, progress / 20).scale(0.8..1.2).toFloat()\n      val n_color = noise.n2d(progress / 30, 1000.0).scale(0.1..0.4).scale(colors.indices).toFloat()\n        .coerceAtLeast(0.0f) % colors.size\n      val n_alpha = noise.n2d(progress / 20, 2000.0).toFloat()\n      val colorProgress = n_color % 1\n      val currColorIndex = n_color.toInt()\n      val currColor = colors[currColorIndex].copy(alpha = n_alpha)\n      val nextColor = when (colorProgress) {\n        0.0f -> currColor\n        else -> colors[(currColorIndex + 1) % colors.size]\n      }.copy(alpha = n_alpha)\n      val color = lerp(currColor, nextColor, colorProgress)\n\n      val radius = (min(maxWidthPx, maxHeightPx) * n_size)\n      val halfRadiusOffset = -radius / 2\n\n      scope.withTransform({\n        translate(\n          left = halfRadiusOffset + (n_x * maxWidthPx),\n          top = halfRadiusOffset + (n_y * maxHeightPx),\n        )\n      }) {\n        val blendMode = when {\n          seed % 2 == 0 -> BlendMode.Overlay\n          else -> BlendMode.Lighten\n        }\n        when {\n          n_brush >= 1f -> drawCircle(\n            brush = Brush.verticalGradient(\n              0f to nextColor,\n              (n_brush - 1f) / 0.2f to color,\n              1f to color,\n              startY = 0f,\n              endY = radius * 2\n            ),\n            radius = radius,\n            blendMode = blendMode,\n          )\n\n          else -> drawCircle(\n            brush = Brush.radialGradient(\n              0f to color,\n              n_brush to color,\n              1f to Color.Transparent\n            ),\n            radius = radius,\n            blendMode = blendMode,\n          )\n        }\n      }\n    }\n  }\n}\n\n/**\n * 根据时间输出背景颜色\n */\nprivate fun desktopBgPrimaryColorStrings(hour: Int): List<Color> {\n  return when (hour % 24) {\n    0 -> listOf(\"#b565c8\", \"#7b97c8\")\n    1 -> listOf(\"#6b97e8\", \"#1157b1\")\n    2 -> listOf(\"#8f7ad5\", \"#de6a97\")\n    3 -> listOf(\"#4eb3ba\", \"#bf6da0\")\n    4 -> listOf(\"#bfda9c\", \"#8875b7\")\n    5 -> listOf(\"#86c7cc\", \"#a46daa\")\n    6 -> listOf(\"#ffb06b\", \"#7283cb\")\n    7 -> listOf(\"#fbc15f\", \"#5caee7\")\n    8 -> listOf(\"#bde391\", \"#6494d7\")\n    9 -> listOf(\"#6494d7\", \"#bde3a2\")\n    10 -> listOf(\"#92b1ff\", \"#2fc6f2\")\n    11 -> listOf(\"#62b1cf\", \"#a2cba9\")\n    12 -> listOf(\"#6dbbe1\", \"#bde3a2\")\n    13 -> listOf(\"#84d7b9\", \"#6dcbeb\")\n    14 -> listOf(\"#65bfef\", \"#fbd7a0\")\n    15 -> listOf(\"#f5ca81\", \"#77d7e5\")\n    16 -> listOf(\"#c1d7ca\", \"#fb8d5f\")\n    17 -> listOf(\"#fb8d5f\", \"#d1badf\")\n    18 -> listOf(\"#faa780\", \"#c1a949\")\n    19 -> listOf(\"#f37e84\", \"#6b97e8\")\n    20 -> listOf(\"#da8780\", \"#d1bf7a\")\n    21 -> listOf(\"#8f71a5\", \"#f37e84\")\n    22 -> listOf(\"#a47fa6\", \"#ecbb51\")\n    23 -> listOf(\"#ec9b5f\", \"#a46daa\")\n    else -> listOf(\"#84d7b9\", \"#62b1f6\")\n  }.map { Color.hex(it)!! }\n}\n\n//private fun desktopBgPrimaryRandomColor(hour: Int): Color {\n//  val colors = desktopBgPrimaryColorStrings(hour)\n//  val colorStart = colors.first()\n//  val colorEnd = colors.last()\n//\n//  fun getColor(range: IntRange): Int {\n//    val c0 = colorStart.substring(range).toInt(16)\n//    val c1 = colorEnd.substring(range).toInt(16)\n//    return if (c0 == c1) {\n//      255\n//    } else if (c0 < c1) {\n//      (c0..c1).random()\n//    } else {\n//      (c1..c0).random()\n//    }\n//  }\n//\n//  val color = Color(getColor(1..2), getColor(3..4), getColor(5..6))\n//  return color\n//}\n\n"},{"language":"kotlin","path":"desk/render/TaskBarAppIcon.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.spring\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.requiredSize\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.blur\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.Popup\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.desk.model.TaskbarAppModel\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.std.file.ext.blobFetchHook\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.helper.compose.pointerActions\nimport org.dweb_browser.helper.platform.theme.LocalColorful\nimport org.dweb_browser.sys.haptics.ext.vibrateHeavyClick\nimport org.dweb_browser.sys.haptics.ext.vibrateImpact\nimport org.dweb_browser.sys.window.render.AppIconContainer\nimport org.dweb_browser.sys.window.render.AppLogo\n\n@Composable\ninternal fun TaskBarAppIcon(\n  app: TaskbarAppModel,\n  microModule: NativeMicroModule.NativeRuntime,\n  openAppOrActivate: () -> Unit,\n  quitApp: () -> Unit,\n  toggleWindow: () -> Unit,\n  containerAlpha: Float? = null,\n  shadow: Dp? = null,\n  popupOffset: IntOffset? = null,\n  modifier: Modifier = Modifier,\n) {\n\n  val scope = rememberCoroutineScope()\n  var showQuit by remember(app.isShowClose) { mutableStateOf(app.isShowClose) }\n\n  var isHover by remember { mutableStateOf(false) }\n\n  val scaleTargetValue = when {\n    app.opening -> 0.9f\n    isHover -> when {\n      app.running -> 1.05f\n      else -> 0.9f\n    }\n\n    else -> 1f\n  }\n\n  BoxWithConstraints(\n    contentAlignment = Alignment.Center,\n    modifier = modifier.scale(\n      animateFloatAsState(\n        scaleTargetValue, when {\n          scaleTargetValue >= 1f -> spring(Spring.DampingRatioHighBouncy)\n          else -> tween(200)\n        }\n      ).value\n    ).pointerActions(\n      onHoverStart = {\n        scope.launch {\n          microModule.vibrateImpact()\n        }\n        isHover = true\n      },\n      onHoverEnd = {\n        isHover = false\n      },\n      onTap = {\n        openAppOrActivate()\n      },\n      onDoubleTap = {\n        scope.launch {\n          microModule.vibrateImpact()\n        }\n        openAppOrActivate()\n        if (app.running) {\n          toggleWindow()\n        }\n      },\n      onMenu = {\n        if (app.running) {\n          scope.launch {\n            microModule.vibrateHeavyClick()\n          }\n          showQuit = !showQuit\n        }\n      },\n    ),\n  ) {\n    AppLogo.from(app.icon, fetchHook = microModule.blobFetchHook, description = \"taskbar:${app.mmid}\").toDeskAppIcon(\n      AppIconContainer(shadow = shadow ?: if (app.running) 2.dp else null),\n      containerColor = if (app.running) null else LocalColorful.current.Gray.Shade_100,\n      containerAlpha = containerAlpha ?: if (app.running) 1f else 0.8f,\n    ).Render(\n      logoModifier = if (showQuit) Modifier.blur(4.dp) else Modifier,\n      innerContent = {\n        if (showQuit) {\n          Popup(\n            onDismissRequest = {\n              showQuit = false\n            },\n            offset = popupOffset ?: IntOffset.Zero\n          ) {\n            CloseButton(\n              Color.Black,\n              Modifier.requiredSize(size = maxWidth).clickableWithNoEffect {\n                quitApp()\n                showQuit = false\n              },\n            )\n          }\n        }\n      },\n    )\n  }\n}"},{"language":"kotlin","path":"desk/render/TaskBarDivider.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.foundation.background\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.unit.dp\n\n@Composable\ninternal fun TaskBarDivider(modifier: Modifier) {\n  HorizontalDivider(\n    modifier.background(\n      Brush.horizontalGradient(\n        listOf(\n          Color.Transparent, Color.Black, Color.Transparent\n        )\n      )\n    ),\n    thickness = (1 / LocalDensity.current.density).dp,\n    color = Color.Transparent,\n  )\n}"},{"language":"kotlin","path":"desk/render/TaskBarHomeButton.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.foundation.gestures.detectTapGestures\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.aspectRatio\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.desk.DeskNMM\nimport org.dweb_browser.helper.compose.hoverCursor\nimport org.dweb_browser.sys.haptics.ext.vibrateImpact\n\n@Composable\ninternal fun rememberTaskBarHomeButton(runtime: DeskNMM.DeskRuntime) =\n  remember(runtime) { BarHomeButton(runtime) }\n\ninternal class BarHomeButton(private val runtime: DeskNMM.DeskRuntime) {\n  private val scaleAni = Animatable(1f)\n  var isPressed by mutableStateOf(false)\n  private suspend fun press() {\n    scaleAni.animateTo(1.1f, deskAniFastSpec())\n  }\n\n  private suspend fun lift() {\n    scaleAni.animateTo(1.0f, deskAniSpec())\n  }\n\n  @Composable\n  fun Render(onClick: () -> Unit, modifier: Modifier = Modifier) {\n    LaunchedEffect(isPressed) {\n      if (isPressed) {\n        press()\n      } else {\n        lift()\n      }\n    }\n\n    BoxWithConstraints(\n      contentAlignment = Alignment.Center,\n      modifier = Modifier.scale(scaleAni.value).aspectRatio(1.0f)\n    ) {\n      val desktopWallpaper = rememberDesktopWallpaper {\n        aniSpeed *= 5\n        aniDurationMillis /= 5\n      }\n      desktopWallpaper.Render(modifier.shadow(3.dp, CircleShape).clip(CircleShape)\n        .hoverCursor()\n        .pointerInput(Unit) {\n          this.detectTapGestures(\n            onPress = {\n              isPressed = true\n              runtime.vibrateImpact()\n            },\n            onLongPress = {\n              isPressed = false\n            },\n            onTap = {\n              isPressed = false\n              onClick()\n              desktopWallpaper.play()\n            },\n          )\n        })\n    }\n  }\n}"},{"language":"kotlin","path":"desk/render/TaskbarV1View.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.runtime.Composable\nimport org.dweb_browser.browser.desk.TaskbarV1Controller\nimport org.dweb_browser.dwebview.IDWebView\n\nexpect suspend fun ITaskbarV1View.Companion.create(\n  controller: TaskbarV1Controller,\n  webview: IDWebView,\n): ITaskbarV1View\n\nabstract class ITaskbarV1View(private val taskbarController: TaskbarV1Controller) {\n  val state = taskbarController.state\n\n  abstract val taskbarDWebView: IDWebView\n\n  companion object {}\n\n  @Composable\n  abstract fun Render()\n}\n"},{"language":"kotlin","path":"desk/render/TaskbarV2View.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.spring\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxScope\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.requiredHeightIn\nimport androidx.compose.foundation.layout.requiredSize\nimport androidx.compose.foundation.layout.requiredWidth\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.CornerSize\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.geometry.Size\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.Layout\nimport androidx.compose.ui.layout.boundsInRoot\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.util.fastCoerceIn\nimport androidx.compose.ui.util.lerp\nimport androidx.compose.ui.window.Popup\nimport androidx.compose.ui.window.PopupProperties\nimport androidx.compose.ui.zIndex\nimport org.dweb_browser.browser.desk.TaskbarV2Controller\nimport org.dweb_browser.browser.desk.model.TaskbarAppModel\nimport org.dweb_browser.helper.clamp\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.platform.isAndroid\nimport org.dweb_browser.helper.platform.isDesktop\nimport org.dweb_browser.helper.platform.isIOS\nimport org.dweb_browser.sys.window.core.constant.WindowMode\nimport org.dweb_browser.sys.window.floatBar.DraggableDelegate\nimport org.dweb_browser.sys.window.floatBar.floatBarDefaultShape\nimport kotlin.math.min\nimport kotlin.math.sqrt\n\nprivate const val TASKBAR_MIN_WIDTH = 42f\nprivate const val TASKBAR_MAX_WIDTH = 54f\nprivate const val TASKBAR_PADDING_VALUE = 6f\nprivate const val TASKBAR_DIVIDER_HEIGHT = 8f\n\nexpect fun ITaskbarV2View.Companion.create(taskbarController: TaskbarV2Controller): ITaskbarV2View\n\n/**\n * Popup 策略\n */\nprivate enum class PopupStrategy {\n  /**\n   * 禁用，用于桌面端\n   * 桌面端的popup，渲染起来会有层级错误的问题\n   */\n  DISABLED,\n\n  /**\n   * 按需，用于IOS\n   * 会有一些帧不连贯的、或者残影、或者延迟等问题、性能也比ALWAYS差一些，毕竟会导致内容完全重新渲染\n   * 如果IOS修复了Popup抖动的问题，那么可以改为ALWAYS\n   */\n  REQUIRED,\n\n  /**\n   * 总是，用于Android\n   */\n  ALWAYS,\n}\n\ninternal enum class TaskbarShape {\n  /**\n   * 沉浸式，隐藏Taskbar，显示Arrow图标，hover即可恢复正常显示，可用于 全屏视频、游戏时\n   */\n  IMMERSIVE,\n\n  /**\n   * 正常显示Taskbar\n   */\n  NORMAL,\n}\n\nabstract class ITaskbarV2View(protected val taskbarController: TaskbarV2Controller) {\n  companion object {}\n\n  val state = taskbarController.state\n\n  @Composable\n  protected fun RenderContent(\n    draggableDelegate: DraggableDelegate,\n    displaySize: Size,\n    scrollMaskColor: Color = Color.Transparent,\n    modifier: Modifier = Modifier,\n  ) {\n    val apps by taskbarController.appsFlow.collectAsState()\n    val firstItem = apps.firstOrNull() ?: TaskbarAppModel(\"\", icon = null, running = false)\n\n    val appCount = apps.size\n\n    /**\n     * popup的渲染策略\n     */\n    val popupStrategy = remember {\n      when {\n        IPureViewController.isAndroid -> PopupStrategy.ALWAYS\n        IPureViewController.isDesktop -> PopupStrategy.DISABLED\n        IPureViewController.isIOS -> PopupStrategy.REQUIRED\n        else -> PopupStrategy.DISABLED\n      }\n    }\n\n    /**\n     * 能否进行折叠\n     *\n     * 在移动设备上，使用折叠来节省屏幕空间，点击进行展开。\n     */\n    val canFold = when {\n      popupStrategy == PopupStrategy.DISABLED -> false\n      else -> when (firstItem.state.mode) {\n        WindowMode.MAXIMIZE, WindowMode.FULLSCREEN -> true\n        else -> false\n      }\n    }\n    var isFocus by remember { mutableStateOf(false) }\n\n    /**\n     * 是否展开 taskbar 的 apps\n     */\n    val isExpanded = when {\n      canFold -> !firstItem.state.visible || isFocus\n      else -> true\n    }\n    val expandedAni = remember { Animatable(1f) }\n    LaunchedEffect(isExpanded) {\n      if (isExpanded) {\n        expandedAni.animateTo(1f, taskbarExpandedAniSpec())\n      } else {\n        expandedAni.animateTo(0f, taskbarFoldAniSpec())\n      }\n    }\n\n    var taskbarWidth by remember { mutableStateOf(TASKBAR_MAX_WIDTH) }\n    var paddingValue by remember { mutableStateOf(TASKBAR_PADDING_VALUE) }\n    var dividerHeight by remember { mutableStateOf(TASKBAR_DIVIDER_HEIGHT) }\n    var appIconsExpandedHeight by remember { mutableStateOf(0f) }\n    var appIconsFoldHeight by remember { mutableStateOf(0f) }\n    var iconSize by remember { mutableStateOf(0f) }\n    var taskbarAppsMaxHeight by remember { mutableStateOf(0f) }\n    LaunchedEffect(appCount, displaySize, isExpanded) {\n      taskbarWidth = clamp(\n        TASKBAR_MIN_WIDTH, min(displaySize.width, displaySize.height) * 0.14f, TASKBAR_MAX_WIDTH\n      )\n      /// 更新taskbar宽度\n      state.layoutWidth = taskbarWidth\n      paddingValue = TASKBAR_PADDING_VALUE * taskbarWidth / TASKBAR_MAX_WIDTH\n      dividerHeight = TASKBAR_DIVIDER_HEIGHT * taskbarWidth / TASKBAR_MAX_WIDTH\n      iconSize = taskbarWidth - paddingValue\n      if (appCount == 0) {\n        appIconsExpandedHeight = 0f\n        appIconsFoldHeight = 0f\n      } else {\n        appIconsExpandedHeight = appCount * iconSize + paddingValue\n        appIconsFoldHeight = taskbarWidth + appCount\n      }\n      taskbarAppsMaxHeight = displaySize.height - taskbarWidth - paddingValue\n    }\n\n    val taskBarHomeButton = rememberTaskBarHomeButton(taskbarController.deskNMM)\n    LaunchedEffect(draggableDelegate, taskBarHomeButton) {\n      draggableDelegate.dragCallbacks += \"free taskbar-home-button\" to {\n        taskBarHomeButton.isPressed = false\n      }\n    }\n\n    Layout(modifier = modifier, content = {\n      val taskbarWidthDp = taskbarWidth.dp\n      Column(\n        modifier = Modifier.requiredWidth(taskbarWidthDp),\n        verticalArrangement = Arrangement.SpaceBetween,\n        horizontalAlignment = Alignment.CenterHorizontally\n      ) {\n        val taskbarAppsHeight = lerp(appIconsFoldHeight, appIconsExpandedHeight, expandedAni.value)\n        val taskbarAppsHeightDp = taskbarAppsHeight.dp\n\n        val taskbarAppsMaxHeightDp = taskbarAppsMaxHeight.dp\n\n\n        @Composable\n        fun AppsScrollBox(content: @Composable BoxScope.() -> Unit) {\n          val appsScrollState = rememberScrollState()\n          Box(\n            Modifier.requiredSize(taskbarWidthDp, min(taskbarAppsMaxHeight, taskbarAppsHeight).dp)\n              .clip(\n                floatBarDefaultShape.copy(\n                  bottomStart = CornerSize(0.dp), bottomEnd = CornerSize(0.dp)\n                )\n              )\n          ) {\n            Box(\n              Modifier.requiredWidth(taskbarWidthDp).requiredHeightIn(max = taskbarAppsMaxHeightDp)\n                .verticalScroll(appsScrollState)\n            ) {\n              Box(\n                modifier = Modifier.requiredSize(taskbarWidthDp, taskbarAppsHeightDp),\n                contentAlignment = Alignment.TopCenter,\n                content = content,\n              )\n            }\n            val d = LocalDensity.current.density\n            val scrollY = appsScrollState.value / d\n            val scrollMaskHeight = paddingValue * 2\n            val scrollMaskHeightDp = scrollMaskHeight.dp\n            if (scrollY > 0f) {\n              Box(\n                Modifier.fillMaxWidth().height(scrollMaskHeightDp).offset(\n                  y = lerp(\n                    -scrollMaskHeight, 0f, (scrollY / (scrollMaskHeight * 2)).fastCoerceIn(0f, 1f)\n                  ).dp\n                ).background(Brush.verticalGradient(listOf(scrollMaskColor, Color.Transparent)))\n              )\n            }\n            if (taskbarAppsHeight > taskbarAppsMaxHeight) {\n              val maxScrollY = appsScrollState.maxValue / d\n              Box(\n                Modifier.fillMaxWidth().height(scrollMaskHeightDp).offset(\n                  y = lerp(\n                    taskbarAppsMaxHeight - scrollMaskHeight,\n                    taskbarAppsMaxHeight,\n                    (1 - (maxScrollY - scrollY) / (scrollMaskHeight * 2)).fastCoerceIn(0f, 1f)\n                  ).dp\n                ).background(Brush.verticalGradient(listOf(Color.Transparent, scrollMaskColor)))\n              )\n            }\n          }\n        }\n\n        @Composable\n        fun <T> itemsIndexed(\n          list: List<T>, getKey: (Int, T) -> Any?, action: @Composable (index: Int, T) -> Unit,\n        ) {\n          list.forEachIndexed { index, item ->\n            key(getKey(index, item)) {\n              action(index, item)\n            }\n          }\n        }\n\n        @Composable\n        fun AppsRender(popupOffset: IntOffset? = null) {\n          itemsIndexed(\n            apps,\n            getKey = { _, it -> it.mmid },\n          ) { index, app ->\n            val aniProp = app.rememberAniProp()\n            aniProp.setOffsetY(lerp(index.toFloat(), iconSize * index, expandedAni.value))\n            /// 让动画计算\n            aniProp.Effect()\n\n            @Suppress(\"DeferredResultUnused\") TaskBarAppIcon(\n              app = app,\n              microModule = taskbarController.deskNMM,\n              openAppOrActivate = {\n                if (canFold) {\n                  isFocus = true\n                }\n\n                app.openingFlow.value = true\n                taskbarController.openAppOrActivate(app.mmid).invokeOnCompletion {\n                  app.openingFlow.value = false\n                }\n              },\n              quitApp = {\n                taskbarController.closeApp(app.mmid)\n              },\n              toggleWindow = {\n                taskbarController.toggleWindowMaximize(app.mmid)\n              },\n              modifier = Modifier.zIndex(apps.size - index - 1f).offset(y = aniProp.offsetYDp)\n                .requiredSize(taskbarWidth.dp).padding(horizontal = paddingValue.dp),\n              containerAlpha = when {\n                isExpanded -> null\n                else -> 1f\n              },\n              shadow = when {\n                isExpanded -> null\n                else -> 1.dp\n              },\n              popupOffset = popupOffset,\n            )\n          }\n        }\n\n        /// 修改图层的背景颜色\n        LaunchedEffect(isFocus) {\n          taskbarController.state.backgroundAlphaGetter = when {\n            isFocus -> ({ sqrt(it) })\n            else -> null\n          }\n        }\n\n        when {\n          popupStrategy == PopupStrategy.DISABLED || (popupStrategy == PopupStrategy.REQUIRED && !isFocus) -> AppsScrollBox { AppsRender() }\n\n          else -> {\n            /// 这里因为是一个新的Popup，所以需要手动记录一下位置，为内部长按的popup提供位置\n            var popupPos by remember { mutableStateOf(IntOffset.Zero) }\n            val density = LocalDensity.current.density\n            Box(Modifier.onGloballyPositioned {\n              popupPos = it.boundsInRoot().run {\n                IntOffset(\n                  x = (left + taskbarController.state.layoutX * density).toInt(),\n                  y = (top + taskbarController.state.layoutY * density).toInt(),\n                )\n              }\n            })\n\n            /// 这里Popup需要长期存在，否则如果开关popup，会导致popup渲染残影\n            Box(\n              Modifier.requiredSize(taskbarWidthDp, min(taskbarAppsMaxHeight, taskbarAppsHeight).dp)\n            ) {\n              Popup(\n                onDismissRequest = {\n                  isFocus = false\n                }, properties = PopupProperties(\n//                focusable = isFocus,\n                  dismissOnBackPress = true,\n                  dismissOnClickOutside = true,\n                  clippingEnabled = true,\n                )\n              ) {\n                AppsScrollBox {\n                  AppsRender(if (IPureViewController.isAndroid) popupPos else null)\n                }\n              }\n            }\n          }\n        }\n\n        /// IOS平台上，popup居然回因为外部scale导致位置重新计算\n        if (IPureViewController.isIOS) {\n          @Composable\n          fun FixIosPopupPosition(initScale: Float) {\n            var scale by remember { mutableStateOf(initScale) }\n            LaunchedEffect(scale) {\n              scale = when (scale) {\n                1f -> 2f\n                else -> 1f\n              }\n            }\n            /// 发现每次切回1的时候，它就正常一次？\n            Box(Modifier.scale(scale).size(10.dp, 1.dp))\n          }\n          /// 所以这里交叉切换，来强行让popup每一帧都在刷新位置\n          FixIosPopupPosition(1f)\n          FixIosPopupPosition(2f)\n        }\n\n        /// apps 和 底部按钮的分割线\n        if (appCount > 0) {\n          TaskBarDivider(Modifier.padding(horizontal = paddingValue.dp))\n        }\n\n        /// 底部按钮\n        taskBarHomeButton.Render({\n          taskbarController.toggleDesktopView()\n        }, Modifier.padding(paddingValue.dp).zIndex(apps.size.toFloat()))\n      }\n    }) { measurables, constraints ->\n      val placeables = measurables.map { measurable ->\n        measurable.measure(constraints.copy(maxHeight = Int.MAX_VALUE, maxWidth = Int.MAX_VALUE))\n      }\n      val layoutWidth = placeables.maxOf { it.width }\n      val layoutHeight = placeables.maxOf { it.height }\n      taskbarController.state.layoutWidth = layoutWidth / density\n      taskbarController.state.layoutHeight = layoutHeight / density\n      layout(layoutWidth, constraints.maxHeight) {\n        for (placeable in placeables) {\n          placeable.place(0, 0)\n        }\n      }\n    }\n  }\n\n  @Composable\n  abstract fun Render()\n}\n\n\nprivate fun <T> taskbarExpandedAniSpec() =\n  spring<T>(Spring.DampingRatioLowBouncy, stiffness = Spring.StiffnessMediumLow)\n\nprivate fun <T> taskbarFoldAniSpec() =\n  spring<T>(Spring.DampingRatioNoBouncy, stiffness = Spring.StiffnessMedium)\n"},{"language":"kotlin","path":"desk/render/deskHelper.kt","content":"package org.dweb_browser.browser.desk.render\n\n\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.spring\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.lazy.grid.GridCells\nimport androidx.compose.ui.unit.Dp\nimport squircleshape.CornerSmoothing\nimport squircleshape.SquircleShape\nimport kotlin.math.max\n\ninternal fun <T> deskAniFastSpec() = spring<T>(Spring.DampingRatioLowBouncy, Spring.StiffnessMedium)\ninternal fun <T> deskAniSpec() = spring<T>(Spring.DampingRatioLowBouncy, Spring.StiffnessLow)\ninternal fun <T> deskAniSpec1() = tween<T>(3000)\n\ninternal fun deskSquircleShape() = SquircleShape(30, CornerSmoothing.Small)\n\n/**\n * 透明度不能太小，否则会引起渲染异常，图层会会某名奇妙永远消失\n */\nfun safeAlpha(alpha: Float) = max(alpha, 0.01f)\n\ndata class DesktopGridLayout(\n  val cells: GridCells, val insets: WindowInsets,\n  val horizontalSpace: Dp, val verticalSpace: Dp,\n) {\n  constructor(cells: GridCells, insets: WindowInsets, space: Dp) : this(\n    cells, insets, space, space\n  )\n}\n\nexpect fun desktopGridLayout(): DesktopGridLayout\n\nexpect fun canSupportModifierBlur(): Boolean\n\nexpect fun getLayoutParams(width: Int, height: Int): NFCacalaterParams\n\nexpect fun layoutSaveStrategyIsMultiple(): Boolean\n"},{"language":"kotlin","path":"desk/render/menuTooltipPositionProvider.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.IntRect\nimport androidx.compose.ui.unit.IntSize\nimport androidx.compose.ui.unit.LayoutDirection\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.window.PopupPositionProvider\n\n@Composable\nfun rememberMenuTooltipPositionProvider(spacingBetweenTooltipAndAnchor: Dp = SpacingBetweenTooltipAndAnchor): MenuTooltipPositionProvider {\n  val tooltipAnchorSpacing = with(LocalDensity.current) {\n    spacingBetweenTooltipAndAnchor.roundToPx()\n  }\n  return remember(tooltipAnchorSpacing) {\n    MenuTooltipPositionProvider(tooltipAnchorSpacing)\n  }\n}\n\ninternal val SpacingBetweenTooltipAndAnchor = 4.dp\n\nclass MenuTooltipPositionProvider(val tooltipAnchorSpacing: Int) : PopupPositionProvider {\n  override fun calculatePosition(\n    anchorBounds: IntRect,\n    windowSize: IntSize,\n    layoutDirection: LayoutDirection,\n    popupContentSize: IntSize,\n  ): IntOffset {\n    val x: Int\n    if (popupContentSize.width > windowSize.width) {\n      x = windowSize.width - popupContentSize.width / 2\n    } else if (anchorBounds.center.x < windowSize.width / 2) {\n      // 尝试从 锚地 的左边开始\n      var left = anchorBounds.left\n      // 如果右边溢出了，那么向左平移动，直到放下整个 pop\n      if (left + popupContentSize.width > windowSize.width) {\n        left = windowSize.width - popupContentSize.width\n      }\n      x = left\n    } else {\n      // 尝试从 锚地 的右边开始\n      var right = anchorBounds.right\n      // 如果左边溢出了，那么向右平移，直到放下整个 pop\n      if (right - popupContentSize.width < 0) {\n        right = popupContentSize.width\n      }\n      x = right - popupContentSize.width\n    }\n\n\n    var y = anchorBounds.top - popupContentSize.height - tooltipAnchorSpacing\n    if (y < 0)\n      y = anchorBounds.bottom + tooltipAnchorSpacing\n    return IntOffset(x, y)\n  }\n}"},{"language":"kotlin","path":"desk/render/modifierJump.kt","content":"package org.dweb_browser.browser.desk.render\n\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.animation.core.CubicBezierEasing\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.spring\nimport androidx.compose.animation.core.tween\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.platform.LocalDensity\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\n\n/***\n * app跳动动画效果\n */\nfun Modifier.jump(\n  enable: Boolean,\n  height: Float = 8f,\n  duration: Int = 600,\n  repeatInterval: Int = 700\n) = composed {\n  val offsetY = remember { Animatable(0f) }\n  val scope = rememberCoroutineScope()\n  LaunchedEffect(enable) {\n    if (enable) {\n      scope.launch {\n        while (true) {\n          // 上升动画\n          offsetY.animateTo(\n            targetValue = -height,\n            animationSpec = tween(\n              durationMillis = duration / 2,\n              easing = CubicBezierEasing(0.17f, 0.67f, 0.83f, 0.67f) //给自然的加速和减速效果\n            )\n          )\n          // 下降动画\n          offsetY.animateTo(\n            targetValue = 0f,\n            animationSpec = spring(\n              dampingRatio = Spring.DampingRatioMediumBouncy,\n              stiffness = Spring.StiffnessLow\n            )\n          )\n          // 等待下一次跳跃\n          delay(repeatInterval.toLong() - duration)\n        }\n      }\n    } else {\n      // 如果禁用，确保回到初始位置\n      offsetY.animateTo(0f, spring())\n    }\n  }\n\n  val density = LocalDensity.current\n  Modifier.graphicsLayer {\n    translationY = offsetY.value * density.density\n  }\n}"},{"language":"kotlin","path":"desk/types/DeskAppMetaData.kt","content":"package org.dweb_browser.browser.desk.types\n\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.core.help.types.IMicroModuleManifest\nimport org.dweb_browser.core.help.types.MicroModuleManifest\nimport org.dweb_browser.helper.PropMetas\nimport org.dweb_browser.helper.PropMetasSerializer\nimport org.dweb_browser.sys.window.core.WindowState\n\n\n//object DeskAppMetaDataSerializer:KSerializer<DeskAppMetaData>{\n//  override val descriptor = buildClassSerialDescriptor(\"DeskAppMetaData\"){\n//\n//  }\n//  override fun deserialize(decoder: Decoder): DeskAppMetaData {\n//\n//  }\n//  override fun serialize(encoder: Encoder, value: DeskAppMetaData) {\n//\n//  }\n//}\n\nobject DeskAppMetaDataSerializer : PropMetasSerializer<DeskAppMetaData>(DeskAppMetaData.P)\n\n@Serializable(DeskAppMetaDataSerializer::class)\nclass DeskAppMetaData private constructor(\n  p: PropMetas.PropValues,\n  private val data: MicroModuleManifest,\n) : PropMetas.Constructor<DeskAppMetaData>(p, P), IDeskAppMetaData, IMicroModuleManifest by data {\n  constructor(p: PropMetas.PropValues = P.buildValues()) : this(p = p, MicroModuleManifest(p))\n\n  companion object {\n    val P = PropMetas(\"DeskAppMetaData\") { DeskAppMetaData(it) }.extends(MicroModuleManifest.P)\n    val P_running = P.required<Boolean>(\"running\", false) // 是否正在运行\n    val P_winStates = P.list<WindowState>(\"winStates\") // 当前进程所拥有的窗口的状态\n  }\n\n  override var running by P_running(p)\n  override var winStates by P_winStates(p)\n}\n\ninterface IDeskAppMetaData : IMicroModuleManifest {\n  var running: Boolean\n  var winStates: List<WindowState>\n}\n\n"},{"language":"kotlin","path":"desk/upgrade/NewVersionController.kt","content":"package org.dweb_browser.browser.desk.upgrade\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport org.dweb_browser.browser.desk.DeskNMM\nimport org.dweb_browser.browser.desk.DesktopV1Controller\nimport org.dweb_browser.browser.desk.debugDesk\nimport org.dweb_browser.browser.download.ext.createDownloadTask\nimport org.dweb_browser.browser.download.ext.downloadProgressFlow\nimport org.dweb_browser.browser.download.ext.existDownloadTask\nimport org.dweb_browser.browser.download.ext.pauseDownload\nimport org.dweb_browser.browser.download.ext.removeDownload\nimport org.dweb_browser.browser.download.ext.startDownload\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.web.openFileByPath\nimport org.dweb_browser.helper.SuspendOnce\nimport org.dweb_browser.helper.falseAlso\nimport org.dweb_browser.helper.isGreaterThan\nimport org.dweb_browser.sys.device.ext.getDeviceAppVersion\nimport org.dweb_browser.sys.permission.SystemPermissionName\nimport org.dweb_browser.sys.permission.ext.requestSystemPermission\nimport org.dweb_browser.sys.toast.ext.showToast\n\n\n/**\n * 获取当前版本，存储的版本，以及在线加载最新版本\n */\nexpect suspend fun loadApplicationNewVersion(): NewVersionItem?\n\nenum class NewVersionType {\n  Hide, NewVersion, Download, Install;\n}\n\nclass NewVersionController(\n  internal val deskNMM: DeskNMM.DeskRuntime,\n  val desktopController: DesktopV1Controller,\n) {\n  private val store = NewVersionStore(deskNMM)\n  var newVersionItem by mutableStateOf<NewVersionItem?>(null)\n  var newVersionType by mutableStateOf(NewVersionType.Hide) // 用于显示新版本提醒的控制\n  var canOpen by mutableStateOf(false) // 默认不需要重新打开，只有在授权后返回时，才需要重新打开\n\n  init {\n    deskNMM.scopeLaunch(cancelable = true) { initNewVersionItem() }\n  }\n\n  private suspend fun initNewVersionItem() {\n    val currentVersion = deskNMM.getDeviceAppVersion() // 获取当前系统的 app 版本\n    val saveVersionItem = store.getNewVersion() // 获取之前下载存储的版本\n    val loadVersionItem = loadApplicationNewVersion() // 获取服务器最新的版本\n    // 直接判断 load 和 save 版本是否高于系统版本\n    val loadHigher = loadVersionItem?.let {\n      loadVersionItem.versionName.isGreaterThan(currentVersion)\n    } ?: false\n    val saveHigher = saveVersionItem?.let {\n      saveVersionItem.versionName.isGreaterThan(currentVersion)\n    } ?: false\n\n    // 根据 loadHigher 和 saveHigher 赋值 newVersionItem\n    newVersionItem = if (loadHigher && saveHigher) {\n      if (loadVersionItem!!.versionName.isGreaterThan(saveVersionItem!!.versionName)) {\n        saveVersionItem.taskId?.let { taskId -> deskNMM.removeDownload(taskId) }\n        loadVersionItem\n      } else {\n        saveVersionItem\n      }\n    } else if (loadHigher) {\n      saveVersionItem?.taskId?.let { taskId -> deskNMM.removeDownload(taskId) }\n      loadVersionItem\n    } else if (saveHigher) {\n      saveVersionItem\n    } else {\n      null\n    }\n\n    // 如果 newVersionItem 为空的话，那么就不需要显示了；如果不为空，判断状态进行指定跳转\n    newVersionItem?.let { newVersion ->\n      if (newVersion.status.state == DownloadState.Completed) {\n        newVersionType = NewVersionType.Install\n      } else {\n        newVersionType = NewVersionType.NewVersion\n      }\n    }\n    debugDesk(\"NewVersion\", \"hasNew=${newVersionType} => $newVersionItem\")\n  }\n\n  private suspend fun watchProcess(taskId: String, newVersionItem: NewVersionItem): Boolean {\n    var success = false;\n    deskNMM.downloadProgressFlow(taskId).collect { status ->\n      if (status.state == DownloadState.Completed) {\n        success = true\n      }\n      newVersionItem.updateDownloadStatus(status, store)\n    }\n    return success\n  }\n\n  val downloadApp = SuspendOnce(before = {\n    val grant = deskNMM.requestSystemPermission(\n      name = SystemPermissionName.STORAGE,\n      title = NewVersionI18nResource.request_permission_title_storage.text,\n      description = NewVersionI18nResource.request_permission_message_storage.text\n    )\n    if (!grant) {\n      deskNMM.showToast(NewVersionI18nResource.toast_message_permission_fail.text)\n      throw IllegalStateException(NewVersionI18nResource.toast_message_permission_fail.text)\n    }\n  }) {\n    newVersionItem?.let { newVersion ->\n      var taskId = newVersion.taskId\n      if (taskId == null || !deskNMM.existDownloadTask(taskId)) {\n        val downloadTask = deskNMM.createDownloadTask(url = newVersion.originUrl, external = true)\n        taskId = downloadTask.id\n        newVersion.initDownloadTask(downloadTask, store)\n        deskNMM.scopeLaunch(cancelable = true) {\n          if (watchProcess(taskId, newVersion)) {\n            // 跳转到安装界面\n            val realPath = downloadTask.filepath\n            if (openFileByPath(realPath = realPath, justInstall = true)) { // 安装文件 TODO\n              newVersionType = NewVersionType.Hide\n              // 清除保存的新版本信息\n              store.clear()\n            } else {\n              debugDesk(\"NewVersion\", \"no Install Apk Permission\")\n              newVersionType = NewVersionType.Install\n            }\n          }\n        }\n      }\n\n      deskNMM.startDownload(taskId).falseAlso {\n        deskNMM.showToast(NewVersionI18nResource.toast_message_download_fail.text)\n      }\n    }\n  }\n\n\n  suspend fun pause() = newVersionItem?.taskId?.let { deskNMM.pauseDownload(it) } ?: false\n\n  fun openSystemInstallSetting() = run {\n    canOpen = true // 为了使得返回的时候重新判断是否安装\n    // TODO 这边似乎还没完成\n    // OpenFileUtil.openSystemInstallSetting()\n  }\n}"},{"language":"kotlin","path":"desk/upgrade/NewVersionI18nResource.kt","content":"package org.dweb_browser.browser.desk.upgrade\n\nimport org.dweb_browser.helper.compose.Language\nimport org.dweb_browser.helper.compose.SimpleI18nResource\n\nobject NewVersionI18nResource {\n  val toast_message_download_fail =\n    SimpleI18nResource(Language.ZH to \"下载失败\", Language.EN to \"Download Fail\")\n\n  val toast_message_storage_fail = SimpleI18nResource(\n    Language.ZH to \"文件存储失败，请重新下载\",\n    Language.EN to \"File storage failed, please download again\"\n  )\n\n  val toast_message_permission_fail =\n    SimpleI18nResource(Language.ZH to \"授权失败\", Language.EN to \"authorization failed\")\n\n  val request_permission_title_install = SimpleI18nResource(\n    Language.ZH to \"请求安装应用权限\",\n    Language.EN to \"Request permission to install the application\"\n  )\n  val request_permission_message_install = SimpleI18nResource(\n    Language.ZH to \"安装应用需要请求安装应用权限，请手动设置\",\n    Language.EN to \"To install an application, you need to request the permission to install the application\"\n  )\n\n  val request_permission_title_storage = SimpleI18nResource(\n    Language.ZH to \"请求外部存储权限\", Language.EN to \"Request external storage permissions\"\n  )\n  val request_permission_message_storage = SimpleI18nResource(\n    Language.ZH to \"DwebBrowser正在向您获取“存储”权限，同意后，将用于存储下载的应用\",\n    Language.EN to \"DwebBrowser is asking you to \\\"store\\\" permission, if you agree, it will be used to store the downloaded application\"\n  )\n}"},{"language":"kotlin","path":"desk/upgrade/NewVersionStore.kt","content":"package org.dweb_browser.browser.desk.upgrade\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.download.model.DownloadStateEvent\nimport org.dweb_browser.browser.download.model.DownloadTask\nimport org.dweb_browser.browser.download.TaskId\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.file.ext.createStore\nimport org.dweb_browser.helper.compose.ObservableMutableState\nimport org.dweb_browser.helper.datetimeNow\n\n@Serializable\nclass NewVersionItem(\n  val originUrl: String,\n  val versionName: String,\n) {\n  val versionCode: Long = datetimeNow() // 暂时不确定是否用到，先申明一个预留字段\n  val description: String? = null  //表示升级内容描述\n\n  @SerialName(\"status\")\n  private var _status: NewVersionStatus = NewVersionStatus()\n  val forceUpdate: Boolean = false  // 是否强制更新\n  var taskId: TaskId? = null\n\n  @Serializable\n  data class NewVersionStatus(\n    val current: Long = 0,\n    val total: Long = 1,\n    val state: DownloadState = DownloadState.Init,\n  )\n\n  var status by ObservableMutableState(_status) { _status = it }\n\n  suspend fun initDownloadTask(downloadTask: DownloadTask, store: NewVersionStore) {\n    this.taskId = downloadTask.id\n    this.updateDownloadStatus(downloadTask.status, store)\n  }\n\n  suspend fun updateDownloadStatus(status: DownloadStateEvent, store: NewVersionStore) {\n    val newStatus =\n      NewVersionStatus(current = status.current, total = status.total, state = status.state)\n    if (newStatus != this.status) {\n      this.status = newStatus\n      store.setNewVersion(this)\n    }\n  }\n\n  fun progress(): Float {\n    return if (_status.total == 0L) {\n      .0f\n    } else {\n      (_status.current * 1.0f / _status.total) * 10 / 10.0f\n    }\n  }\n}\n\nclass NewVersionStore(mm: MicroModule.Runtime) {\n  private val store = mm.createStore(\"NewVersion\", false)\n  private val newVersionKey = \"NewVersionKey\"\n\n  suspend fun getNewVersion() = store.getOrNull<NewVersionItem>(newVersionKey)\n\n  suspend fun setNewVersion(data: NewVersionItem) {\n    return store.set(newVersionKey, data)\n  }\n\n  suspend fun clear() {\n    return store.clear()\n  }\n}"},{"language":"kotlin","path":"desk/upgrade/NewVersionView.kt","content":"package org.dweb_browser.browser.desk.upgrade\n\nimport androidx.compose.animation.AnimatedContent\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.slideInHorizontally\nimport androidx.compose.animation.slideOutHorizontally\nimport androidx.compose.animation.togetherWith\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.BasicAlertDialog\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.SideEffect\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.drawscope.Stroke\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport org.dweb_browser.browser.BrowserDrawResource\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.download.model.DownloadState\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun NewVersionController.Render() {\n  if (newVersionType == NewVersionType.Hide) return\n  if (canOpen) {\n    LaunchedEffect(Unit) {\n      canOpen = false\n      newVersionItem?.let { item ->\n        if (item.status.state == DownloadState.Completed) {\n          newVersionType = NewVersionType.Install\n        }\n      }\n    }\n  }\n\n  BasicAlertDialog(\n    onDismissRequest = {\n      if (newVersionItem?.forceUpdate != true) {\n        newVersionType = NewVersionType.Hide\n      } else {\n        // 如果是强制更新，就不能响应点击空白区域关闭升级对话框\n      }\n    },\n  ) { // 里面就是具体显示的内容了\n    Box(\n      modifier = Modifier.fillMaxWidth().clip(RoundedCornerShape(16.dp))\n        .background(MaterialTheme.colorScheme.background),\n      contentAlignment = Alignment.Center\n    ) {\n      AnimatedContent(\n        targetState = newVersionType, label = \"\",\n        transitionSpec = { // 实现左出右进\n          if (targetState > initialState) {\n            (slideInHorizontally { width -> width } + fadeIn()).togetherWith(\n              slideOutHorizontally { width -> -width } + fadeOut()\n            )\n          } else {\n            (slideInHorizontally { width -> -width } + fadeIn()).togetherWith(\n              slideOutHorizontally { width -> width } + fadeOut()\n            )\n          }\n        }\n      ) { type ->\n        when (type) {\n          NewVersionType.NewVersion -> DialogNewVersion()\n\n          NewVersionType.Download -> DialogDownloadView()\n\n          NewVersionType.Install -> DialogInstallView()\n\n          NewVersionType.Hide -> {}\n        }\n      }\n    }\n  }\n}\n\n@Composable\nprivate fun NewVersionController.DialogNewVersion() {\n  val newVersion = newVersionItem ?: return\n  DialogContent(\n    title = {\n      Column(\n        modifier = Modifier.fillMaxWidth(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n      ) {\n        Text(\n          text = BrowserI18nResource.dialog_version_title(),\n          fontSize = 22.sp,\n          fontWeight = FontWeight.Bold,\n          color = MaterialTheme.colorScheme.onBackground\n        )\n        Text(\n          text = newVersion.versionName,\n          fontSize = 12.sp,\n          color = MaterialTheme.colorScheme.outline\n        )\n        Image(\n          painter = BrowserDrawResource.Logo.painter(),\n          contentDescription = null,\n          modifier = Modifier.size(64.dp)\n        )\n      }\n    },\n    text = { Text(text = BrowserI18nResource.dialog_upgrade_description()) },\n    confirmButton = {\n      Button(onClick = {\n        if (newVersion.status.state == DownloadState.Completed) {\n          newVersionType = NewVersionType.Install\n        } else {\n          newVersionType = NewVersionType.Download\n        }\n      }) {\n        Text(BrowserI18nResource.dialog_upgrade_button_upgrade())\n      }\n    },\n    dismissButton = {\n      Button(\n        onClick = { newVersionType = NewVersionType.Hide }) {\n        Text(BrowserI18nResource.dialog_upgrade_button_delay())\n      }\n    }\n  )\n}\n\n@Composable\nprivate fun NewVersionController.DialogDownloadView() {\n  val newVersion = newVersionItem ?: return\n  SideEffect {\n    deskNMM.scopeLaunch(cancelable = true) { downloadApp() }\n  }\n  DialogContent(\n    title = {\n      Column(\n        modifier = Modifier.fillMaxWidth(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n      ) {\n        Text(\n          text = BrowserI18nResource.dialog_downloading_title(),\n          fontSize = 22.sp,\n          fontWeight = FontWeight.Bold,\n          color = MaterialTheme.colorScheme.onBackground\n        )\n\n        Box(modifier = Modifier.size(120.dp), contentAlignment = Alignment.Center) {\n          Image(\n            painter = BrowserDrawResource.Logo.painter(),\n            contentDescription = null,\n            modifier = Modifier.size(64.dp)\n          )\n          val backgroundColor = MaterialTheme.colorScheme.outline.copy(alpha = 0.5f)\n          Canvas(modifier = Modifier.size(64.dp)) {\n            drawCircle(color = backgroundColor, style = Stroke(2f))\n            drawArc(\n              color = backgroundColor,\n              startAngle = -90f,\n              sweepAngle = if (newVersion.status.current == 0L) {\n                -360f\n              } else {\n                (newVersion.progress() - 1) * 360f\n              },\n              useCenter = true\n            )\n          }\n        }\n      }\n    },\n    confirmButton = {\n      Button(onClick = { newVersionType = NewVersionType.Hide /* 转移到后台下载 */ }) {\n        Text(BrowserI18nResource.dialog_upgrade_button_background())\n      }\n    }\n  )\n}\n\n/**\n * 在 Install 这边判断系统是否有安装权限\n * 有： 直接关闭当前界面，并打开安装界面\n * 无： 显示需要授权，按钮是打开授权界面\n */\n@Composable\nprivate fun NewVersionController.DialogInstallView() {\n  DialogContent(\n    title = {\n      Column(\n        modifier = Modifier.fillMaxWidth(),\n        horizontalAlignment = Alignment.CenterHorizontally,\n      ) {\n        Text(\n          text = BrowserI18nResource.dialog_install_title(),\n          fontSize = 22.sp,\n          fontWeight = FontWeight.Bold,\n          color = MaterialTheme.colorScheme.onBackground\n        )\n      }\n    },\n    text = {\n      Text(text = BrowserI18nResource.dialog_install_description())\n    },\n    confirmButton = {\n      Button(onClick = {\n        newVersionType = NewVersionType.Hide\n        openSystemInstallSetting()\n      }) {\n        Text(BrowserI18nResource.dialog_upgrade_button_setting())\n      }\n    },\n  )\n}\n\n@Composable\nprivate fun DialogContent(\n  title: @Composable () -> Unit,\n  text: @Composable (() -> Unit)? = null,\n  dismissButton: @Composable (() -> Unit)? = null,\n  confirmButton: @Composable () -> Unit,\n) {\n  Column(\n    modifier = Modifier.fillMaxWidth().padding(16.dp),\n    verticalArrangement = Arrangement.spacedBy(16.dp),\n  ) {\n    title()\n    text?.let { text() }\n\n    Row(\n      modifier = Modifier.fillMaxWidth(),\n      horizontalArrangement = Arrangement.spacedBy(space = 16.dp, alignment = Alignment.End),\n      verticalAlignment = Alignment.CenterVertically\n    ) {\n      dismissButton?.let { it() }\n      confirmButton()\n    }\n  }\n}"},{"language":"kotlin","path":"download/ext/MicroModuleDownload.kt","content":"package org.dweb_browser.browser.download.ext\n\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.buffer\nimport kotlinx.coroutines.flow.channelFlow\nimport kotlinx.coroutines.flow.filterNotNull\nimport kotlinx.datetime.Clock\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.download.model.DownloadStateEvent\nimport org.dweb_browser.browser.download.model.DownloadTask\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.core.module.channelRequest\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.helper.buildUrlString\nimport org.dweb_browser.helper.valueNotIn\nimport org.dweb_browser.pure.http.PureClientRequest\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.PureTextFrame\nimport kotlin.time.Duration.Companion.milliseconds\n\nsuspend fun NativeMicroModule.NativeRuntime.createDownloadTask(\n  url: String, total: Long? = null, external: Boolean? = null,\n): DownloadTask {\n  // 将 url 转码，避免 url 内容被解析为 parameter，引起下载地址错误\n  val response = nativeFetch(buildUrlString(\"file://download.browser.dweb/create\") {\n    parameters[\"url\"] = url\n    parameters[\"total\"] = total?.toString() ?: \"0\"\n    parameters[\"external\"] = external?.toString() ?: \"false\"\n  })\n  return response.json<DownloadTask>()\n}\n\nsuspend fun NativeMicroModule.NativeRuntime.getDownloadTask(taskId: String): DownloadTask? {\n  val response = nativeFetch(buildUrlString(\"file://download.browser.dweb/getTask\") {\n    parameters[\"taskId\"] = taskId\n  })\n  return if (response.isOk) {\n    response.json<DownloadTask>()\n  } else null\n}\n\nsuspend fun NativeMicroModule.NativeRuntime.existDownloadTask(taskId: String): Boolean {\n  return getDownloadTask(taskId)?.status?.state?.valueNotIn(\n    DownloadState.Completed, DownloadState.Canceled\n  ) ?: false\n}\n\nsuspend fun NativeMicroModule.NativeRuntime.removeDownload(taskId: String) = nativeFetch(\n  PureClientRequest(\n    href = buildUrlString(\"file://download.browser.dweb/remove\") { parameters[\"taskId\"] = taskId },\n    method = PureMethod.DELETE\n  )\n).boolean()\n\nsuspend fun NativeMicroModule.NativeRuntime.startDownload(taskId: String) =\n  nativeFetch(buildUrlString(\"file://download.browser.dweb/start\") {\n    parameters[\"taskId\"] = taskId\n  }).boolean()\n\nsuspend fun NativeMicroModule.NativeRuntime.pauseDownload(taskId: String) =\n  nativeFetch(buildUrlString(\"file://download.browser.dweb/pause\") {\n    parameters[\"taskId\"] = taskId\n  }).json<DownloadStateEvent>()\n\nsuspend fun NativeMicroModule.NativeRuntime.cancelDownload(taskId: String) =\n  nativeFetch(buildUrlString(\"file://download.browser.dweb/cancel\") {\n    parameters[\"taskId\"] = taskId\n  }).boolean()\n\nsuspend fun NativeMicroModule.NativeRuntime.downloadProgressFlow(\n  taskId: String, fps: Double = 10.0,\n) = channelFlow {\n  val flowProducer = this\n  val throttleMs = (1000.0 / fps).milliseconds\n  channelRequest(buildUrlString(\"file://download.browser.dweb/flow/progress\") {\n    parameters[\"taskId\"] = taskId\n  }) {\n    val ctx = this\n    ctx.sendText(\"get\")\n    for (pureFrame in ctx.income) {\n      val now = Clock.System.now()\n      val next = now.plus(throttleMs)\n\n      when (pureFrame) {\n        is PureTextFrame -> {\n          flowProducer.send(Json.decodeFromString<DownloadStateEvent>(pureFrame.text))\n          flowProducer.send(null)\n          delay(next - Clock.System.now())\n          sendText(\"get\")\n        }\n\n        else -> {}\n      }\n    }\n    flowProducer.close()\n  }\n}.buffer(0).filterNotNull()"},{"language":"kotlin","path":"download/model/DecompressModel.kt","content":"package org.dweb_browser.browser.download.model\n\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport org.dweb_browser.browser.download.DownloadController\n\nclass DecompressModel(private val downloadController: DownloadController) {\n  var showProgress by mutableStateOf(false)\n    private set\n  var showError by mutableStateOf(false)\n    private set\n  var errMsg by mutableStateOf(\"\")\n    private set\n\n  fun hide() {\n    showError = false\n    showProgress = false\n  }\n\n  fun showError(message: String) {\n    showProgress = false\n    showError = true\n    errMsg = message\n  }\n\n  fun hidePopup() {\n    showProgress = false\n    showError = false\n    errMsg = \"\"\n  }\n}"},{"language":"kotlin","path":"download/model/DownloadListModel.kt","content":"package org.dweb_browser.browser.download.model\n\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.twotone.Downloading\nimport androidx.compose.material.icons.twotone.FileDownloadDone\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableIntStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport kotlinx.datetime.LocalDate\nimport org.dweb_browser.browser.download.DownloadController\nimport org.dweb_browser.browser.download.DownloadI18n\nimport org.dweb_browser.helper.compose.SimpleI18nResource\n\nenum class DownloadListTabs(val title: SimpleI18nResource, val icon: ImageVector) {\n  Downloading(DownloadI18n.downloading, Icons.TwoTone.Downloading),\n  Completed(DownloadI18n.completed, Icons.TwoTone.FileDownloadDone),\n  ;\n}\n\nclass DownloadListModel(internal val downloadController: DownloadController) {\n  var tabIndex by mutableIntStateOf(0)\n  val tabItems = DownloadListTabs.entries.toTypedArray()\n  fun startDownload(downloadTask: DownloadTask) = downloadController.launch {\n    downloadController.startDownload(downloadTask)\n  }\n\n  fun pauseDownload(downloadTask: DownloadTask) = downloadController.launch {\n    downloadController.pauseDownload(downloadTask)\n  }\n\n  fun close() = downloadController.launch { downloadController.close() }\n\n  fun removeDownloadTask(downloadTask: DownloadTask) = downloadController.launch {\n    downloadController.removeDownload(downloadTask.id)\n  }\n}\n\nprivate fun main() {\n  val time = LocalDate.toString()\n  println(time)\n}"},{"language":"kotlin","path":"download/model/DownloadModel.kt","content":"package org.dweb_browser.browser.download.model\n\nimport io.ktor.utils.io.ByteReadChannel\nimport io.ktor.utils.io.cancel\nimport kotlinx.coroutines.flow.MutableSharedFlow\nimport kotlinx.coroutines.flow.asSharedFlow\nimport kotlinx.coroutines.sync.Mutex\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport okio.Path.Companion.toPath\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.helper.datetimeNow\n\n@Serializable\ndata class DownloadTask(\n  /** 下载编号 */\n  val id: String,\n  /** 下载链接 */\n  val url: String,\n  /** 创建时间 */\n  val createTime: Long = datetimeNow(),\n  /** 来源模块 */\n  val originMmid: MMID,\n  /** 来源链接 */\n  val originUrl: String?,\n  /** 打开应用的跳转地址 */\n  val openDappUri: String?,\n  /** 文件的元数据类型，可以用来做“打开文件”时的参考类型 */\n  var mime: String,\n  /** 文件路径 */\n  var filepath: String,\n  /** 标记当前下载状态 */\n  val status: DownloadStateEvent,\n) {\n  val filename by lazy {\n    filepath.toPath().name\n  }\n\n  @Transient\n  var readChannel: ByteReadChannel? = null\n\n  // 监听下载进度 不存储到数据库\n  @Transient\n  private val changeFlow = MutableSharedFlow<Unit>(extraBufferCapacity = 1)\n\n  fun emitChanged() {\n    changeFlow.tryEmit(Unit)\n  }\n\n  @Transient\n  val onChange = changeFlow.asSharedFlow()\n\n  @Transient\n  internal val paused = Mutex()\n\n  fun cancel() {\n    status.state = DownloadState.Canceled\n    status.current = 0L\n    readChannel?.cancel()\n    readChannel = null\n  }\n\n  @Transient\n  var external: Boolean = false\n}\n\n@Serializable\nenum class DownloadState {\n  /** 初始化中，做下载前的准备，包括寻址、创建文件、保存任务等工作 */\n  Init,\n\n  /** 下载中*/\n  Downloading,\n\n  /** 暂停下载*/\n  Paused,\n\n  /** 取消下载*/\n  Canceled,\n\n  /** 下载失败*/\n  Failed,\n\n  /** 下载完成*/\n  Completed,\n}\n\n@Serializable\ndata class DownloadStateEvent(\n  var current: Long = 0,\n  var total: Long = 1,\n  var state: DownloadState = DownloadState.Init,\n  var stateMessage: String = \"\",\n) {\n  fun progress(): Float {\n    return if (total == 0L) {\n      0f\n    } else {\n      (current * 1.0f / total) * 10 / 10.0f\n    }\n  }\n\n  fun percentProgress(): String {\n    return if (total == 0L) {\n      \"0 %\"\n    } else {\n      \"${(current * 1000 / total) / 10.0f} %\"\n    }\n  }\n}"},{"language":"kotlin","path":"download/render/DownloadDetailRender.kt","content":"package org.dweb_browser.browser.download.render\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.produceState\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.platform.LocalClipboardManager\nimport androidx.compose.ui.text.AnnotatedString\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextDecoration\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.launch\nimport okio.Path.Companion.toPath\nimport org.dweb_browser.browser.desk.render.toDeskAppIcon\nimport org.dweb_browser.browser.download.DownloadI18n\nimport org.dweb_browser.browser.download.DownloadNMM\nimport org.dweb_browser.browser.download.model.DecompressModel\nimport org.dweb_browser.browser.download.model.DownloadTask\nimport org.dweb_browser.browser.web.data.formatToStickyName\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.file.ext.blobFetchHook\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.helper.formatTimestampByMilliseconds\nimport org.dweb_browser.helper.platform.theme.LocalColorful\nimport org.dweb_browser.helper.trueAlso\nimport org.dweb_browser.sys.toast.ext.showToast\nimport org.dweb_browser.sys.window.core.constant.LocalWindowMM\nimport org.dweb_browser.sys.window.render.AppLogo\n\n@Composable\nfun DecompressModel.Render(downloadTask: DownloadTask, modifier: Modifier) {\n  Box(modifier) {\n    downloadTask.AppHeadInfo()\n    showProgress.trueAlso {\n      ProgressView()\n    }\n    showError.trueAlso {\n      ErrorView()\n    }\n  }\n}\n\n@Composable\nprivate fun DownloadTask.AppHeadInfo(modifier: Modifier = Modifier) {\n  val mm = LocalWindowMM.current as DownloadNMM.DownloadRuntime\n  LazyColumn(\n    modifier.padding(horizontal = 16.dp),\n    verticalArrangement = Arrangement.spacedBy(8.dp),\n  ) {\n    item { TableRow(title = DownloadI18n.unzip_label_no(), content = id) }\n    item { TableRow(title = DownloadI18n.unzip_label_name(), filepath.toPath().name) }\n    item { TableRow(title = DownloadI18n.unzip_label_mime(), content = mime) }\n    item {\n      TableRow(title = DownloadI18n.unzip_label_url()) { modifier, style ->\n        val clipboardManager = LocalClipboardManager.current\n        val scope = rememberCoroutineScope()\n        val urlCopySuccess = DownloadI18n.url_copy_success()\n        Text(\n          url, modifier = modifier.clickable {\n            clipboardManager.setText(AnnotatedString(url))\n            scope.launch { mm.showToast(urlCopySuccess) }\n          }, style = style.merge(\n            color = LocalColorful.current.Blue.current, textDecoration = TextDecoration.Underline\n          )\n        )\n      }\n    }\n    item { TableRow(title = DownloadI18n.unzip_label_path(), content = filepath) }\n    item {\n      TableRow(\n        title = DownloadI18n.unzip_label_createTime(),\n        content = createTime.formatTimestampByMilliseconds()\n      )\n      createTime.formatToStickyName()\n    }\n    item {\n      when (val microModule = produceState<MicroModule?>(null) {\n        value = mm.bootstrapContext.dns.query(originMmid)\n      }.value) {\n        null -> TableRow(\n          title = DownloadI18n.unzip_label_originMmid(), content = originMmid\n        )\n\n        else -> TableRow(\n          title = DownloadI18n.unzip_label_originMmid(),\n        ) { modifier, style ->\n          Row(\n            modifier,\n            horizontalArrangement = Arrangement.spacedBy(8.dp),\n            verticalAlignment = Alignment.Top\n          ) {\n            AppLogo.fromResources(microModule.icons, fetchHook = mm.blobFetchHook).toDeskAppIcon()\n              .Render(Modifier.size(32.dp))\n            Column(\n              Modifier.padding(start = 4.dp), verticalArrangement = Arrangement.spacedBy(2.dp)\n            ) {\n              Text(\n                microModule.name,\n                style = MaterialTheme.typography.bodySmall,\n                fontWeight = FontWeight.Bold\n              )\n              Text(\n                originMmid,\n                style = MaterialTheme.typography.bodySmall.run { copy(fontSize = fontSize * 0.8f) },\n                fontStyle = FontStyle.Italic\n              )\n            }\n          }\n        }\n      }\n\n    }\n    item {\n      TableRow(DownloadI18n.unzip_label_originUrl()) { modifier, style ->\n        when (val url = originUrl) {\n          null -> Text(\n            DownloadI18n.unknown_origin(),\n            modifier = modifier.alpha(0.5f),\n            style = style,\n            fontStyle = FontStyle.Italic\n          )\n\n          else -> Text(url, modifier = modifier, style = style)\n        }\n      }\n    }\n  }\n}\n\n@Composable\nprivate fun TableRow(title: String, content: String) {\n  TableRow(title) { modifier, style ->\n    Text(content, modifier = modifier, style = style)\n  }\n}\n\n@Composable\nprivate fun TableRow(title: String, content: AnnotatedString) {\n  TableRow(title) { modifier, style ->\n    Text(content, modifier = modifier, style = style)\n  }\n}\n\n@Composable\nprivate fun TableRow(title: String, content: @Composable (Modifier, TextStyle) -> Unit) {\n  Row(modifier = Modifier.fillMaxWidth().padding(bottom = 8.dp)) {\n    Text(\n      title,\n      modifier = Modifier.weight(0.3f).alpha(0.8f),\n      style = MaterialTheme.typography.labelMedium\n    )\n    content(Modifier.weight(0.7f), MaterialTheme.typography.bodyMedium)\n  }\n  HorizontalDivider()\n}\n\n@Composable\nprivate fun DecompressModel.ProgressView() {\n  Box(modifier = Modifier.fillMaxSize().clickableWithNoEffect { }\n    .background(MaterialTheme.colorScheme.outlineVariant.copy(0.5f)),\n    contentAlignment = Alignment.Center) {\n    CircularProgressIndicator()\n  }\n}\n\n@Composable\nprivate fun DecompressModel.ErrorView() {\n  Box(modifier = Modifier.fillMaxSize().clickableWithNoEffect { }\n    .background(MaterialTheme.colorScheme.outlineVariant.copy(0.5f))) {\n    Box(\n      modifier = Modifier.fillMaxWidth().padding(16.dp)\n        .background(MaterialTheme.colorScheme.background)\n    ) {\n      Text(text = errMsg)\n    }\n  }\n}"},{"language":"kotlin","path":"download/render/DownloadListItemRender.kt","content":"package org.dweb_browser.browser.download.render\n\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.MoreHoriz\nimport androidx.compose.material.icons.twotone.Delete\nimport androidx.compose.material.icons.twotone.FileOpen\nimport androidx.compose.material.icons.twotone.PauseCircle\nimport androidx.compose.material.icons.twotone.PlayCircle\nimport androidx.compose.material.icons.twotone.SyncProblem\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.IconButtonDefaults\nimport androidx.compose.material3.LinearProgressIndicator\nimport androidx.compose.material3.ListItem\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableLongStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.download.DownloadI18n\nimport org.dweb_browser.browser.download.model.DownloadListModel\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.download.model.DownloadTask\nimport org.dweb_browser.helper.compose.CommonI18n\nimport org.dweb_browser.helper.compose.SwipeToViewBox\nimport org.dweb_browser.helper.compose.TextCenterEllipsis\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.helper.compose.hoverComposed\nimport org.dweb_browser.helper.compose.hoverCursor\nimport org.dweb_browser.helper.compose.rememberSwipeToViewBoxState\nimport org.dweb_browser.helper.toSpaceSize\nimport org.dweb_browser.sys.window.ext.AlertDeleteDialog\nimport org.dweb_browser.sys.window.ext.FileIconByFilename\n\n\n@Composable\nfun DownloadListModel.DownloadItem(\n  onClick: () -> Unit,\n  onRemove: () -> Unit,\n  downloadTask: DownloadTask,\n) {\n  var taskCurrent by remember { mutableLongStateOf(downloadTask.status.current) }\n  var taskState by remember { mutableStateOf(downloadTask.status.state) }\n\n  LaunchedEffect(downloadTask) { // 监听状态，更新显示\n    if (downloadTask.status.state != DownloadState.Completed) {\n      downloadTask.onChange.collect {\n        taskState = downloadTask.status.state\n        taskCurrent = downloadTask.status.current\n      }\n    }\n  }\n  val state = rememberSwipeToViewBoxState()\n  val primaryAction: () -> Unit\n  val primaryLabel: String\n  val primaryIcon: ImageVector\n  val primaryDescription: String\n  when (downloadTask.status.state) {\n    DownloadState.Downloading -> {\n      primaryAction = { pauseDownload(downloadTask) }\n      primaryLabel = DownloadI18n.pause()\n      primaryIcon = Icons.TwoTone.PauseCircle\n      primaryDescription = DownloadI18n.downloading()\n    }\n\n    DownloadState.Paused -> {\n      primaryAction = {\n        startDownload(downloadTask)\n        state.closeJob()\n      }\n      primaryLabel = DownloadI18n.resume()\n      primaryIcon = Icons.TwoTone.PlayCircle\n      primaryDescription = DownloadI18n.paused()\n    }\n\n    DownloadState.Completed -> {\n      primaryAction = {\n        // TODO 这个后续要做成打开应用功能\n        state.closeJob()\n      }\n      primaryLabel = DownloadI18n.open()\n      primaryIcon = Icons.TwoTone.FileOpen\n      primaryDescription = DownloadI18n.completed()\n    }\n\n    DownloadState.Init, DownloadState.Canceled, DownloadState.Failed -> {\n      primaryAction = {\n        startDownload(downloadTask)\n        state.closeJob()\n      }\n      primaryLabel = DownloadI18n.retry()\n      primaryIcon = Icons.TwoTone.SyncProblem\n      primaryDescription = DownloadI18n.failed()\n    }\n  }\n\n  SwipeToViewBox(state = state, backgroundContent = {\n    Row {\n      val modifier = Modifier.hoverCursor()\n      var showDeleteAlert by remember { mutableStateOf(false) }\n      TextButton(\n        onClick = { showDeleteAlert = true },\n        modifier = modifier.fillMaxHeight(),\n        colors = ButtonDefaults.textButtonColors(\n          containerColor = MaterialTheme.colorScheme.errorContainer,\n          contentColor = MaterialTheme.colorScheme.error\n        ),\n        shape = RectangleShape,\n      ) {\n        Column(\n          Modifier.padding(horizontal = 8.dp),\n          verticalArrangement = Arrangement.spacedBy(4.dp),\n          horizontalAlignment = Alignment.CenterHorizontally,\n        ) {\n          Icon(Icons.TwoTone.Delete, \"delete\")\n          Text(CommonI18n.delete())\n        }\n      }\n      if (showDeleteAlert) {\n        AlertDeleteDialog(\n          onDismissRequest = { showDeleteAlert = false },\n          onDelete = onRemove,\n          title = { Text(DownloadI18n.delete_alert_title()) },\n          message = {\n            Column(\n              horizontalAlignment = Alignment.CenterHorizontally,\n              modifier = Modifier.fillMaxWidth()\n            ) {\n              Text(DownloadI18n.delete_alert_message(downloadTask.filename))\n            }\n          },\n          deleteText = DownloadI18n.confirm_delete()\n        )\n      }\n\n      TextButton(\n        onClick = primaryAction,\n        modifier = modifier.fillMaxHeight(),\n        colors = ButtonDefaults.textButtonColors(\n          containerColor = MaterialTheme.colorScheme.onPrimaryContainer,\n          contentColor = MaterialTheme.colorScheme.onPrimary\n        ),\n        shape = RectangleShape,\n      ) {\n        Column(\n          Modifier.padding(horizontal = 8.dp),\n          verticalArrangement = Arrangement.spacedBy(4.dp),\n          horizontalAlignment = Alignment.CenterHorizontally,\n        ) {\n          Icon(primaryIcon, primaryDescription)\n          Text(primaryLabel)\n        }\n      }\n    }\n  }) {\n    ListItem(\n      modifier = Modifier.clickableWithNoEffect { onClick() },\n      headlineContent = { // 主标题\n        TextCenterEllipsis(text = downloadTask.filename)\n      },\n      supportingContent = { // 副标题\n        Column {\n          when (downloadTask.status.state) {\n            DownloadState.Completed -> {\n              Text(\n                text = downloadTask.status.total.toSpaceSize(),\n                maxLines = 1,\n                overflow = TextOverflow.Ellipsis\n              )\n            }\n\n            else -> {\n              // 显示下载进度，右边显示下载状态\n              Row(modifier = Modifier.fillMaxWidth()) {\n                Text(\n                  text = \"${taskCurrent.toSpaceSize()} / ${downloadTask.status.total.toSpaceSize()}\",\n                  maxLines = 1,\n                  overflow = TextOverflow.Ellipsis\n                )\n              }\n              // 显示下载进度\n              LinearProgressIndicator(progress = { taskCurrent / downloadTask.status.total.toFloat() })\n            }\n          }\n        }\n      },\n      leadingContent = { // 左边的图标\n        Box(Modifier.wrapContentSize(), contentAlignment = Alignment.Center) {\n          downloadController.downloadNMM.FileIconByFilename(downloadTask.filename, 48.dp)\n          when (val downloadState = downloadTask.status.state) {\n            DownloadState.Downloading, DownloadState.Paused, DownloadState.Init, DownloadState.Canceled, DownloadState.Failed -> {\n              IconButton(\n                onClick = primaryAction,\n                modifier = Modifier.matchParentSize().hoverCursor()\n                  .hoverComposed { hover ->\n                    val aniP by animateFloatAsState(\n                      when {\n                        hover -> 1f\n                        else -> 0f\n                      }\n                    )\n                    val alpha = when (downloadState) {\n                      DownloadState.Downloading -> aniP\n                      else -> aniP * 0.5f + 0.5f\n                    }\n                    val scale = aniP * 0.5f + 0.4f\n                    val offset = 20.dp * (1 - aniP)\n                    alpha(alpha).scale(scale).offset(offset, offset)\n                  },\n                colors = IconButtonDefaults.iconButtonColors(\n                  containerColor = MaterialTheme.colorScheme.onPrimaryContainer,\n                  contentColor = MaterialTheme.colorScheme.onPrimary\n                ),\n              ) {\n                Icon(primaryIcon, primaryDescription)\n              }\n            }\n\n            DownloadState.Completed -> {}\n          }\n        }\n      },\n      trailingContent = { // 右边的图标\n        IconButton({\n          state.toggleJob()\n        }, Modifier.hoverCursor()) {\n          Icon(Icons.Default.MoreHoriz, \"more\")\n        }\n      },\n    )\n  }\n}"},{"language":"kotlin","path":"download/render/DownloadListRender.kt","content":"package org.dweb_browser.browser.download.render\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.SegmentedButton\nimport androidx.compose.material3.SegmentedButtonDefaults\nimport androidx.compose.material3.SingleChoiceSegmentedButtonRow\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.download.DownloadController\nimport org.dweb_browser.browser.download.model.DownloadListTabs\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.download.model.DownloadTask\nimport org.dweb_browser.helper.compose.NoDataRender\n\n@Composable\nfun DownloadController.DownloadList(\n  modifier: Modifier,\n  downloadClick: (DownloadTask) -> Unit,\n) {\n  Column(\n    modifier = modifier.fillMaxSize().background(MaterialTheme.colorScheme.background)\n  ) {\n    SingleChoiceSegmentedButtonRow(modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp)) {\n      downloadListModel.tabItems.forEachIndexed { index, downloadTab ->\n        SegmentedButton(selected = index == downloadListModel.tabIndex,\n          onClick = { downloadListModel.tabIndex = index },\n          shape = SegmentedButtonDefaults.itemShape(\n            index = index, count = downloadListModel.tabItems.size\n          ),\n          icon = {\n            Icon(\n              imageVector = downloadTab.icon, contentDescription = downloadTab.title()\n            )\n          },\n          label = { Text(text = downloadTab.title()) })\n      }\n    }\n    val downloadTab = downloadListModel.tabItems[downloadListModel.tabIndex]\n    val downloadMap by downloadMapFlow.collectAsState()\n    val list = remember(downloadMap, downloadTab) {\n      when (downloadTab) {\n        DownloadListTabs.Completed -> downloadMap.values.filter { it.status.state == DownloadState.Completed }\n        DownloadListTabs.Downloading -> downloadMap.values.filter { it.status.state != DownloadState.Completed }\n      }\n    }.toList()\n\n    LazyColumn(Modifier.fillMaxSize()) {\n      if (list.isEmpty()) {\n        item {\n          NoDataRender(BrowserI18nResource.no_download_links())\n        }\n      }\n      items(list, key = { it.id }) { downloadTask ->\n        Column(Modifier.fillMaxSize()) {\n          downloadListModel.DownloadItem(\n            onClick = {\n              downloadClick(downloadTask)\n              decompressModel.hide()\n            },\n            onRemove = { downloadListModel.removeDownloadTask(downloadTask) },\n            downloadTask = downloadTask,\n          )\n          HorizontalDivider()\n        }\n      }\n    }\n  }\n}\n"},{"language":"kotlin","path":"download/render/DownloadRender.kt","content":"package org.dweb_browser.browser.download.render\n\nimport androidx.compose.animation.AnimatedContent\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\nimport androidx.compose.animation.SharedTransitionLayout\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.adaptive.ExperimentalMaterial3AdaptiveApi\nimport androidx.compose.material3.adaptive.layout.AnimatedPane\nimport androidx.compose.material3.adaptive.layout.ListDetailPaneScaffold\nimport androidx.compose.material3.adaptive.layout.ListDetailPaneScaffoldRole\nimport androidx.compose.material3.adaptive.layout.PaneAdaptedValue\nimport androidx.compose.material3.adaptive.navigation.rememberListDetailPaneScaffoldNavigator\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.download.DownloadController\nimport org.dweb_browser.browser.download.DownloadI18n\nimport org.dweb_browser.browser.download.model.DownloadTask\nimport org.dweb_browser.sys.window.core.WindowContentRenderScope\nimport org.dweb_browser.sys.window.core.WindowContentScaffoldWithTitleText\nimport org.dweb_browser.sys.window.core.WindowSurface\nimport org.dweb_browser.sys.window.core.withRenderScope\nimport org.dweb_browser.sys.window.core.LocalWindowController\n\n@OptIn(ExperimentalMaterial3AdaptiveApi::class, ExperimentalSharedTransitionApi::class)\n@Composable\nfun DownloadController.Render(modifier: Modifier, windowRenderScope: WindowContentRenderScope) {\n  val navigator = rememberListDetailPaneScaffoldNavigator<DownloadTask>()\n  val win = LocalWindowController.current\n  win.navigation.GoBackHandler(enabled = navigator.canNavigateBack()) {\n    navigator.navigateBack()\n  }\n\n  val isListAndDetailVisible =\n    navigator.scaffoldValue[ListDetailPaneScaffoldRole.Detail] == PaneAdaptedValue.Expanded && navigator.scaffoldValue[ListDetailPaneScaffoldRole.List] == PaneAdaptedValue.Expanded\n\n  SharedTransitionLayout {\n    AnimatedContent(isListAndDetailVisible, label = \"Download Manager\") {\n      ListDetailPaneScaffold(\n        directive = navigator.scaffoldDirective,\n        value = navigator.scaffoldValue,\n        modifier = modifier.withRenderScope(windowRenderScope),\n        listPane = {\n          AnimatedPane {\n            WindowContentRenderScope.Unspecified.WindowContentScaffoldWithTitleText(\n              modifier = Modifier.fillMaxSize(),\n              topBarTitleText = BrowserI18nResource.top_bar_title_download(),\n            ) { innerPadding ->\n              DownloadList(Modifier.padding(innerPadding)) { downloadTask ->\n                navigator.navigateTo(ListDetailPaneScaffoldRole.Detail, downloadTask)\n              }\n            }\n          }\n        },\n        detailPane = {\n          AnimatedPane {\n            when (val downloadTask = navigator.currentDestination?.content) {\n              null -> WindowContentRenderScope.Unspecified.WindowSurface {\n                Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                  Text(DownloadI18n.no_select_detail())\n                }\n              }\n\n              else -> WindowContentRenderScope.Unspecified.WindowContentScaffoldWithTitleText(\n                modifier = Modifier.fillMaxSize(),\n                topBarTitleText = BrowserI18nResource.top_bar_title_down_detail(),\n              ) { innerPadding ->\n                decompressModel.Render(downloadTask, Modifier.padding(innerPadding))\n              }\n            }\n          }\n        }\n      )\n    }\n  }\n}"},{"language":"kotlin","path":"jmm/render/AnimatedCounterText.kt","content":"package org.dweb_browser.browser.jmm.render\n\nimport androidx.compose.animation.AnimatedContent\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.animation.core.FiniteAnimationSpec\nimport androidx.compose.animation.slideInVertically\nimport androidx.compose.animation.slideOutVertically\nimport androidx.compose.animation.togetherWith\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.material3.LocalTextStyle\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.key\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.unit.IntOffset\nimport org.dweb_browser.helper.compose.iosTween\n\n@Composable\nfun AnimatedCounterText(\n  text: String, modifier: Modifier = Modifier, textStyle: TextStyle? = null,\n) {\n  Row(modifier) {\n    val style = textStyle ?: LocalTextStyle.current\n    var preTextEndIndex = 0;\n    for (matchResult in Regex(\"[\\\\d.]+\").findAll(text)) {\n      if (preTextEndIndex < matchResult.range.first) {\n        Text(text.substring(preTextEndIndex, matchResult.range.first), style = style)\n      }\n      AnimatedCounter(count = matchResult.value, textStyle = style)\n      preTextEndIndex = matchResult.range.last + 1\n    }\n    if (preTextEndIndex < text.length - 1) {\n      Text(text.substring(preTextEndIndex), style = style)\n    }\n  }\n}\n\n@Composable\nprivate fun AnimatedCounter(count: String, textStyle: TextStyle? = null) {\n  Row(\n    modifier = Modifier.animateContentSize(),\n    horizontalArrangement = Arrangement.End,\n    verticalAlignment = Alignment.CenterVertically,\n  ) {\n    val style = textStyle ?: LocalTextStyle.current\n    val countNum = count.toFloat()\n    count.mapIndexed { index, c -> Digit(c, countNum, index) }.forEach { digit ->\n      val animationSpec: FiniteAnimationSpec<IntOffset> =\n        iosTween(durationMillis = 100 + digit.place * 50)\n      key(count.length - digit.place) {\n        AnimatedContent(targetState = digit, transitionSpec = {\n          if (targetState > initialState) {\n            slideInVertically(animationSpec) { -it } togetherWith slideOutVertically(animationSpec) { it }\n          } else {\n            slideInVertically(animationSpec) { it } togetherWith slideOutVertically(animationSpec) { -it }\n          }\n        }) { digit ->\n          Text(\"${digit.digitChar}\", style = style)\n        }\n      }\n    }\n  }\n}\n\nprivate data class Digit(val digitChar: Char, val fullNumber: Float, val place: Int)\n\nprivate operator fun Digit.compareTo(other: Digit): Int {\n  return fullNumber.compareTo(other.fullNumber)\n}"},{"language":"kotlin","path":"jmm/render/BottomDownloadButton.kt","content":"package org.dweb_browser.browser.jmm.render\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxScope\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.requiredSize\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.ElevatedButton\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.LinearProgressIndicator\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.RichTooltip\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.material3.TooltipBox\nimport androidx.compose.material3.TooltipDefaults\nimport androidx.compose.material3.rememberTooltipState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.StrokeCap\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.zIndex\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.jmm.JmmStatus\nimport org.dweb_browser.browser.jmm.LocalJmmDetailController\nimport org.dweb_browser.helper.compose.AutoResizeTextContainer\nimport org.dweb_browser.helper.withScope\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\ninternal fun BoxScope.BottomDownloadButton() {\n  val background = MaterialTheme.colorScheme.surface\n  val jmmInstallerController = LocalJmmDetailController.current\n  val uiScope = rememberCoroutineScope()\n  val jmmUiKit = rememberJmmUiKit(jmmInstallerController);\n\n  Box(\n    modifier = Modifier.fillMaxWidth().align(Alignment.BottomCenter).background(\n      brush = Brush.verticalGradient(listOf(background.copy(0f), background))\n    ).padding(16.dp), contentAlignment = Alignment.Center\n  ) {\n    val tooltipState = rememberTooltipState(isPersistent = true)\n    TooltipBox(\n      enableUserInput = false,\n      positionProvider = TooltipDefaults.rememberPlainTooltipPositionProvider(),\n      tooltip = {\n        when (jmmUiKit.jmmStatus) {\n          /// 版本偏低时，提示用户，是否要进行降级安装\n          JmmStatus.VersionLow -> RichTooltip(title = { Text(BrowserI18nResource.install_tooltip_warning()) },\n            action = {\n              Row {\n                TextButton(onClick = { uiScope.launch { tooltipState.dismiss() } }) {\n                  Text(BrowserI18nResource.button_name_cancel())\n                }\n                ElevatedButton(onClick = {\n                  jmmInstallerController.jmmNMM.scopeLaunch(cancelable = true) {\n                    withScope(uiScope) {\n                      tooltipState.dismiss()\n                    }\n                    // 版本偏低时，提示用户，是否要进行降级安装\n                    jmmInstallerController.createAndStartDownload()\n                  }\n                }) {\n                  Text(BrowserI18nResource.install_tooltip_install_lower_action())\n                }\n              }\n            }) {\n            Text(BrowserI18nResource.install_tooltip_lower_version_tip())\n          }\n\n          else -> {}\n        }\n      },\n      state = tooltipState,\n    ) {\n      val bgColor = when {\n        jmmUiKit.jmmStatus == JmmStatus.VersionLow -> MaterialTheme.colorScheme.secondary\n        else -> MaterialTheme.colorScheme.primary\n      }\n      ElevatedButton(\n        onClick = {\n          when (jmmUiKit.metadata.state.state) {\n            JmmStatus.VersionLow -> {\n              uiScope.launch {\n                tooltipState.show()\n              }\n            }\n\n            else -> {}\n          }\n          jmmUiKit.onClickDownloadButton()\n        },\n        modifier = Modifier.requiredSize(height = 50.dp, width = 300.dp).fillMaxWidth(),\n        colors = ButtonDefaults.elevatedButtonColors(\n          containerColor = bgColor,\n          contentColor = when (jmmUiKit.jmmStatus) {\n            JmmStatus.VersionLow -> MaterialTheme.colorScheme.onSecondary\n            else -> MaterialTheme.colorScheme.onPrimary\n          },\n          disabledContainerColor = MaterialTheme.colorScheme.errorContainer,\n          disabledContentColor = MaterialTheme.colorScheme.onErrorContainer,\n        ),\n        contentPadding = PaddingValues(0.dp),\n      ) {\n        Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n          /// 进度背景\n          if (jmmUiKit.showLinearProgress) {\n            LinearProgressIndicator(\n              progress = { jmmUiKit.jmmStatusEvent.progress },\n              modifier = Modifier.fillMaxSize().alpha(0.5f).zIndex(1f),\n              color = bgColor,\n              strokeCap = StrokeCap.Butt,\n              drawStopIndicator = {},\n            )\n          }\n          Column(\n            Modifier.fillMaxSize().padding(ButtonDefaults.ContentPadding).zIndex(2f),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n          ) {\n            when (val labelEnd = jmmUiKit.labelEnd) {\n              null -> Text(\n                text = jmmUiKit.labelStart,\n                textAlign = TextAlign.Center,\n                softWrap = false,\n                maxLines = 1,\n                overflow = TextOverflow.Visible\n              )\n\n              else -> Row(\n                modifier = Modifier.fillMaxWidth().weight(1f),\n                verticalAlignment = Alignment.CenterVertically,\n                horizontalArrangement = Arrangement.Center\n              ) {\n                AutoResizeTextContainer(Modifier.weight(1f)) {\n                  Text(\n                    text = jmmUiKit.labelStart,\n                    textAlign = TextAlign.Center,\n                    softWrap = false,\n                    maxLines = 1,\n                    overflow = TextOverflow.Visible\n                  )\n                }\n                Box(Modifier.fillMaxSize().weight(2f), contentAlignment = Alignment.CenterEnd) {\n                  AnimatedCounterText(text = labelEnd)\n                }\n              }\n            }\n            when (val description = jmmUiKit.description) {\n              null -> {}\n              else -> Text(\n                text = description,\n                modifier = Modifier.weight(0.5f),\n                style = MaterialTheme.typography.bodySmall\n              )\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"},{"language":"kotlin","path":"jmm/render/BottomDownloadButtonKit.kt","content":"package org.dweb_browser.browser.jmm.render\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.jmm.JmmDetailController\nimport org.dweb_browser.browser.jmm.JmmMetadata\nimport org.dweb_browser.browser.jmm.JmmStatus\nimport org.dweb_browser.browser.jmm.JmmStatusEvent\nimport org.dweb_browser.browser.jmm.JsMicroModule\nimport org.dweb_browser.helper.toSpaceSize\n\n/**\n * 通过 JmmStatusEvent，返回需要显示的状态和文件大小或者进度值\n */\n@Composable\ninternal fun rememberJmmUiKit(controller: JmmDetailController) =\n  remember(controller, controller.metadata) {\n    JmmUiKit(controller, controller.metadata)\n  }\n\ninternal class JmmUiKit(\n  val controller: JmmDetailController,\n  val metadata: JmmMetadata,\n) {\n  val jmmStatusEvent get() = metadata.state\n  val jmmStatus get() = jmmStatusEvent.state\n  val labelStart\n    get() = if (!canSupportTarget) {\n      BrowserI18nResource.install_button_jump_home.text\n    } else when (jmmStatus) {\n      JmmStatus.Init, JmmStatus.Canceled -> BrowserI18nResource.install_button_install.text\n      JmmStatus.NewVersion -> BrowserI18nResource.install_button_update.text\n      JmmStatus.Downloading -> BrowserI18nResource.install_button_downloading.text\n      JmmStatus.Paused -> BrowserI18nResource.install_button_paused.text\n      JmmStatus.Completed -> BrowserI18nResource.install_button_installing.text\n      JmmStatus.INSTALLED -> BrowserI18nResource.install_button_open.text\n      JmmStatus.Failed -> BrowserI18nResource.install_button_retry.text\n      JmmStatus.VersionLow -> BrowserI18nResource.install_button_lower.text\n    }\n  val labelEnd\n    get() = when (jmmStatus) {\n      JmmStatus.Init,\n\n      JmmStatus.Canceled,\n\n      JmmStatus.NewVersion,\n\n      JmmStatus.Downloading,\n\n      JmmStatus.Paused -> jmmStatusEvent.progressText\n\n      else -> null\n    }\n  val description\n    get() = if (!canSupportTarget) {\n      BrowserI18nResource.install_button_incompatible.text\n    } else null\n\n  /**\n   * 应用是否是当前支持的大版本\n   */\n  private val canSupportTarget = metadata.manifest.canSupportTarget(JsMicroModule.VERSION)\n  val showLinearProgress\n    get() = when (jmmStatus) {\n      JmmStatus.Downloading, JmmStatus.Paused -> true\n      else -> false\n    }\n\n\n  fun onClickDownloadButton() = controller.jmmNMM.scopeLaunch(cancelable = true) {\n    if (!canSupportTarget) {\n      controller.openReferrerPage()\n      return@scopeLaunch\n    }\n    when (jmmStatus) {\n      JmmStatus.Init, JmmStatus.Failed, JmmStatus.Canceled -> {\n        controller.createAndStartDownload()\n      }\n\n      JmmStatus.NewVersion -> {\n        controller.closeApp()\n        controller.createAndStartDownload()\n      }\n\n      JmmStatus.Paused -> {\n        controller.startDownload()\n      }\n\n      JmmStatus.Downloading -> {\n        controller.pause()\n      }\n\n      JmmStatus.Completed -> {\n\n      }\n\n      JmmStatus.VersionLow -> {}\n\n      JmmStatus.INSTALLED -> {\n\n        controller.openApp()\n      }\n    }\n  }\n}\n\nprivate val JmmStatusEvent.progressText: String?\n  get() {\n    var text = \"\"\n    if (current > 0) {\n      text += current.toSpaceSize()\n    }\n    if (total > 1 && total > current) {\n      if (text.isNotEmpty()) {\n        text += \" / \"\n      }\n      text += total.toSpaceSize()\n    }\n    return text.trim().ifEmpty { null } // 如果字符串是空的，直接返回 null\n  }"},{"language":"kotlin","path":"jmm/render/CaptureListView.kt","content":"package org.dweb_browser.browser.jmm.render\n\nimport androidx.compose.animation.AnimatedContent\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\nimport androidx.compose.animation.SharedTransitionScope\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.togetherWith\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.gestures.detectTransformGestures\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.requiredHeight\nimport androidx.compose.foundation.layout.requiredSize\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.staggeredgrid.LazyVerticalStaggeredGrid\nimport androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells\nimport androidx.compose.foundation.lazy.staggeredgrid.itemsIndexed\nimport androidx.compose.foundation.lazy.staggeredgrid.rememberLazyStaggeredGridState\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.rounded.Close\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.FilledTonalIconButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.MutableState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.unit.DpSize\nimport androidx.compose.ui.unit.IntOffset\nimport androidx.compose.ui.unit.IntSize\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.zIndex\nimport org.dweb_browser.core.help.types.JmmAppInstallManifest\nimport org.dweb_browser.helper.Debugger\nimport org.dweb_browser.helper.clamp\nimport org.dweb_browser.helper.compose.LocalCompositionChain\nimport org.dweb_browser.helper.compose.compositionChainOf\nimport org.dweb_browser.pure.image.compose.CoilAsyncImage\nimport org.dweb_browser.browser.desk.render.NFCacalaterParams\nimport org.dweb_browser.browser.desk.render.NFCaculater\nimport org.dweb_browser.browser.desk.render.NFGeometry\nimport org.dweb_browser.browser.desk.render.NFLayoutData\nimport kotlin.math.max\n\nprivate val imageSizeCache = mutableMapOf<String, GridItem<String>>()\n\nclass CaptureItemContext(val src: String, val index: Int)\n\n/**\n * 应用介绍的图片展示部分\n */\n@Composable\ninternal fun CaptureListView(\n  jmmAppInstallManifest: JmmAppInstallManifest,\n//  decorationBox: @Composable CaptureItemContext.(innerItem: @Composable (modifier: Modifier) -> Unit) -> Unit = { innerItem ->\n//    innerItem(Modifier)\n//  }\n  itemContent: @Composable CaptureItemContext.() -> Unit\n) {\n  val waterfallItems = remember(jmmAppInstallManifest.images) {\n    jmmAppInstallManifest.images.map {\n      imageSizeCache.getOrPut(it) {\n        GridItem(it, mutableStateOf(IntSize(1, 1)))\n      }\n    }\n  }\n  BoxWithConstraints(Modifier.fillMaxWidth()) {\n    val cells = max(1, (maxWidth.value / 160).toInt())\n\n    val layoutData = NFCaculater.layout(\n      layouts = waterfallItems.mapIndexed { _, gridItem ->\n        NFLayoutData(gridItem.key,\n          NFGeometry(0,0, gridItem.sizeState.value.width, gridItem.sizeState.value.height),\n          NFGeometry(0, 0, 1, 1)\n        )\n      },\n      blockLayouts = emptyList(),\n      params = NFCacalaterParams(cells, maxWidth.value.toInt(), 8, 8),\n      refresh = true\n    )\n\n    val gridHeight = layoutData.last().geo.offset.y + layoutData.last().geo.size.height\n    Box(Modifier.fillMaxWidth().requiredHeight(gridHeight.dp)) {\n      waterfallItems.forEachIndexed { index, gridItem ->\n        LocalCompositionChain.current.Provider(LocalSizeState provides gridItem.sizeState) {\n          val layout = layoutData[index].geo\n          Box(\n            Modifier.offset(layout.offset.x.dp, layout.offset.y.dp)\n              .requiredSize(DpSize(layout.size.width.dp, layout.size.height.dp))\n              .animateContentSize()\n          ) {\n            CaptureItemContext(src = gridItem.key, index = index).itemContent()\n          }\n        }\n      }\n    }\n  }\n}\n\ninternal val LocalSizeState = compositionChainOf<MutableState<IntSize>?>(\"sizeState\") { null }\n\n@Composable\ninternal fun CaptureImage(\n  onClick: () -> Unit,\n  src: String,\n  modifier: Modifier = Modifier,\n  contentScale: ContentScale = ContentScale.Fit,\n) {\n  val sizeState = LocalSizeState.current\n  Card(\n    onClick = onClick, modifier = modifier.fillMaxSize()\n  ) {\n    CoilAsyncImage(\n      model = src,\n      modifier = Modifier.fillMaxWidth(),\n      contentDescription = null,\n      contentScale = contentScale,\n      onState = {\n        it.painter?.apply {\n          sizeState?.apply {\n            value = when (intrinsicSize.width / intrinsicSize.height) {\n              in 0f..0.75f -> IntSize(1, 2)\n              in 0.75f..1.25f -> IntSize(1, 1)\n              in 1.25f..Float.MAX_VALUE -> IntSize(2, 1)\n              else -> IntSize(1, 1)\n            }\n          }\n        }\n      },\n    )\n  }\n}\n\n\nclass CaptureBigImage() {\n  var src by mutableStateOf<String?>(null)\n\n  @OptIn(ExperimentalSharedTransitionApi::class)\n  @Composable\n  fun Render(sharedTransitionScope: SharedTransitionScope) {\n    with(sharedTransitionScope) {\n      AnimatedContent(\n        targetState = src,\n        modifier = Modifier.fillMaxWidth().padding(bottom = AppBottomHeight),\n        label = \"Detail Image\",\n        transitionSpec = { fadeIn() togetherWith fadeOut() },\n        contentAlignment = Alignment.Center,\n      ) { aniSrc ->\n        /// 大图预览\n        aniSrc?.also { currentSrc ->\n          val alphaAni = remember { Animatable(0f) }\n          LaunchedEffect(aniSrc, transition.isRunning) {\n            if (src == null) {\n              alphaAni.snapTo(0f)\n            } else if (!transition.isRunning) {\n              alphaAni.animateTo(1f)\n            }\n          }\n\n          var scale by remember { mutableStateOf(1f) }\n          var offset by remember { mutableStateOf(Offset.Zero) }\n          Box(Modifier.fillMaxSize()\n            .background(MaterialTheme.colorScheme.surfaceDim.copy(alpha = alphaAni.value * 0.5f))\n            .sharedBounds(rememberSharedContentState(key = \"bounds:$currentSrc\"), this)\n            .renderInSharedTransitionScopeOverlay(\n              renderInOverlay = { true }, zIndexInOverlay = 3f\n            ).pointerInput(Unit) {\n              detectTransformGestures { _, pan, zoom, _ ->\n                scale *= zoom\n                scale = clamp(0.5f, scale, 5f)\n                offset += pan\n              }\n            }) {\n            Box(\n              Modifier.align(Alignment.BottomCenter).alpha(alphaAni.value).zIndex(2f)\n            ) {\n              FilledTonalIconButton(\n                onClick = { src = null },\n                modifier = Modifier.align(Alignment.Center),\n              ) {\n                Icon(Icons.Rounded.Close, contentDescription = \"close image view\")\n              }\n            }\n            Box(Modifier.zIndex(1f).align(Alignment.Center).fillMaxSize().padding(24.dp)) {\n              CoilAsyncImage(\n                model = src,\n                modifier = Modifier.fillMaxSize().graphicsLayer(\n                  scaleX = scale,\n                  scaleY = scale,\n                  translationX = offset.x,\n                  translationY = offset.y,\n                ).sharedElement(\n                  rememberSharedContentState(key = \"element:$currentSrc\"), this@AnimatedContent\n                ),\n                contentDescription = null,\n                contentScale = ContentScale.Fit,\n              )\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\nclass GridItem<T>(\n  val key: T,\n  val sizeState: MutableState<IntSize>,\n)\n\nprivate val debugColors =\n  mutableListOf(Color.Cyan, Color.Red, Color.Green, Color.Yellow, Color.Blue, Color.Magenta)\n\nprivate val calcCacheMap = mutableMapOf<String, CalcCache>()\n\ndata class CalcCache(var current: List<IntOffset>, var pre: List<IntOffset>?) {\n  fun getResult(items: List<IntSize>) =\n    if (pre == current && current.size == items.size) current else null\n}\n\nval debugCompose = Debugger(\"compose\")\n\n/**\n * 瀑布流计算器\n * 使用 LazyVerticalStaggeredGrid 进行计算，计算完成后(布局稳定之后)再自动进行隐藏\n * 使用时，建议进行缩放后再进行计算\n */\n@Composable\nfun waterfallCalc(\n  columns: Int,\n  items: List<IntSize>,\n): List<IntOffset>? {\n  val state = rememberLazyStaggeredGridState()\n  val density = LocalDensity.current.density\n  val key = \"$columns/${items.joinToString(\",\") { \"${it.width}x${it.height}\" }}\"\n  val cache = calcCacheMap[key]\n  return cache?.getResult(items) ?: run {\n    Box(Modifier.height(0.dp)) {\n      LazyVerticalStaggeredGrid(\n        columns = StaggeredGridCells.Fixed(columns),\n        modifier = Modifier.width(columns.dp)\n          .requiredHeight(items.map { it.height }.reduce { acc, it -> acc + it }.dp)\n          // 透明，不现实\n          .alpha(\n            when {\n              debugCompose.isEnable -> 1f\n              else -> 0f\n            }\n          ),\n        state = state,\n      ) {\n        itemsIndexed(items) { index, item ->\n          Box(\n            Modifier.requiredSize(item.width.dp, item.height.dp)\n              .background(debugColors[index % debugColors.size])\n          )\n        }\n      }\n    }\n    val result = state.layoutInfo.visibleItemsInfo.sortedBy { it.index }.map { gridItemInfo ->\n      gridItemInfo.offset / density\n    }\n    when (cache) {\n      null -> CalcCache(result, null).also {\n        calcCacheMap[key] = it\n      }\n\n      else -> {\n        cache.pre = cache.current\n        cache.current = result\n        cache\n      }\n    }.getResult(items)\n  }\n}\n"},{"language":"kotlin","path":"jmm/render/Constants.kt","content":"package org.dweb_browser.browser.jmm.render\n\nimport androidx.compose.ui.unit.dp\n\ninternal val HeadHeight = 128.dp\ninternal val TopBarHeight = 0.dp\ninternal val AppInfoHeight = 88.dp\ninternal val VerticalPadding = 12.dp\ninternal val HorizontalPadding = 16.dp\ninternal val ShapeCorner = 16.dp\ninternal val HeadIconSize = 28.dp\ninternal val AppBottomHeight = 82.dp\ninternal val ImageWidth = 135.dp\ninternal val ImageHeight = 240.dp"},{"language":"kotlin","path":"jmm/render/JmmDialog.kt","content":"package org.dweb_browser.browser.jmm.render\n\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport io.ktor.http.encodeURLParameter\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.jmm.LocalShowWebViewVersion\nimport org.dweb_browser.browser.jmm.getChromeWebViewVersion\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.helper.SupportUrl\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.helper.isGreaterThan\nimport org.dweb_browser.sys.window.core.constant.LocalWindowMM\n\nvar showedWarningDialog = false\n\n@Composable\ninternal fun WebviewVersionWarningDialog() {\n  if (showedWarningDialog) return\n  var isShowDialog by LocalShowWebViewVersion.current\n  var myVersion by remember { mutableStateOf(\"\") }\n  val lowVersion = \"96.0.4664.104\" // TODO 目前暂定该版本信息最低要求为96.0.4664.104以上\n  LaunchedEffect(Unit) {\n    val version = getChromeWebViewVersion() ?: return@LaunchedEffect\n    if (lowVersion.isGreaterThan(version)) {\n      myVersion = version\n      isShowDialog = true\n    }\n  }\n  if (isShowDialog) {\n    val microModule = LocalWindowMM.current\n    AlertDialog(onDismissRequest = { /*showDialog = false*/ }, title = {\n      Text(text = BrowserI18nResource.dialog_title_webview_upgrade())\n    }, text = {\n      Text(text = BrowserI18nResource.dialog_text_webview_upgrade {\n        requiredVersion = lowVersion\n        currentVersion = myVersion\n      })\n    }, confirmButton = {\n      Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {\n        Text(text = BrowserI18nResource.dialog_dismiss_webview_upgrade(),\n          color = MaterialTheme.colorScheme.primary,\n          modifier = Modifier\n            .weight(1f)\n            .clickableWithNoEffect {\n              isShowDialog = false\n              microModule.scopeLaunch(cancelable = true) {\n                microModule.nativeFetch(\"dweb://openinbrowser?url=${SupportUrl.encodeURLParameter()}\")\n              }\n            })\n\n        Button(onClick = { isShowDialog = false }) {\n          Text(text = BrowserI18nResource.dialog_confirm_webview_upgrade())\n        }\n      }\n    })\n  }\n}\n\n"},{"language":"kotlin","path":"jmm/ui/JmmDetailRender.kt","content":"package org.dweb_browser.browser.jmm.ui\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\nimport androidx.compose.animation.SharedTransitionLayout\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.scaleIn\nimport androidx.compose.animation.scaleOut\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.rememberLazyListState\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.PrimaryTabRow\nimport androidx.compose.material3.Tab\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.CoroutineStart\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.jmm.JmmDetailController\nimport org.dweb_browser.browser.jmm.JmmI18nResource\nimport org.dweb_browser.browser.jmm.LocalJmmDetailController\nimport org.dweb_browser.browser.jmm.render.AppBottomHeight\nimport org.dweb_browser.browser.jmm.render.BottomDownloadButton\nimport org.dweb_browser.browser.jmm.render.CaptureBigImage\nimport org.dweb_browser.browser.jmm.render.CaptureImage\nimport org.dweb_browser.browser.jmm.render.CaptureListView\nimport org.dweb_browser.browser.jmm.render.HorizontalPadding\nimport org.dweb_browser.browser.jmm.render.WebviewVersionWarningDialog\nimport org.dweb_browser.browser.jmm.render.app.AppIntroductionView\nimport org.dweb_browser.browser.jmm.render.app.NewVersionInfoView\nimport org.dweb_browser.browser.jmm.render.app.OtherInfoView\nimport org.dweb_browser.helper.compose.LocalCompositionChain\nimport org.dweb_browser.helper.compose.SimpleI18nResource\nimport org.dweb_browser.sys.window.core.LocalWindowController\nimport org.dweb_browser.sys.window.core.WindowContentRenderScope\nimport org.dweb_browser.sys.window.core.WindowContentScaffoldWithTitle\nimport org.dweb_browser.sys.window.helper.watchedState\n\n\nenum class JmmDetailTabs(val i18n: SimpleI18nResource) {\n  /** 参数信息 */\n  Param(JmmI18nResource.tab_param),\n\n  /** 详情 */\n  Detail(JmmI18nResource.tab_detail),\n\n  /** 介绍 */\n  Intro(JmmI18nResource.tab_intro), ;\n\n  companion object {\n    val ALL = entries.toList()\n  }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun JmmDetailController.Render(modifier: Modifier, renderScope: WindowContentRenderScope) {\n  val win = LocalWindowController.current\n\n  win.navigation.GoBackHandler(enabled = CanCloseBottomSheet()) {\n    closeBottomSheet()\n  }\n\n  LocalCompositionChain.current.Provider(LocalJmmDetailController provides this) {\n    renderScope.WindowContentScaffoldWithTitle(\n      modifier = modifier,\n      topBarTitle = {\n        Row(verticalAlignment = Alignment.CenterVertically) {\n          metadata.manifest.IconRender()\n          Spacer(Modifier.size(16.dp))\n          Text(metadata.manifest.name, maxLines = 2)\n        }\n      },\n      content = { contentPaddings ->\n        val uiScope = rememberCoroutineScope()\n        Box(Modifier.fillMaxWidth().padding(contentPaddings).run {\n          if (CanCloseBottomSheet()) {\n            val bottomSafePadding = win.watchedState { safePadding }.value.bottom\n            padding(PaddingValues(bottom = bottomSafePadding.dp))\n          } else this\n        }) {\n          val hasDetail = metadata.manifest.images.isNotEmpty()\n\n          @OptIn(ExperimentalSharedTransitionApi::class) SharedTransitionLayout {\n            val captureBigImage = remember { CaptureBigImage() }\n            Column(\n              Modifier.fillMaxWidth().padding(bottom = AppBottomHeight)\n            ) {\n              val allTabs = JmmDetailTabs.ALL.filter { tab ->\n                when (tab) {\n                  JmmDetailTabs.Detail -> hasDetail\n                  else -> true\n                }\n              }\n              val lazyListState = rememberLazyListState()\n              var indexByTabClick by remember { mutableStateOf(-1) }\n              var selectedTabIndex by remember { mutableStateOf(0) }\n              remember(lazyListState.isScrollInProgress, lazyListState.firstVisibleItemIndex) {\n                /**\n                 * 目标tabIndex\n                 */\n                val toTabIndex =\n                  when (!lazyListState.isScrollInProgress && !lazyListState.canScrollForward && lazyListState.canScrollBackward) {\n                    // 如果不能再向下滚动了，那么设置成 lastIndex\n                    true -> allTabs.size - 1\n                    else -> lazyListState.firstVisibleItemIndex\n                  }\n\n                if (indexByTabClick == -1) {\n                  selectedTabIndex = toTabIndex\n                } else {\n                  /// 如果这次滚动是tabClick触发的，那么消费掉这次判断\n                  if (!lazyListState.isScrollInProgress) {\n                    indexByTabClick = -1\n                  }\n                }\n              }\n              PrimaryTabRow(selectedTabIndex = selectedTabIndex) {\n                allTabs.forEachIndexed { tabIndex, tab ->\n                  Tab(\n                    selected = selectedTabIndex == tabIndex,\n                    onClick = {\n                      selectedTabIndex = tabIndex\n                      indexByTabClick = tabIndex\n                      uiScope.launch(start = CoroutineStart.UNDISPATCHED) {\n                        lazyListState.animateScrollToItem(tabIndex)\n                      }\n                    },\n                  ) {\n                    Text(tab.i18n(), modifier = Modifier.padding(8.dp))\n                  }\n                }\n              }\n\n              LazyColumn(Modifier.fillMaxSize(), state = lazyListState) {\n                for (tab in allTabs) {\n                  when (tab) {\n                    JmmDetailTabs.Param -> item(key = tab) {\n                      OtherInfoView(metadata.manifest)\n                    }\n\n                    JmmDetailTabs.Detail -> item(key = tab) {\n                      CaptureListView(jmmAppInstallManifest = metadata.manifest) {\n                        AnimatedVisibility(\n                          captureBigImage.src != src,\n                          enter = fadeIn() + scaleIn(),\n                          exit = fadeOut() + scaleOut(),\n                        ) {\n                          Box(\n                            Modifier.sharedBounds(\n                              rememberSharedContentState(key = \"bounds:$src\"),\n                              this\n                            )\n                          ) {\n                            CaptureImage(\n                              onClick = { captureBigImage.src = src },\n                              src = src,\n                              modifier = Modifier.sharedElement(\n                                rememberSharedContentState(key = \"element:$src\"),\n                                this@AnimatedVisibility\n                              ),\n                              contentScale = ContentScale.Crop,\n                            )\n                          }\n                        }\n                      }\n                    }\n\n                    JmmDetailTabs.Intro -> item(key = tab) {\n                      AppIntroductionView(metadata.manifest)\n                      HorizontalDivider(modifier = Modifier.padding(horizontal = HorizontalPadding))\n                      NewVersionInfoView(metadata.manifest)\n                      HorizontalDivider(modifier = Modifier.padding(horizontal = HorizontalPadding))\n                    }\n                  }\n                }\n              }\n            }\n            captureBigImage.Render(this)\n          }\n\n          BottomDownloadButton()\n          WebviewVersionWarningDialog()\n        }\n      },\n    )\n  }\n}"},{"language":"kotlin","path":"jmm/ui/JmmIconRender.kt","content":"package org.dweb_browser.browser.jmm.ui\n\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.LocalTextStyle\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.produceState\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.desk.render.toDeskAppLogo\nimport org.dweb_browser.core.help.types.JmmAppInstallManifest\nimport org.dweb_browser.core.std.file.ext.blobFetchHook\nimport org.dweb_browser.core.std.file.ext.fetchHook\nimport org.dweb_browser.sys.window.core.constant.LocalWindowMM\nimport org.dweb_browser.sys.window.core.helper.pickLargest\nimport org.dweb_browser.sys.window.core.helper.toStrict\nimport org.dweb_browser.sys.window.render.AppLogo\n\n@Composable\nfun JmmAppInstallManifest.IconRender(\n  size: Dp = LocalTextStyle.current.fontSize.value.let { if (it.isNaN()) 32f else it * 2 }.dp,\n) {\n  val runtime = LocalWindowMM.current\n  val isLocalApp = produceState<Boolean?>(null) {\n    value = runtime.bootstrapContext.dns.query(id)?.mmid == id\n  }.value ?: return\n  val fetchHook = when {\n    isLocalApp -> runtime.blobFetchHook\n    else -> runtime.fetchHook\n  }\n  when (val icon = remember(icons) { icons.toStrict().pickLargest() }) {\n    null -> AppLogo.fromUrl(logo, fetchHook = fetchHook)\n    else -> AppLogo.from(icon, fetchHook = fetchHook)\n  }.toDeskAppLogo().Render(Modifier.size(size))\n}\n"},{"language":"kotlin","path":"jmm/ui/JmmListItemRender.kt","content":"package org.dweb_browser.browser.jmm.ui\n\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxHeight\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.MoreHoriz\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.ListItem\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.RectangleShape\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.jmm.JmmI18n\nimport org.dweb_browser.browser.jmm.JmmI18nResource\nimport org.dweb_browser.browser.jmm.JmmMetadata\nimport org.dweb_browser.browser.jmm.JmmStatus\nimport org.dweb_browser.helper.compose.SwipeToViewBox\nimport org.dweb_browser.helper.compose.hoverCursor\nimport org.dweb_browser.helper.compose.rememberSwipeToViewBoxState\nimport org.dweb_browser.helper.formatDatestampByMilliseconds\nimport org.dweb_browser.helper.toSpaceSize\nimport org.dweb_browser.sys.window.ext.AlertDeleteDialog\n\n@Composable\nfun JmmListItem(\n  jmmMetadata: JmmMetadata,\n  onRemove: () -> Unit,\n  onUnInstall: () -> Unit,\n  onOpenDetail: () -> Unit,\n) {\n  val state = rememberSwipeToViewBoxState()\n  SwipeToViewBox(\n    state,\n    backgroundContent = {\n      Row {\n        var showUnInstallAlert by remember { mutableStateOf(false) }\n        if (showUnInstallAlert) {\n          AlertDeleteDialog(\n            onDismissRequest = { showUnInstallAlert = false },\n            onDelete = onUnInstall,\n            title = { Text(JmmI18n.uninstall_alert_title()) },\n            message = {\n              Column(\n                horizontalAlignment = Alignment.CenterHorizontally,\n                modifier = Modifier.fillMaxWidth()\n              ) {\n                Text(jmmMetadata.manifest.short_name)\n                Text(jmmMetadata.manifest.id)\n              }\n            },\n            deleteText = JmmI18n.confirm_uninstall()\n          )\n        }\n        val removeColors = ButtonDefaults.textButtonColors(\n          containerColor = MaterialTheme.colorScheme.errorContainer,\n          contentColor = MaterialTheme.colorScheme.error,\n        )\n        when (jmmMetadata.state.state) {\n          JmmStatus.INSTALLED -> TextButton(\n            onClick = { showUnInstallAlert = true },\n            modifier = Modifier.fillMaxHeight(),\n            colors = removeColors,\n            shape = RectangleShape,\n          ) {\n            Text(text = JmmI18nResource.uninstall(), modifier = Modifier.padding(8.dp))\n          }\n\n          else -> TextButton(\n            onClick = onRemove,\n            modifier = Modifier.fillMaxHeight(),\n            colors = removeColors,\n            shape = RectangleShape\n          ) {\n            Text(text = JmmI18nResource.remove_record(), modifier = Modifier.padding(8.dp))\n          }\n        }\n      }\n    },\n  ) {\n    ListItem(\n      headlineContent = {\n        Text(\n          text = jmmMetadata.manifest.short_name,\n          maxLines = 2,\n          overflow = TextOverflow.Ellipsis,\n          style = MaterialTheme.typography.titleMedium,\n        )\n      },\n      modifier = Modifier.hoverCursor().clickable {\n        onOpenDetail()\n      },\n      supportingContent = {\n        Column {\n          Row {\n            Text(\"v\", fontWeight = FontWeight.Bold)\n            Text(jmmMetadata.manifest.version)\n          }\n          Row(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceBetween\n          ) {\n            Text(\n              jmmMetadata.manifest.bundle_size.toSpaceSize(),\n              style = MaterialTheme.typography.bodySmall\n            )\n            Text(\n              jmmMetadata.installTime.formatDatestampByMilliseconds(),\n              style = MaterialTheme.typography.bodySmall\n            )\n          }\n        }\n      },\n      leadingContent = {\n        Box(modifier = Modifier.height(72.dp), contentAlignment = Alignment.Center) {\n          jmmMetadata.manifest.IconRender()\n        }\n      },\n      trailingContent = {\n        val scope = rememberCoroutineScope()\n        IconButton({\n          scope.launch {\n            state.open()\n          }\n        }) {\n          Icon(Icons.Default.MoreHoriz, \"more\")\n        }\n      },\n    )\n  }\n}"},{"language":"kotlin","path":"jmm/ui/JmmListRender.kt","content":"package org.dweb_browser.browser.jmm.ui\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.SegmentedButton\nimport androidx.compose.material3.SegmentedButtonDefaults\nimport androidx.compose.material3.SingleChoiceSegmentedButtonRow\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.derivedStateOf\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.jmm.JmmMetadata\nimport org.dweb_browser.browser.jmm.JmmRenderController\nimport org.dweb_browser.browser.jmm.JmmTabs\n\n@Composable\nfun JmmRenderController.JmmListView(\n  modifier: Modifier,\n  curTab: JmmTabs = JmmTabs.Installed,\n  onTabClick: (JmmTabs) -> Unit,\n  onOpenDetail: (JmmMetadata) -> Unit\n) {\n  Column(\n    modifier = modifier, verticalArrangement = Arrangement.spacedBy(8.dp)\n  ) {\n    SingleChoiceSegmentedButtonRow(\n      modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp)\n    ) {\n      JmmTabs.entries.forEachIndexed { index, jmmTab ->\n        val selected = curTab == jmmTab\n        SegmentedButton(\n          shape = SegmentedButtonDefaults.itemShape(index = index, count = JmmTabs.entries.size),\n          onClick = {\n            onTabClick(jmmTab)\n          },\n          selected = selected,\n          icon = { Icon(imageVector = jmmTab.vector, contentDescription = jmmTab.title()) },\n          label = { Text(text = jmmTab.title()) },\n        )\n      }\n    }\n\n    val all by historyMetadataMap()\n    for (jmmTab in JmmTabs.entries) {\n      if (curTab == jmmTab) {\n        var list by remember(jmmTab, all) { mutableStateOf(jmmTab.listFilter(all.values)) }\n        /// 状态变更之后，进行计算，触发重组，重新生成list展示\n        val jmmStatusList = derivedStateOf { list.map { it.state.state } }\n\n        LaunchedEffect(jmmStatusList) {\n          list = jmmTab.listFilter(all.values)\n        }\n\n        when (list.size) {\n          0 -> Box(\n            Modifier.fillMaxSize(), contentAlignment = Alignment.Center\n          ) {\n            Text(\"暂无数据\")\n          }\n\n          else -> LazyColumn {\n            items(list, key = { it.manifest.id }) { metadata ->\n              JmmListItem(\n                jmmMetadata = metadata,\n                onRemove = { removeHistoryMetadata(metadata) },\n                onUnInstall = { unInstall(metadata) },\n                onOpenDetail = { onOpenDetail(metadata) },\n              )\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n"},{"language":"kotlin","path":"jmm/ui/JmmRender.kt","content":"package org.dweb_browser.browser.jmm.ui\n\nimport androidx.compose.animation.AnimatedContent\nimport androidx.compose.animation.ExperimentalSharedTransitionApi\nimport androidx.compose.animation.SharedTransitionLayout\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.adaptive.ExperimentalMaterial3AdaptiveApi\nimport androidx.compose.material3.adaptive.layout.AnimatedPane\nimport androidx.compose.material3.adaptive.layout.ListDetailPaneScaffold\nimport androidx.compose.material3.adaptive.layout.ListDetailPaneScaffoldRole\nimport androidx.compose.material3.adaptive.layout.PaneAdaptedValue\nimport androidx.compose.material3.adaptive.navigation.rememberListDetailPaneScaffoldNavigator\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.DisposableEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport org.dweb_browser.browser.jmm.JmmI18nResource\nimport org.dweb_browser.browser.jmm.JmmMetadata\nimport org.dweb_browser.browser.jmm.JmmRenderController\nimport org.dweb_browser.browser.jmm.JmmTabs\nimport org.dweb_browser.sys.window.core.LocalWindowController\nimport org.dweb_browser.sys.window.core.WindowContentRenderScope\nimport org.dweb_browser.sys.window.core.WindowContentScaffoldWithTitleText\nimport org.dweb_browser.sys.window.core.WindowSurface\nimport org.dweb_browser.sys.window.core.withRenderScope\n\n\n@Composable\nexpect fun JmmRenderController.Render(\n  modifier: Modifier,\n  windowRenderScope: WindowContentRenderScope,\n)\n\n@OptIn(ExperimentalMaterial3AdaptiveApi::class, ExperimentalSharedTransitionApi::class)\n@Composable\ninternal fun JmmRenderController.CommonRender(\n  modifier: Modifier, windowRenderScope: WindowContentRenderScope,\n) {\n  val navigator = rememberListDetailPaneScaffoldNavigator<JmmMetadata>()\n  val isListAndDetailVisible =\n    navigator.scaffoldValue[ListDetailPaneScaffoldRole.Detail] == PaneAdaptedValue.Expanded && navigator.scaffoldValue[ListDetailPaneScaffoldRole.List] == PaneAdaptedValue.Expanded\n  val win = LocalWindowController.current\n  win.navigation.GoBackHandler(enabled = navigator.canNavigateBack()) {\n    navigator.navigateBack()\n  }\n\n  /// 外部打开应用详情需要，例如桌面上点击应用详情时\n  DisposableEffect(outerHistoryJmmMetadata) {\n    if(outerHistoryJmmMetadata != null) {\n      navigator.navigateTo(ListDetailPaneScaffoldRole.Detail, outerHistoryJmmMetadata)\n    }\n    onDispose {\n      outerHistoryJmmMetadata = null\n    }\n  }\n\n  SharedTransitionLayout {\n    AnimatedContent(targetState = isListAndDetailVisible, label = \"Download Manager\") {\n      ListDetailPaneScaffold(\n        directive = navigator.scaffoldDirective,\n        value = navigator.scaffoldValue,\n        listPane = {\n          var curTab by remember { mutableStateOf(JmmTabs.Installed) }\n\n          AnimatedPane {\n            WindowContentRenderScope.Unspecified.WindowContentScaffoldWithTitleText(\n              modifier = Modifier.fillMaxSize(),\n              topBarTitleText = JmmI18nResource.top_bar_title_install(),\n            ) { innerPadding ->\n              JmmListView(\n                modifier = Modifier.padding(innerPadding),\n                curTab = curTab,\n                onTabClick = { selectedTab ->\n                  curTab = selectedTab\n                },\n                onOpenDetail = { jmmMetadata ->\n                  navigator.navigateTo(ListDetailPaneScaffoldRole.Detail, jmmMetadata)\n                }\n              )\n            }\n          }\n        },\n        detailPane = {\n          AnimatedPane {\n            when (val jmmMetadata = navigator.currentDestination?.content) {\n              null -> WindowContentRenderScope.Unspecified.WindowSurface {\n                Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                  Text(JmmI18nResource.no_select_detail())\n                }\n              }\n\n              else -> {\n                BoxWithConstraints {\n                  getJmmDetailController(jmmMetadata).Render(\n                    Modifier.fillMaxSize(), WindowContentRenderScope.Unspecified\n                  )\n                }\n              }\n            }\n          }\n        },\n        modifier = modifier.withRenderScope(windowRenderScope),\n      )\n    }\n  }\n}\n"},{"language":"kotlin","path":"jsProcess/ext/createJsProcess.kt","content":"package org.dweb_browser.browser.jsProcess.ext\n\nimport io.ktor.http.URLBuilder\nimport kotlinx.coroutines.CoroutineStart\nimport kotlinx.coroutines.launch\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.browser.jmm.debugJsMM\nimport org.dweb_browser.browser.jsProcess.CreateProcessReturn\nimport org.dweb_browser.browser.kit.GlobalWebMessageEndpoint\nimport org.dweb_browser.core.help.types.MicroModuleManifest\nimport org.dweb_browser.core.http.router.HandlerContext\nimport org.dweb_browser.core.http.router.HttpHandlerToolkit\nimport org.dweb_browser.core.http.router.HttpRouter\nimport org.dweb_browser.core.ipc.Ipc\nimport org.dweb_browser.core.ipc.kotlinIpcPool\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.helper.buildUnsafeString\nimport org.dweb_browser.helper.buildUrlString\nimport org.dweb_browser.helper.collectIn\n\nsuspend fun MicroModule.Runtime.createJsProcess(\n  entryPath: String,\n  processName: String?,\n): JsProcess {\n  val mainIpc = this.connect(\"js.browser.dweb\")\n  mainIpc.start()\n  val codeIpc = mainIpc.fork(autoStart = true)\n  val result = codeIpc.request(URLBuilder(\"file://js.browser.dweb/create-process\").run {\n    processName?.also { parameters[\"name\"] = processName }\n    parameters[\"entry\"] = entryPath\n    buildUnsafeString()\n  }).json<CreateProcessReturn>()\n  val fetchIpc = kotlinIpcPool.createIpc(\n    endpoint = GlobalWebMessageEndpoint.get(result.portId),\n    pid = 0,\n    locale = microModule.manifest,\n    remote = microModule.manifest,\n    autoStart = true,\n  )\n  codeIpc.onClosed {\n    codeIpc.launchJobs += codeIpc.scope.launch(start = CoroutineStart.UNDISPATCHED) { fetchIpc.close() }\n  }\n  return JsProcess(result.processToken, this, codeIpc, fetchIpc)\n}\n\nclass JsProcess(\n  private val processToken: String,\n  private val runtime: MicroModule.Runtime,\n  val codeIpc: Ipc,\n  val fetchIpc: Ipc,\n) {\n\n  /**\n   * 使用路由定义 esm 模块的代码内容\n   */\n  fun defineEsm(definer: HttpHandlerToolkit.() -> Unit) {\n    val httpRouter = HttpRouter(runtime, runtime.mmid)\n    val toolkit = object : HttpHandlerToolkit {\n      override fun getContextHttpRouter(): HttpRouter {\n        return httpRouter\n      }\n    }\n    // 定义完路由后\n    toolkit.definer()\n    // 再进行消费\n    codeIpc.onRequest(\"js-process-http\").collectIn(codeIpc.scope) {\n      it.consumeFilter { ipcServerRequest ->\n        val pureServerRequest = ipcServerRequest.toPure()\n        val httpHandlerChain =\n          httpRouter.withFilter(pureServerRequest) ?: return@consumeFilter false\n        val pureResponse = httpHandlerChain(HandlerContext(pureServerRequest, codeIpc))\n        codeIpc.postResponse(ipcServerRequest.reqId, pureResponse)\n        return@consumeFilter true\n      }\n    }\n  }\n\n  /**\n   * 创建一个可以与jsProcess内部通讯的ipc\n   */\n  suspend fun createIpc(remoteMM: MicroModuleManifest): Ipc {\n    val globalId =\n      runtime.nativeFetch(buildUrlString(\"file://js.browser.dweb/create-ipc-endpoint\") {\n        parameters[\"token\"] = processToken\n        parameters[\"manifest\"] = Json.encodeToString(remoteMM)\n      }).int()\n    debugJsMM(\"create-ipc\") { \"globalId=$globalId,processToken=$processToken\" }\n    return kotlinIpcPool.createIpc(\n      endpoint = GlobalWebMessageEndpoint.get(globalId),\n      pid = 0,\n      remote = runtime.microModule.manifest,\n      locale = remoteMM,\n      // 不自动开始，等到web-worker中它自己去握手\n      autoStart = false,\n    )\n  }\n\n  suspend fun bridgeIpc(remoteGlobalId: Int, remoteMM: MicroModuleManifest) {\n    runtime.nativeFetch(buildUrlString(\"file://js.browser.dweb/create-ipc\") {\n      parameters[\"token\"] = processToken\n      parameters[\"globalId\"] = remoteGlobalId.toString()\n      parameters[\"manifest\"] = Json.encodeToString(remoteMM)\n    })\n  }\n}"},{"language":"kotlin","path":"nativeui/torch/TorchApi.kt","content":"package org.dweb_browser.browser.nativeui.torch\n\nexpect object TorchApi {\n  fun toggleTorch()\n  fun torchState(): Boolean\n}\n"},{"language":"kotlin","path":"nativeui/torch/TorchNMM.kt","content":"package org.dweb_browser.browser.nativeui.torch\n\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.http.router.bind\nimport org.dweb_browser.core.module.BootstrapContext\nimport org.dweb_browser.core.module.NativeMicroModule\nimport org.dweb_browser.pure.http.PureMethod\n\nclass TorchNMM : NativeMicroModule(\"torch.nativeui.browser.dweb\", \"torch\") {\n  init {\n    categories =\n      listOf(MICRO_MODULE_CATEGORY.Service, MICRO_MODULE_CATEGORY.Device_Management_Service);\n  }\n\n  inner class TorchRuntime(override val bootstrapContext: BootstrapContext) : NativeRuntime() {\n\n    override suspend fun _bootstrap() {\n      routes(\n        // 打开关闭手电筒\n        \"/toggleTorch\" bind PureMethod.GET by defineBooleanResponse {\n          TorchApi.toggleTorch()\n          return@defineBooleanResponse true\n        },\n        // 查询状态\n        \"/torchState\" bind PureMethod.GET by defineBooleanResponse {\n          return@defineBooleanResponse TorchApi.torchState()\n        }).cors()\n    }\n\n    override suspend fun _shutdown() {\n    }\n  }\n\n  override fun createRuntime(bootstrapContext: BootstrapContext) = TorchRuntime(bootstrapContext)\n}\n"},{"language":"kotlin","path":"web/data/BrowserStore.kt","content":"package org.dweb_browser.browser.web.data\n\nimport androidx.compose.runtime.Composable\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.file.ext.createStore\nimport org.dweb_browser.helper.datetimeNow\nimport org.dweb_browser.helper.datetimeNowToEpochDay\nimport org.dweb_browser.helper.formatDatestampByEpochDay\nimport org.dweb_browser.helper.platform.toImageBitmap\nimport org.dweb_browser.helper.toEpochDay\n\n@Serializable\ndata class WebSiteInfo(\n  val id: Long = datetimeNow(),\n  val title: String,\n  val url: String = \"\",\n  val type: WebSiteType,\n  val day: Long = id.toEpochDay(),\n  val icon: ByteArray? = null,\n) {\n  val iconImage by lazy {\n    icon?.toImageBitmap()\n  }\n}\n\n@Composable\nfun Long.formatToStickyName(): String {\n  return when (this - datetimeNowToEpochDay()) {\n    0L -> BrowserI18nResource.time_today()\n    -1L -> BrowserI18nResource.time_yesterday()\n    else -> this.formatDatestampByEpochDay()\n  }\n}\n\nenum class WebSiteType(val id: Int) {\n  History(0), Bookmark(1)\n  ;\n}\n\nconst val KEY_NO_TRACE = \"browser.no.trace\" // 无痕浏览\n\nclass BrowserStore(mm: MicroModule.Runtime) {\n  private val storeBookKey = \"browser/links\"\n  private val storeEngineKey = \"SearchEngines\"\n  private val storeBook = mm.createStore(\"browser_book\", false)\n  private val storeHistory = mm.createStore(\"browser_history\", false)\n  private val storeEngines = mm.createStore(\"search_engine\", false)\n  private val sharePreference = mm.createStore(\"share_preference\", false)\n\n  /**\n   * 书签部分，不需要特殊处理，直接保存即可\n   */\n  suspend fun getBookLinks() = storeBook.getOrPut(storeBookKey) { listOf<WebSiteInfo>() }\n\n  suspend fun setBookLinks(data: List<WebSiteInfo>) =\n    storeBook.set(storeBookKey, data)\n\n  /**\n   * 历史部分，需要特殊处理\n   * 保存的时候：按照每天保存一份文件\n   * 获取的时候：按照每天的map来获取最近7天的数据\n   */\n  suspend fun getHistoryLinks(): Map<String, MutableList<WebSiteInfo>> {\n    val current = datetimeNowToEpochDay()\n    val maps = mutableMapOf<String, MutableList<WebSiteInfo>>()\n    for (day in current downTo current - 6) { // 获取最近一周的数据\n      val webSiteInfoList = storeHistory.getOrNull<MutableList<WebSiteInfo>>(day.toString())\n      if (webSiteInfoList?.isNotEmpty() == true) {\n        maps[day.toString()] = webSiteInfoList\n      }\n    }\n    return maps\n  }\n\n  /**\n   * 取下一个7天的历史数据\n   * off: 到今天的偏移天数\n   */\n  suspend fun getDaysHistoryLinks(off: Int): Map<String, MutableList<WebSiteInfo>> {\n    val current = datetimeNowToEpochDay() + off\n    val maps = mutableMapOf<String, MutableList<WebSiteInfo>>()\n    for (day in current downTo current - 6) { // 获取最近一周的数据\n      val webSiteInfoList = storeHistory.getOrNull<MutableList<WebSiteInfo>>(day.toString())\n      if (webSiteInfoList?.isNotEmpty() == true) {\n        maps[day.toString()] = webSiteInfoList\n      }\n    }\n    return maps\n  }\n\n  suspend fun setHistoryLinks(key: String, data: List<WebSiteInfo>) {\n    storeHistory.set(key, data)\n  }\n\n  suspend fun saveString(key: String, data: String) = sharePreference.set(key, data)\n  suspend fun getString(key: String) = sharePreference.getOrNull<String>(key)\n\n//  suspend fun setSearchEngines(data: MutableList<WebEngine>) =\n//    storeEngines.set(storeEngineKey, data)\n//\n//  suspend fun getSearchEngines() = storeEngines.getOrPut(storeEngineKey) {\n//    mutableListOf<WebEngine>()\n//  }\n}"},{"language":"kotlin","path":"web/data/CONST.kt","content":"package org.dweb_browser.browser.web.data\n\nenum class ConstUrl(val url: String) {\n  BLANK(\"about:blank\"),\n}\n\n/**\n * target: The target in which to load the URL, an optional parameter that defaults to _self. (String)\n *  _self: Opens in the Cordova WebView if the URL is in the white list, otherwise it opens in the InAppBrowser.\n *  _blank: Opens in the InAppBrowser.\n *  _system: Opens in the system's web browser.\n */\nenum class AppBrowserTarget(val type: String) {\n  SELF(\"_self\"),\n  BLANK(\"_blank\"),\n  SYSTEM(\"_system\"),;\n  companion object{\n    val ALL = entries.associateBy { it.type }\n  }\n}"},{"language":"kotlin","path":"web/data/DownloadStore.kt","content":"package org.dweb_browser.browser.web.data\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.setValue\nimport dweb_browser_kmp.browser.generated.resources.Res\nimport dweb_browser_kmp.browser.generated.resources.ic_download_all\nimport dweb_browser_kmp.browser.generated.resources.ic_download_audio\nimport dweb_browser_kmp.browser.generated.resources.ic_download_file\nimport dweb_browser_kmp.browser.generated.resources.ic_download_image\nimport dweb_browser_kmp.browser.generated.resources.ic_download_video\nimport io.ktor.http.ContentType\nimport io.ktor.http.defaultForFileExtension\nimport kotlinx.coroutines.launch\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.download.model.DownloadStateEvent\nimport org.dweb_browser.browser.download.TaskId\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.file.ext.createStore\nimport org.dweb_browser.dwebview.WebDownloadArgs\nimport org.dweb_browser.helper.Signal\nimport org.dweb_browser.helper.compose.ObservableMutableState\nimport org.dweb_browser.helper.compose.SimpleI18nResource\nimport org.dweb_browser.helper.datetimeNow\nimport org.dweb_browser.helper.globalDefaultScope\nimport org.dweb_browser.helper.randomUUID\nimport org.jetbrains.compose.resources.DrawableResource\nimport org.jetbrains.compose.resources.ExperimentalResourceApi\nimport org.jetbrains.compose.resources.painterResource\n\n@OptIn(ExperimentalResourceApi::class)\nenum class BrowserDownloadType(\n  private val contentType: String,\n  private val iconRes: DrawableResource,\n  private val _title: SimpleI18nResource,\n) {\n  All(\"all\", Res.drawable.ic_download_all, BrowserI18nResource.Download.chip_all),\n  Image(\n    ContentType.Image.Any.contentType,\n    Res.drawable.ic_download_image,\n    BrowserI18nResource.Download.chip_image\n  ),\n  Video(\n    ContentType.Video.Any.contentType,\n    Res.drawable.ic_download_video,\n    BrowserI18nResource.Download.chip_video\n  ),\n  Audio(\n    ContentType.Audio.Any.contentType,\n    Res.drawable.ic_download_audio,\n    BrowserI18nResource.Download.chip_audio\n  ),\n  Other(\n    ContentType.Application.Any.contentType,\n    Res.drawable.ic_download_file,\n    BrowserI18nResource.Download.chip_other\n  ),\n  ;\n\n  @Composable\n  fun title() = _title()\n\n  @Composable\n  fun painter() = painterResource(iconRes)\n\n  fun matchSuffix(suffix: String): Boolean {\n    return ContentType.defaultForFileExtension(suffix).contentType == this.contentType\n  }\n}\n\n@Serializable\ndata class BrowserDownloadItem(\n  val urlKey: String,\n  val downloadArgs: WebDownloadArgs,\n  var taskId: TaskId? = null,\n  @SerialName(\"state\")\n  private var _state: DownloadStateEvent = DownloadStateEvent(),\n  var fileName: String = \"\",\n  var fileType: BrowserDownloadType = BrowserDownloadType.All,\n  var downloadTime: Long = datetimeNow(), // 记录下载开始时间，等下载完成后，改为下载完成时间。用于排序\n  var filePath: String = \"\", // 用于保存下载文件的路径\n) {\n  var state by ObservableMutableState(_state) {\n    _state = it\n    globalDefaultScope.launch {\n      // [iOS] ObservableMutableState: ${it.total} ${it.current}\n      stateSignal.emit(it)\n    }\n  }\n\n  @Transient\n  val id = randomUUID() //标识符，iOS端删除时，使用。\n\n  @Transient\n  private var stateSignal = Signal<DownloadStateEvent>()\n\n  @Transient\n  val stateChanged = stateSignal.toListener()\n}\n\nclass BrowserDownloadStore(mm: MicroModule.Runtime) {\n  private val store = mm.createStore(\"browser_download\", false)\n  private val keyOfDownload = \"downloading\"\n  private val keyOfComplete = \"completed\"\n\n  suspend fun getAll(): MutableMap<String, MutableList<BrowserDownloadItem>> {\n    return store.getAll()\n  }\n\n  suspend fun save(key: String, items: MutableList<BrowserDownloadItem>) {\n    store.set(key, items)\n  }\n\n  suspend fun getDownloadAll(): MutableList<BrowserDownloadItem> {\n    return store.getOrPut(keyOfDownload) { mutableListOf() }\n  }\n\n  suspend fun saveDownloadList(list: MutableList<BrowserDownloadItem>) {\n    store.set(keyOfDownload, list)\n  }\n\n  suspend fun getCompleteAll(): MutableList<BrowserDownloadItem> {\n    return store.getOrPut(keyOfComplete) { mutableListOf() }\n  }\n\n  suspend fun saveCompleteList(list: MutableList<BrowserDownloadItem>) {\n    store.set(keyOfComplete, list)\n  }\n}"},{"language":"kotlin","path":"web/data/WebLinkStore.kt","content":"package org.dweb_browser.browser.web.data\n\nimport kotlinx.serialization.Serializable\nimport org.dweb_browser.core.help.types.MMID\nimport org.dweb_browser.core.module.MicroModule\nimport org.dweb_browser.core.std.file.ext.createStore\nimport org.dweb_browser.helper.ImageResource\nimport org.dweb_browser.pure.crypto.hash.sha256\n\n@Serializable\ndata class WebLinkManifest(\n  val id: String, val title: String, val url: String, val icons: List<ImageResource>,\n) {\n  companion object {\n\n    @OptIn(ExperimentalStdlibApi::class)\n    suspend fun createLinkId(url: String) = \"${\n      sha256(url).toHexString(0, 4, HexFormat.Default)\n    }.link.dweb\"\n  }\n}\n\nclass WebLinkStore(microModule: MicroModule.Runtime) {\n  private val store = microModule.createStore(\"web_link_apps\", false)\n\n  suspend fun getOrPut(key: MMID, value: WebLinkManifest): WebLinkManifest {\n    return store.getOrPut(key) { value }\n  }\n\n  suspend fun get(key: MMID): WebLinkManifest? {\n    return store.getOrNull(key)\n  }\n\n  suspend fun getAll(): MutableMap<MMID, WebLinkManifest> {\n    return store.getAll()\n  }\n\n  suspend fun set(key: MMID, value: WebLinkManifest) {\n    store.set(key, value)\n  }\n\n  suspend fun delete(key: MMID): Boolean {\n    return store.delete(key)\n  }\n  suspend fun clear() = store.clear()\n}"},{"language":"kotlin","path":"web/model/BrowserPagerStates.kt","content":"package org.dweb_browser.browser.web.model\n\nimport androidx.compose.foundation.lazy.LazyListState\nimport androidx.compose.foundation.pager.PagerState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.DisposableEffect\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.util.fastRoundToInt\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.CoroutineStart\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.web.debugBrowser\n\nclass BrowserPagerStates(val viewModel: BrowserViewModel) {\n  private inner class InnerPagerState : PagerState(0, 0f) {\n    override val pageCount: Int\n      get() = viewModel.pageSize\n  }\n\n  val focusedPageIndexState = mutableStateOf(-1)\n  var focusedPageIndex\n    get() = focusedPageIndexState.value\n    set(value) {\n      focusedPageIndexState.value = value\n//      tabsBarPagerScope?.launch {\n//        tabsBarPager.animateScrollToPage(value)\n//      }\n      if (useTabsBarPager) {\n        tabsBarPager.requestScrollToPage(value)\n      }\n    }\n\n  /**\n   * 用于表示展示内容\n   */\n  val contentLazyState = LazyListState()\n\n  @Composable\n  fun ContentPageEffect() {\n    var isFirstView by remember { mutableStateOf(true) }\n    if (!useTabsBarPager) {\n      val viewPortWidth = contentLazyState.layoutInfo.viewportSize.width\n      LaunchedEffect(focusedPageIndex, viewPortWidth) {\n        launch(start = CoroutineStart.UNDISPATCHED) {\n          debugBrowser(\"ContentPageEffect\") {\n            \"contentLazyState.animateScrollToItem($focusedPageIndex) isFirstView=$isFirstView\"\n          }\n          if (isFirstView) {\n            contentLazyState.scrollToItem(focusedPageIndex)\n          } else {\n            contentLazyState.animateScrollToItem(focusedPageIndex)\n          }\n        }\n        launch(start = CoroutineStart.UNDISPATCHED) {\n          debugBrowser(\"ContentPageEffect\") {\n            \"tabsBarLazyState.animateScrollToItem($focusedPageIndex)\"\n          }\n          tabsBarLazyState.animateScrollToItem(focusedPageIndex)\n        }\n      }\n    }\n    LaunchedEffect(Unit) {\n      delay(200)\n      isFirstView = false\n      println(\"QWQ isFirstView done\")\n    }\n  }\n\n  val tabsBarLazyState = LazyListState()\n\n  /**\n   * 用于表示下面搜索框等内容\n   */\n  val tabsBarPager: PagerState = InnerPagerState()\n  private var tabsBarPagerScope by mutableStateOf<CoroutineScope?>(null)\n  private val useTabsBarPager get() = tabsBarPagerScope != null\n\n  @Composable\n  fun SearchBarEffect() {\n    val uiScope = rememberCoroutineScope()\n    DisposableEffect(this) {\n      tabsBarPagerScope = uiScope\n      tabsBarPager.requestScrollToPage(focusedPageIndex)\n      onDispose {\n        tabsBarPagerScope = null\n      }\n    }\n    val viewPortWidth = contentLazyState.layoutInfo.viewportSize.width\n    LaunchedEffect(\n      tabsBarPager.currentPage,\n      tabsBarPager.currentPageOffsetFraction,\n      viewPortWidth\n    ) {\n      var currentPage = tabsBarPager.currentPage\n      var currentPageOffsetFraction = tabsBarPager.currentPageOffsetFraction\n\n      /**\n       * 矫正数值\n       *\n       * 由于HorizontalPager的有效区间值是 -0.5f~0.5f ,荣耀手机在这块兼容出问题了，导致出现了不在区间的值，\n       * 所以在这边强制限制值必须在 -0.5f~0.5f 之间\n       */\n      while (true) {\n        if (currentPageOffsetFraction > 0.5f) {\n          currentPage += 1\n          currentPageOffsetFraction = 1 - currentPageOffsetFraction\n        } else if (currentPageOffsetFraction < -0.5f) {\n          currentPage -= 1\n          currentPageOffsetFraction = -1 - currentPageOffsetFraction\n        } else {\n          break\n        }\n      }\n      // 执行滚动\n      val scrollOffset = viewPortWidth * currentPageOffsetFraction\n      contentLazyState.scrollToItem(currentPage, scrollOffset.fastRoundToInt())\n      focusedPageIndexState.value = currentPage\n    }\n  }\n}\n"},{"language":"kotlin","path":"web/model/BrowserSearchHelper.kt","content":"package org.dweb_browser.browser.web.model\n\nimport kotlinx.serialization.encodeToString\nimport kotlinx.serialization.json.Json\nimport org.dweb_browser.browser.search.SearchEngine\nimport org.dweb_browser.browser.search.SearchInject\nimport org.dweb_browser.browser.web.BrowserNMM\nimport org.dweb_browser.core.module.channelRequest\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.helper.buildUrlString\nimport org.dweb_browser.pure.http.IPureBody\nimport org.dweb_browser.pure.http.PureChannelContext\nimport org.dweb_browser.pure.http.PureClientRequest\nimport org.dweb_browser.pure.http.PureMethod\nimport org.dweb_browser.pure.http.PureTextFrame\n\nsuspend fun BrowserNMM.BrowserRuntime.getEngineHomeLink(key: String) =\n  nativeFetch(buildUrlString(\"file://search.browser.dweb/homeLink\") {\n    parameters[\"key\"] = key\n  }).text()\n\nsuspend fun BrowserNMM.BrowserRuntime.updateEngineState(\n  searchEngine: SearchEngine, enabled: Boolean,\n) = nativeFetch(\n  PureClientRequest(\n    href = buildUrlString(\"file://search.browser.dweb/updateEngineState\") {\n      parameters[\"state\"] = enabled.toString()\n    },\n    PureMethod.POST,\n    body = IPureBody.from(Json.encodeToString(searchEngine))\n  )\n)\n\nsuspend fun BrowserNMM.BrowserRuntime.getInjectList(key: String) =\n  Json.decodeFromString<MutableList<SearchInject>>(\n    nativeFetch(buildUrlString(\"file://search.browser.dweb/injectList\") {\n      parameters[\"key\"] = key\n    }).text()\n  )\n\nclass WatchSearchEngineContext(val engineList: List<SearchEngine>, val channel: PureChannelContext)\n\nsuspend fun BrowserNMM.BrowserRuntime.collectChannelOfEngines(collector: suspend WatchSearchEngineContext.() -> Unit) =\n  channelRequest(\"file://search.browser.dweb/observe/engines\") {\n    for (pureFrame in income) {\n      when (pureFrame) {\n        is PureTextFrame -> {\n          WatchSearchEngineContext(\n            Json.decodeFromString<List<SearchEngine>>(pureFrame.text), this\n          ).collector()\n        }\n\n        else -> {}\n      }\n    }\n  }\n\n\n/**\n * 是否是链接的开头部分\n */\ninternal fun String.couldBeUrlStart() = isEmpty()//\n    || split(\":\", limit = 2).let { it.size > 1 && it.first().matches(Regex(\"^[\\\\w+]+\")) }//\n    || \"data:\".startsWith(this)  //\n    || \"https://\".startsWith(this)  //\n    || \"dweb://\".startsWith(this)  //\n    || \"about://\".startsWith(this)  //"},{"language":"kotlin","path":"web/model/BrowserViewModel.kt","content":"package org.dweb_browser.browser.web.model\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.DisposableEffect\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.runtime.snapshotFlow\nimport io.ktor.http.Url\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.scan.openDeepLink\nimport org.dweb_browser.browser.search.SearchEngine\nimport org.dweb_browser.browser.search.SearchInject\nimport org.dweb_browser.browser.web.BrowserController\nimport org.dweb_browser.browser.web.BrowserNMM\nimport org.dweb_browser.browser.web.data.AppBrowserTarget\nimport org.dweb_browser.browser.web.data.KEY_NO_TRACE\nimport org.dweb_browser.browser.web.data.WebSiteInfo\nimport org.dweb_browser.browser.web.data.WebSiteType\nimport org.dweb_browser.browser.web.debugBrowser\nimport org.dweb_browser.browser.web.deepLinkDoSearch\nimport org.dweb_browser.browser.web.model.page.BrowserBookmarkPage\nimport org.dweb_browser.browser.web.model.page.BrowserDownloadPage\nimport org.dweb_browser.browser.web.model.page.BrowserEnginePage\nimport org.dweb_browser.browser.web.model.page.BrowserHistoryPage\nimport org.dweb_browser.browser.web.model.page.BrowserHomePage\nimport org.dweb_browser.browser.web.model.page.BrowserPage\nimport org.dweb_browser.browser.web.model.page.BrowserSettingPage\nimport org.dweb_browser.browser.web.model.page.BrowserWebPage\nimport org.dweb_browser.browser.web.ui.BrowserPreviewPanel\nimport org.dweb_browser.browser.web.ui.BrowserSearchPanel\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.core.std.file.ext.readFile\nimport org.dweb_browser.dwebview.DWebViewOptions\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.dwebview.WebDownloadArgs\nimport org.dweb_browser.dwebview.create\nimport org.dweb_browser.helper.Signal\nimport org.dweb_browser.helper.clamp\nimport org.dweb_browser.helper.compose.compositionChainOf\nimport org.dweb_browser.helper.encodeURIComponent\nimport org.dweb_browser.helper.format\nimport org.dweb_browser.helper.humanTrim\nimport org.dweb_browser.helper.isDwebDeepLink\nimport org.dweb_browser.helper.isTrimEndSlashEqual\nimport org.dweb_browser.helper.platform.toByteArray\nimport org.dweb_browser.helper.toWebUrl\nimport org.dweb_browser.helper.toWebUrlOrWithoutProtocol\nimport org.dweb_browser.helper.trueAlso\nimport org.dweb_browser.helper.withScope\nimport org.dweb_browser.sys.permission.SystemPermissionName\nimport org.dweb_browser.sys.permission.SystemPermissionTask\nimport org.dweb_browser.sys.permission.ext.requestSystemPermission\nimport org.dweb_browser.sys.share.ext.postSystemShare\nimport org.dweb_browser.sys.toast.ToastPositionType\nimport org.dweb_browser.sys.toast.ext.showToast\nimport org.dweb_browser.sys.window.core.WindowContentRenderScope\n\nval LocalBrowserViewModel = compositionChainOf<BrowserViewModel>(\"BrowserModel\")\nval LocalShowIme = compositionChainOf(\"ShowIme\") {\n  mutableStateOf(false)\n}\n\ndata class DwebLinkSearchItem(val link: String, val target: AppBrowserTarget) {\n  companion object {\n    val Empty = DwebLinkSearchItem(\"\", AppBrowserTarget.SELF)\n  }\n}\n\n/**\n * 这里作为 ViewModel\n */\nclass BrowserViewModel(\n  internal val browserController: BrowserController,\n  internal val browserNMM: BrowserNMM.BrowserRuntime,\n) {\n  val browserOnVisible = browserController.onWindowVisible // IOS 在用\n  val browserOnClose = browserController.onCloseWindow // IOS 在用\n  val lifecycleScope get() = browserNMM.getRuntimeScope()\n  private val pages = mutableStateListOf<BrowserPage>() // 多浏览器列表\n  val pageSize get() = pages.size\n  var showMore by mutableStateOf(false)\n  val previewPanel = BrowserPreviewPanel(this)\n  val searchPanel = BrowserSearchPanel(this)\n\n  // 该字段是用来存储通过 deeplink 调用的 search 和 openinbrowser 关键字，关闭搜索界面需要直接置空\n  var searchKeyWord by mutableStateOf<String?>(null)\n    internal set\n  var scale by mutableFloatStateOf(1f)\n\n  // 无痕模式状态\n  var isIncognitoOn by mutableStateOf(false)\n    private set\n\n  suspend fun updateIncognitoModeUI(noTrace: Boolean) {\n    isIncognitoOn = noTrace\n    withScope(lifecycleScope) {\n      browserController.saveStringToStore(KEY_NO_TRACE, if (noTrace) \"true\" else \"\")\n    }\n  }\n\n  private var searchEngineList = listOf<SearchEngine>()\n  val filterShowEngines get() = searchEngineList.filter { it.enable }\n  val filterAllEngines get() = searchEngineList\n\n  init {\n    lifecycleScope.launch {\n      // 同步搜索引擎列表\n      browserNMM.collectChannelOfEngines {\n        searchEngineList = engineList\n      }\n    }\n  }\n\n  val searchInjectList = mutableStateListOf<SearchInject>()\n\n  /**获取注入的搜索引擎列表*/\n  suspend fun getInjectList(searchText: String) {\n    val list = browserNMM.getInjectList(searchText)\n    searchInjectList.clear()\n    searchInjectList.addAll(list)\n  }\n\n  suspend fun readFile(path: String) = browserNMM.readFile(path, create = false).binary()\n\n  fun getBookmarks() = browserController.bookmarksStateFlow.value\n  fun getHistoryLinks() = browserController.historyStateFlow.value\n\n  fun getPageOrNull(currentPage: Int) = pages.getOrNull(currentPage)\n  fun getPage(currentPage: Int) = getPageOrNull(currentPage) ?: pages.first()\n  fun getPageIndex(page: BrowserPage) = pages.indexOf(page)\n//  var focusedPage by mutableStateOf<BrowserPage?>(null)\n//    private set\n//  pagerStates\n  var isTabFixedSize by mutableStateOf(true) // 用于标志当前的HorizontalPager中的PageSize是Fill还是Fixed\n  val pagerStates = BrowserPagerStates(this)\n  var focusedPage\n    get() = pages.getOrNull(focusedPageIndex)\n    set(value) {\n      value?.also { focusedPageIndex = pages.indexOf(value) }\n    }\n  var focusedPageIndex\n    get() = pagerStates.focusedPageIndex\n    set(value) {\n      pagerStates.focusedPageIndex = value\n    }\n\n  suspend fun focusPageUI(page: BrowserPage?) {\n    val prePage = focusedPage\n    if (prePage == page) {\n      return\n    }\n    debugBrowser(\"focusBrowserView\", page)\n    // 前一个页面要失去焦点了，所以进行截图\n    prePage?.captureViewInBackground(\"prePage cap by focus newPage\")\n    focusedPage = page\n  }\n\n  suspend fun focusPageUI(pageIndex: Int) {\n    focusPageUI(pages.getOrNull(pageIndex))\n  }\n\n  /**\n   * 请求系统权限\n   */\n  suspend fun requestSystemPermission(\n    title: String = \"\", description: String = \"\", permissionName: SystemPermissionName,\n  ): Boolean {\n    return browserNMM.requestSystemPermission(\n      SystemPermissionTask(\n        permissionName, title = title, description = description\n      )\n    )\n  }\n\n  @Composable\n  fun ViewModelEffect(windowRenderScope: WindowContentRenderScope) {\n    val uiScope = rememberCoroutineScope()\n    /// 初始化 isNoTrace\n    LaunchedEffect(Unit) {\n      withScope(uiScope) {\n        isIncognitoOn = browserController.getStringFromStore(KEY_NO_TRACE)?.isNotEmpty() ?: false\n      }\n    }\n    /// 判断是否需要显示SearchPanel\n    LaunchedEffect(Unit) {\n      snapshotFlow { searchKeyWord }.collect { keyWord ->\n        val searchWord = keyWord?.ifEmpty { null } ?: return@collect\n        val replaceHomePage = if (focusedPage is BrowserHomePage) focusedPage else null\n        tryOpenUrlUI(searchWord, replaceHomePage) {\n          // 如果searchWord不满足browserPage，那么就需要弹出搜索界面 BrowserSearchPanel\n          val searchPage = focusedPage ?: run {\n            BrowserHomePage(browserController).apply {\n              addNewPageUI(this) { addIndex = focusedPageIndex + 1 } // 直接移动到最后\n            }\n          }\n          searchPanel.showSearchPanel(searchPage)\n        }\n      }\n    }\n    /// 监听窗口关闭，进行资源释放\n    DisposableEffect(Unit) {\n      val off = browserController.onCloseWindow {\n        withScope(uiScope) {\n          pages.toList().forEach { browserContentItem -> closePageUI(browserContentItem) }\n          pages.clear()\n        }\n      }\n      onDispose { off() }\n    }\n  }\n\n  private suspend fun createDwebView(url: String) = IDWebView.create(\n    browserNMM, DWebViewOptions(\n      // 主动补全 https:// 头\n      url = url.toWebUrlOrWithoutProtocol()?.toString() ?: url,\n      /// 我们会完全控制页面将如何离开，所以这里兜底默认为留在页面\n      detachedStrategy = DWebViewOptions.DetachedStrategy.Ignore,\n    ), viewBox = browserController.viewBox\n  ).also { dwebview ->\n    browserNMM.onBeforeShutdown {\n      browserNMM.scopeLaunch(cancelable = false) {\n        dwebview.destroy()\n      }\n    }\n  }\n\n  private suspend fun createWebPage(dWebView: IDWebView): BrowserWebPage =\n    BrowserWebPage(dWebView, browserController).also {\n      dWebView.onCreateWindow { itemDwebView ->\n        val url = itemDwebView.getUrl()\n        if (!url.startsWith(\"dweb://\")) {\n          val newWebPage = createWebPage(itemDwebView)\n          addNewPageUI(newWebPage)\n        } else {\n          itemDwebView.destroy()\n        }\n      }\n      addDownloadListener(dWebView.onDownloadListener)\n    }\n\n  fun addDownloadListener(listener: Signal.Listener<WebDownloadArgs>) {\n    listener.invoke { args: WebDownloadArgs ->\n      debugBrowser(\"download\", args)\n      browserController.openDownloadDialog(args)\n    }\n  }\n\n  private suspend fun createWebPage(url: String) = createWebPage(createDwebView(url))\n\n  /**\n   * 接收到 deeplink 的搜索或者打开网页请求操作\n   */\n  suspend fun openSearchPanelUI(searchText: String, target: AppBrowserTarget) {\n    // 先判断search是否不为空，然后在判断search是否是地址，\n    debugBrowser(\"openSearchPanelUI\", \"searchText=$searchText, target=$target\")\n    /// 目前iOS禁用了原生的浏览器实现，使用common，所以下面这行代码是走不过去的，因为等不到浏览器初始化\n    if (false) {\n      deepLinkDoSearch(DwebLinkSearchItem(link = searchText, target = target))\n    }\n    // android 实现仍然在 commonMain这边\n    hideAllPanel() // 先将该内容置为空，然后修改 searchKeyWord 的值，出发 ViewModelEffect 监听，来确认是否需要再次显示\n    searchKeyWord = searchText // 上面 ViewModelEffect 监听 searchKeyWord 状态，\n  }\n\n  /**\n   * 如果找到同样url的页面，那么聚焦那个页面\n   * 如果没有找到，同时它又是合法的url，那么创建新页面打开\n   * 否则，走 unknownUrl 回调\n   *\n   * > 为了适应 ios，从而将 webview 的处理独立开\n   */\n  suspend fun tryOpenUrlUI(\n    url: String, replacePage: BrowserPage? = null, unknownUrl: (suspend (String) -> Unit)? = null,\n  ) {\n    if (url.isEmpty()) return // 如果 url 是空的，直接返回，不操作\n    // 判断如果已存在，直接focus，不新增界面\n    if (replacePage == null) {\n      when (val samePage = pages.find { page -> page.isUrlMatch(url) }) {\n        null -> {\n          // 尝试添加新页面\n          val newPage = addNewPageUI(url) { replaceOldHomePage = true }\n          // 否则走未知模式\n          if (newPage == null) {\n            unknownUrl?.invoke(url)\n            return // 直接返回，否则会影响到将 searchKeyWord 置空操作，也就是下面调用的 hideAllPanel()\n          }\n        }\n\n        else -> {\n          focusPageUI(samePage)\n          samePage.updateUrl(url)\n        }\n      }\n    } else {\n      if (replacePage is BrowserWebPage) {\n        replacePage.updateUrl(url)\n      } else if (replacePage.isUrlMatch(url)) {\n        replacePage.updateUrl(url)\n      } else {\n        // 尝试添加新页面\n        val newPage = addNewPageUI(url) {\n          addIndex = pages.indexOf(replacePage)\n          replaceOldPage = true\n        }\n        // 否则走未知模式\n        if (newPage == null) {\n          unknownUrl?.invoke(url)\n          return // 直接返回，否则会影响到将 searchKeyWord 置空操作，也就是下面调用的 hideAllPanel()\n        }\n      }\n    }\n    hideAllPanel() // 为了保证页面加载的时候，将前面的Panel关闭\n  }\n\n  suspend fun closePageUI(page: BrowserPage): Boolean {\n    val index = pages.indexOf(page)\n    if (index == -1) {\n      return false\n    }\n\n    return pages.remove(page).trueAlso {\n      if (pages.isEmpty()) {\n        addNewPageUI(BrowserHomePage(browserController)) {\n          focusPage = true\n          replaceOldHomePage = false\n        }\n      } else if (focusedPage == page || focusedPage == null) {\n        // TODO 获取的index是否在移除后的列表有效区间内，如果存在可以进行聚焦，不存在（-1），等待PagerState内部自行处理\n        focusPageUI(clamp(0, index, pageSize - 1))\n      }\n      page.destroy()\n    }\n  }\n\n  /**检查是否有设置过的默认搜索引擎，并且拼接成webUrl*/\n  private suspend fun checkAndEnableSearchEngine(key: String): Url? {\n    val homeLink = withScope(lifecycleScope) {\n      browserNMM.getEngineHomeLink(key.encodeURIComponent())\n    } // 将关键字对应的搜索引擎置为有效\n    return if (homeLink.isNotEmpty()) homeLink.toWebUrl() else null\n  }\n\n  fun doIOSearchUrl(searchEngine: SearchEngine, keyword: String) =\n    doIOSearchUrl(searchEngine.searchLinks.first().format(keyword))\n\n  /**\n   * 判断 url 是否是 deepLink\n   * 是：直接代理访问\n   * 否：将 url 进行判断封装，符合条件后，判断当前界面是否是 BrowserWebPage，然后进行搜索操作\n   */\n  fun doIOSearchUrl(searchText: String) = lifecycleScope.launch {\n    val text = searchText.humanTrim()\n    if (text.isDwebDeepLink()) {\n      browserNMM.nativeFetch(text)\n      return@launch\n    }\n    // 尝试\n    val webUrl = text.toWebUrl() ?: checkAndEnableSearchEngine(text) // 检查是否有默认的搜索引擎\n    ?: text.toWebUrlOrWithoutProtocol() // 上面先判断标准的网址和搜索引擎后，仍然为空时，执行一次域名转化判断\n    ?: filterShowEngines.firstOrNull()?.searchLinks?.first()?.format(text)?.toWebUrl() // 转换成搜索链接\n    debugBrowser(\"doIOSearchUrl\", \"url=$text, webUrl=$webUrl, focusedPage=$focusedPage\")\n    // 当没有搜到需要的数据，给出提示\n    webUrl?.toString()?.let { searchUrl ->\n      if (focusedPage != null && focusedPage is BrowserWebPage) {\n        (focusedPage as BrowserWebPage).loadUrl(searchUrl)// 使用当前页面继续搜索\n      } else {\n        addNewPageUI(searchUrl) { replaceOldPage = true } // 新增 BrowserWebPage 覆盖当前页\n      }\n    } ?: showToastMessage(BrowserI18nResource.Home.search_error.text)\n  }\n\n  data class AddPageOptions(\n    var focusPage: Boolean = true,\n    var addIndex: Int? = null,\n    var replaceOldHomePage: Boolean = false,\n    var replaceOldPage: Boolean = false,\n  )\n\n  suspend fun addNewPageUI(\n    url: String? = null,\n    options: AddPageOptions = AddPageOptions(),\n    optionsModifier: (AddPageOptions.() -> Unit)? = null,\n  ): BrowserPage? {\n    val newPage = if (url == null || BrowserHomePage.isNewTabUrl(url)) {\n      BrowserHomePage(browserController)\n    } else if (BrowserBookmarkPage.isBookmarkUrl(url)) {\n      BrowserBookmarkPage(browserController)\n    } else if (BrowserHistoryPage.isHistoryUrl(url)) {\n      BrowserHistoryPage(browserController)\n    } else if (BrowserDownloadPage.isDownloadUrl(url)) {\n      BrowserDownloadPage(browserController)\n    } else if (BrowserSettingPage.isSettingUrl(url)) {\n      BrowserSettingPage(browserController)\n    } else if (BrowserEnginePage.isEngineUrl(url)) {\n      BrowserEnginePage(browserController)\n    } else if (BrowserWebPage.isWebUrl(url)) { // 判断是否网页应该放在最下面\n      createWebPage(url)\n    } else null\n    if (newPage != null) {\n      addNewPageUI(newPage, options, optionsModifier)\n    }\n    return newPage\n  }\n\n  private suspend fun addNewPageUI(\n    newPage: BrowserPage,\n    options: AddPageOptions = AddPageOptions(),\n    optionsModifier: (AddPageOptions.() -> Unit)? = null,\n  ) {\n    optionsModifier?.invoke(options)\n    val oldPage = options.addIndex?.let { index ->\n      pages.getOrNull(index)?.also { pages.add(index, newPage) }\n    } ?: focusedPage.also { pages.add(newPage) }\n\n    if ((options.replaceOldPage && oldPage != null) || (options.replaceOldHomePage && oldPage != focusedPage && oldPage is BrowserHomePage)) {\n      closePageUI(oldPage)\n    }\n    if (options.focusPage) {\n      focusPageUI(newPage)\n    }\n  }\n\n  suspend fun shareWebSiteInfo(page: BrowserWebPage) {\n    browserNMM.postSystemShare(title = page.title, url = page.url).let { result ->\n      if (!result.success) {\n        showToastMessage(result.message)\n      }\n    }\n  }\n\n  /**\n   * 添加到桌面功能\n   */\n  suspend fun addUrlToDesktopUI(): Boolean {\n    return this.focusedPage?.let { page ->\n      if (page is BrowserWebPage) {\n        addUrlToDesktopUI(page)\n      } else false\n    } ?: false\n  }\n\n  suspend fun addUrlToDesktopUI(page: BrowserWebPage) = addUrlToDesktopUI(\n    title = page.title, link = page.url, iconString = page.webView.getIcon()\n  )\n\n  suspend fun addUrlToDesktopUI(title: String, link: String, iconString: String): Boolean {\n    return browserController.addUrlToDesktop(\n      title = title, url = link, icon = iconString\n    ).also { result ->\n      showToastMessage(\n        if (result) {\n          BrowserI18nResource.toast_message_add_desk_success.text\n        } else {\n          BrowserI18nResource.toast_message_add_desk_exist.text\n        }\n      )\n    }\n  }\n\n  /**\n   * 操作书签数据\n   * 新增：需要新增数据\n   * 修改：该对象已经变更，可直接保存，所以不需要传\n   * 删除：需要删除数据\n   */\n  suspend fun addBookmarkUI(vararg items: WebSiteInfo) {\n    showToastMessage(BrowserI18nResource.toast_message_add_bookmark.text)\n    val oldBookmarkMap = browserController.bookmarksStateFlow.value.associateBy { it.url }\n    // 在老列表中，寻找没有交集的部分\n    val newItems = items.filter { newItem -> !oldBookmarkMap.containsKey(newItem.url) }\n    // 追加到前面\n    browserController.bookmarksStateFlow.value =\n      (newItems + browserController.bookmarksStateFlow.value)\n    lifecycleScope.launch {\n      browserController.saveBookLinks()\n    }.join()\n  }\n\n  suspend fun addBookmarkUI(webPage: BrowserWebPage) =\n    addBookmarkUI(webPage.webView.toWebSiteInfo(WebSiteType.Bookmark))\n\n  suspend fun removeBookmarkUI(vararg items: WebSiteInfo) {\n    showToastMessage(BrowserI18nResource.toast_message_remove_bookmark.text)\n    browserController.bookmarksStateFlow.value -= items\n    lifecycleScope.launch {\n      browserController.saveBookLinks()\n    }.join()\n  }\n\n  suspend fun removeBookmarkUI(url: String) = browserController.bookmarksStateFlow.value.filter {\n    it.url == url\n  }.map { removeBookmarkUI(it) }\n\n  /**\n   * 修改书签\n   *\n   * 返回Boolean：是否修改成功\n   */\n  suspend fun updateBookmarkUI(oldBookmark: WebSiteInfo, newBookmark: WebSiteInfo): Boolean {\n    val bookmarks = browserController.bookmarksStateFlow.value\n    val index = bookmarks.indexOf(oldBookmark)\n    if (index == -1) {\n      return false\n    }\n    val newBookmarks = bookmarks.toMutableList()\n    newBookmarks[index] = newBookmark\n    browserController.bookmarksStateFlow.value = newBookmarks.toList()\n    showToastMessage(BrowserI18nResource.toast_message_update_bookmark.text)\n    lifecycleScope.launch { browserController.saveBookLinks() }.join()\n    return true\n  }\n\n  /**\n   * 操作历史数据\n   * 新增：需要新增数据\n   * 修改：历史数据没有修改\n   * 删除：需要删除数据\n   */\n  suspend fun addHistoryLinkUI(item: WebSiteInfo) {\n    if (isIncognitoOn) return // 如果是无痕模式，则不能进行存储历史操作\n    val dayKey = item.day.toString()\n    val addUrl = item.url\n    browserController.historyStateFlow.update { historyMap ->\n      val dayList = historyMap[dayKey]?.run {\n        toMutableList().apply {\n          removeAll { item -> item.url.isTrimEndSlashEqual(addUrl) } // 删除同一天的重复数据\n          add(0, item)\n        }.toList()\n      } ?: listOf(item)\n      browserController.saveHistoryLinks(dayKey, dayList)\n\n      historyMap + Pair(dayKey, dayList)\n    }\n  }\n\n  suspend fun removeHistoryLink(item: WebSiteInfo) {\n    val dayKey = item.day.toString()\n    browserController.historyStateFlow.update { historyMap ->\n      val dayList = historyMap[dayKey]?.filter { it.url != item.url } ?: return@update historyMap\n      browserController.saveHistoryLinks(dayKey, dayList)\n      historyMap + Pair(dayKey, dayList)\n    }\n  }\n\n  suspend fun removeHistoryLink(items: List<WebSiteInfo>) {\n    browserController.historyStateFlow.update { historyMap ->\n      var newHistoryMap = historyMap\n      val removeMap = items.groupBy { it.day.toString() }\n      removeMap.map { (dayKey, list) ->\n        historyMap[dayKey]?.filterNot { it in list }?.also { dayList ->\n          browserController.saveHistoryLinks(dayKey, dayList)\n          newHistoryMap = historyMap + Pair(dayKey, dayList)\n        }\n      }\n      newHistoryMap\n    }\n  }\n\n  suspend fun loadMoreHistory(off: Int) {\n    browserController.loadMoreHistory(off)\n  }\n\n  fun showToastMessage(message: String, position: ToastPositionType? = null) {\n    browserController.lifecycleScope.launch { browserNMM.showToast(message, position = position) }\n  }\n\n  fun disableSearchEngine(searchEngine: SearchEngine) = lifecycleScope.launch {\n    browserNMM.updateEngineState(searchEngine, false)\n  }\n\n  fun enableSearchEngine(searchEngine: SearchEngine) = lifecycleScope.launch {\n    browserNMM.updateEngineState(searchEngine, true)\n  }\n\n  fun showQRCodePanelUI() {\n    browserNMM.scopeLaunch(cancelable = true) {\n      val response = browserNMM.nativeFetch(\"file://scan.browser.dweb/open\")\n      if (response.isOk) {\n        openDeepLink(response.text())\n      } else {\n        browserNMM.showToast(message = response.text())\n      }\n    }\n  }\n\n  /**\n   * 隐藏所有的Panel\n   */\n  fun hideAllPanel() {\n    previewPanel.hideBrowserPreviewWithoutAnimation()\n    searchKeyWord = null\n    searchPanel.hideSearchPanel()\n  }\n}\n\n/**\n * 将WebViewState转为WebSiteInfo\n */\nsuspend fun IDWebView.toWebSiteInfo(type: WebSiteType, url: String = getUrl()) = WebSiteInfo(\n  title = getTitle().ifEmpty { url },\n  url = url,\n  type = type,\n  icon = getIconBitmap()?.toByteArray() // 这也有一个\n)\n"},{"language":"kotlin","path":"web/ui/BrowserBottomBar.kt","content":"package org.dweb_browser.browser.web.ui\n\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.requiredSizeIn\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.pager.HorizontalPager\nimport androidx.compose.foundation.pager.PageSize\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.rounded.Add\nimport androidx.compose.material.icons.rounded.Filter1\nimport androidx.compose.material.icons.rounded.Filter2\nimport androidx.compose.material.icons.rounded.Filter3\nimport androidx.compose.material.icons.rounded.Filter4\nimport androidx.compose.material.icons.rounded.Filter5\nimport androidx.compose.material.icons.rounded.Filter6\nimport androidx.compose.material.icons.rounded.Filter7\nimport androidx.compose.material.icons.rounded.Filter8\nimport androidx.compose.material.icons.rounded.Filter9\nimport androidx.compose.material.icons.rounded.Filter9Plus\nimport androidx.compose.material.icons.rounded.MoreVert\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalFocusManager\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.LocalShowIme\nimport org.dweb_browser.helper.compose.ScalePopupPlaceholder\nimport org.dweb_browser.helper.compose.hoverCursor\n\n@Composable\nfun BrowserBottomBar(scale: Float, modifier: Modifier) {\n  val viewModel = LocalBrowserViewModel.current\n  val uiScope = rememberCoroutineScope()\n  val localShowIme = LocalShowIme.current\n\n  val localFocus = LocalFocusManager.current\n  LaunchedEffect(Unit) {\n    if (!localShowIme.value) {\n      localFocus.clearFocus()\n    }\n  }\n  Row(\n    modifier,\n    horizontalArrangement = Arrangement.SpaceAround,\n    verticalAlignment = Alignment.CenterVertically\n  ) {\n    // 新增页面\n    IconButton({\n      uiScope.launch {\n        // 添加新页面到当前页面到后面\n        viewModel.addNewPageUI {\n          addIndex = viewModel.focusedPageIndex + 1\n        }\n      }\n    }, Modifier.hoverCursor()) {\n      Icon(\n        imageVector = Icons.Rounded.Add,\n        contentDescription = \"Add New Page\",\n      )\n    }\n\n    BoxWithConstraints(modifier = Modifier.weight(1f)) {\n      viewModel.isTabFixedSize = maxWidth >= 280.dp\n      if (viewModel.isTabFixedSize) {\n        // 如果宽度过大，标签使用固定大小\n        LazyRow(\n          state = viewModel.pagerStates.tabsBarLazyState,\n          contentPadding = PaddingValues(8.dp),\n          horizontalArrangement = Arrangement.spacedBy(4.dp),\n        ) {\n          items(\n            viewModel.pageSize,\n            key = { pageIndex -> viewModel.getPage(pageIndex).hashCode() }) { pageIndex ->\n            PageTabWithToolTip(\n              viewModel.getPage(pageIndex),\n              Modifier.requiredSizeIn(minWidth = 180.dp, maxWidth = 220.dp)\n            )\n          }\n        }\n      } else {\n        viewModel.pagerStates.SearchBarEffect()\n        HorizontalPager(\n          state = viewModel.pagerStates.tabsBarPager,\n          modifier = Modifier.fillMaxSize(),\n          contentPadding = PaddingValues(8.dp),\n          pageSize = PageSize.Fill,\n          // beyondViewportPageCount = Int.MAX_VALUE,\n          userScrollEnabled = true,\n          pageSpacing = 4.dp,\n          key = { pageIndex -> viewModel.getPage(pageIndex).hashCode() },\n          pageContent = { pageIndex ->\n            PageTabWithToolTip(\n              viewModel.getPage(pageIndex),\n              Modifier.requiredSizeIn(minWidth = 180.dp)\n            )\n          },\n        )\n      }\n    }\n\n    // 多窗口预览界面\n    IconButton(onClick = {\n      uiScope.launch {\n        viewModel.focusedPage?.captureViewInBackground(\"for preview\")\n        viewModel.previewPanel.toggleShowPreviewUI(PreviewPanelVisibleState.DisplayGrid)\n      }\n    }, Modifier.hoverCursor()) {\n      Icon(\n        imageVector = getMultiImageVector(viewModel.pageSize),\n        contentDescription = \"Open Preview Panel\",\n      )\n    }\n\n    // 功能列表\n    IconButton(onClick = { viewModel.showMore = true }, Modifier.hoverCursor()) {\n      ScalePopupPlaceholder(scale) {\n        BrowserMenuPanel(scale)\n      }\n      Icon(\n        imageVector = Icons.Rounded.MoreVert,\n        contentDescription = \"Open Menu Panel\",\n      )\n    }\n  }\n}\n\ninternal fun getMultiImageVector(size: Int) = when (size) {\n  1 -> Icons.Rounded.Filter1\n  2 -> Icons.Rounded.Filter2\n  3 -> Icons.Rounded.Filter3\n  4 -> Icons.Rounded.Filter4\n  5 -> Icons.Rounded.Filter5\n  6 -> Icons.Rounded.Filter6\n  7 -> Icons.Rounded.Filter7\n  8 -> Icons.Rounded.Filter8\n  9 -> Icons.Rounded.Filter9\n  else -> Icons.Rounded.Filter9Plus\n}\n"},{"language":"kotlin","path":"web/ui/BrowserContentPager.kt","content":"package org.dweb_browser.browser.web.ui\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.requiredSize\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.platform.LocalFocusManager\nimport androidx.compose.ui.zIndex\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.helper.capturable.capturable2\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.sys.window.core.LocalWindowController\n\n@Composable\nfun BrowserContentPager(contentScaled: Float) {\n  val viewModel = LocalBrowserViewModel.current\n  val localFocusManager = LocalFocusManager.current\n\n  viewModel.focusedPage?.also { focusPage ->\n    LocalWindowController.current.navigation.GoBackHandler(viewModel.pageSize > 1) {\n      viewModel.closePageUI(focusPage)\n    }\n  }\n\n  Box(modifier = Modifier.fillMaxSize().clickableWithNoEffect {\n    localFocusManager.clearFocus()\n  }) {\n    /// 渲染聚焦页面\n    viewModel.pagerStates.ContentPageEffect()\n    BoxWithConstraints {\n      val lazyState = viewModel.pagerStates.contentLazyState\n      val focusedPageIndex = viewModel.focusedPageIndex\n      LazyRow(\n        state = lazyState,\n        modifier = Modifier.fillMaxWidth().zIndex(1f),\n        userScrollEnabled = false,\n      ) {\n        items(\n          viewModel.pageSize,\n          key = { pageIndex -> viewModel.getPage(pageIndex).hashCode() },\n        ) { pageIndex ->\n          val browserPage = viewModel.getPage(pageIndex)\n          browserPage.scale = contentScaled\n          browserPage.Render(\n            Modifier.requiredSize(maxWidth, maxHeight).capturable2(browserPage.captureController)\n          )\n\n          /// 滚动到一定阈值的时候focusedPageIndex的变更，由此来判定页面是否要离开，然后进行截图\n          /// 这里的问题在于，依赖于滚动的过程，如果是snapTo，而不是animateScrollTo，那么就会有截屏失败的问题，但不影响用户体验\n          /// 同时，这种依赖于 LazyRow 的方案，虽然渲染性能不错，但是Android不能在后台截图，强行获取网页位图，会有一些问题，比如滚动量未知，视窗大小未知\n          /// 如果有很强烈的后台截图的需求，可以更改 lazyState 中的 prefetchStrategy 属性\n          var didEnter by remember { mutableStateOf(false) }\n          var willLeave by remember { mutableStateOf(false) }\n\n          if (!didEnter) {\n            if (focusedPageIndex == pageIndex) {\n              didEnter = true\n            }\n          } else {\n            if (!willLeave && focusedPageIndex != pageIndex) {\n              willLeave = true\n            }\n          }\n          if (willLeave) {\n            LaunchedEffect(Unit) {\n              browserPage.captureViewInBackground(\"page will invisible by scroll\")\n            }\n          }\n        }\n      }\n    }\n  }\n}"},{"language":"kotlin","path":"web/ui/BrowserDownloadDialog.kt","content":"package org.dweb_browser.browser.web.ui\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.wrapContentHeight\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.text.SpanStyle\nimport androidx.compose.ui.text.buildAnnotatedString\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.text.withStyle\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.window.Dialog\nimport androidx.compose.ui.window.DialogProperties\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.web.BrowserDownloadController\nimport org.dweb_browser.browser.web.data.BrowserDownloadItem\nimport org.dweb_browser.helper.compose.AutoResizeTextContainer\nimport org.dweb_browser.helper.compose.TextCenterEllipsis\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.helper.toSpaceSize\nimport org.dweb_browser.helper.valueIn\n\n/**\n * 下载弹出界面\n */\n@Composable\nfun BrowserDownloadController.BrowserDownloadDialog() {\n  // 显示一个提醒的 dialog， 另一个就是显示下载进度的\n  curDownloadItem?.let { downloadItem ->\n    if (alreadyExists) {\n      DownloadTip(downloadItem)\n    } else {\n      DownloadTopToastBar(downloadItem)\n    }\n  }\n}\n\n/**\n * 用于提示当前下载链接已存在，是否重新下载\n */\n@Composable\nprivate fun BrowserDownloadController.DownloadTip(downloadItem: BrowserDownloadItem) {\n  AlertDialog(onDismissRequest = { }, title = {\n    Text(text = BrowserI18nResource.Download.dialog_retry_title())\n  }, text = {\n    val textArray = BrowserI18nResource.Download.dialog_retry_message().split(\"%s\")\n    Text(text = buildAnnotatedString {\n      append(textArray.getOrNull(0))\n      withStyle(\n        style = SpanStyle(\n          color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.Bold\n        )\n      ) {\n        append(downloadItem.fileName)\n      }\n      append(textArray.getOrNull(1))\n      append(\n        downloadItem.downloadArgs.contentLength?.toSpaceSize()\n          ?: BrowserI18nResource.Download.unknownSize()\n      )\n      append(textArray.getOrNull(2))\n    })\n  }, confirmButton = {\n    TextButton(onClick = { clickRetryButton(downloadItem) }) {\n      Text(BrowserI18nResource.Download.dialog_confirm())\n    }\n  }, dismissButton = {\n    TextButton(onClick = { closeDownloadDialog() }) {\n      Text(BrowserI18nResource.Download.dialog_cancel())\n    }\n  })\n}\n\n/**\n * 窗口顶部，下载提示框\n */\n@Composable\nprivate fun BrowserDownloadController.DownloadTopToastBar(downloadItem: BrowserDownloadItem) {\n  Dialog(\n    onDismissRequest = { closeDownloadDialog() },\n    properties = DialogProperties(usePlatformDefaultWidth = false) // 关闭左右边的边距\n  ) {\n    // 全屏覆盖，方便设定对话框的绝对位置\n    Column(modifier = Modifier.fillMaxSize()) {\n      Box(modifier = Modifier.weight(1f).fillMaxWidth().clickableWithNoEffect {\n        closeDownloadDialog()\n      })\n      // 约束布局，使得对话框能在底部\n      Column(\n        modifier = Modifier.wrapContentHeight().fillMaxWidth()\n          .clip(RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp))\n          .background(MaterialTheme.colorScheme.background)\n          .padding(horizontal = 16.dp, vertical = 32.dp),\n        verticalArrangement = Arrangement.spacedBy(16.dp)\n      ) {\n        Text(\n          text = BrowserI18nResource.Download.dialog_download_title(),\n          modifier = Modifier.fillMaxWidth(),\n          textAlign = TextAlign.Center,\n          fontSize = 18.sp,\n          fontWeight = FontWeight.Bold,\n          color = MaterialTheme.colorScheme.onBackground,\n          maxLines = 1\n        )\n\n        Row(\n          modifier = Modifier.fillMaxWidth(),\n          verticalAlignment = Alignment.CenterVertically,\n          horizontalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n          Image(\n            painter = downloadItem.fileType.painter(),\n            contentDescription = downloadItem.fileName,\n            modifier = Modifier.size(56.dp),\n          )\n\n          Column(\n            modifier = Modifier.weight(1f).height(56.dp),\n            verticalArrangement = Arrangement.SpaceAround\n          ) {\n            TextCenterEllipsis(\n              text = downloadItem.fileName,\n              style = MaterialTheme.typography.bodyMedium,\n              color = MaterialTheme.colorScheme.onBackground\n            )\n            Text(\n              text = downloadItem.downloadArgs.contentLength?.toSpaceSize()\n                ?: BrowserI18nResource.Download.unknownSize(),\n              maxLines = 1,\n              style = MaterialTheme.typography.bodySmall,\n              color = MaterialTheme.colorScheme.onBackground,\n            )\n          }\n\n          DownloadButton(downloadItem) { clickDownloadButton(downloadItem) }\n        }\n      }\n    }\n  }\n}\n\n/**\n * 按钮显示内容\n * 根据showProgress来确认按钮是否要显示进度\n */\n@Composable\nprivate fun DownloadButton(\n  downloadItem: BrowserDownloadItem, showProgress: Boolean = true, onClick: () -> Unit,\n) {\n  val showText = when (downloadItem.state.state) {\n    DownloadState.Init, DownloadState.Canceled, DownloadState.Failed -> {\n      BrowserI18nResource.Download.button_title_init()\n    }\n    // 显示百分比\n    DownloadState.Downloading -> {\n      if (showProgress) {\n        downloadItem.state.percentProgress()\n      } else {\n        BrowserI18nResource.Download.button_title_pause()\n      }\n    }\n\n    DownloadState.Paused -> BrowserI18nResource.Download.button_title_resume()\n    DownloadState.Completed -> BrowserI18nResource.Download.button_title_open() // 完成后，直接显示为打开\n  }\n\n  val progress = if (showProgress && downloadItem.state.state.valueIn(\n      DownloadState.Downloading, DownloadState.Paused\n    )\n  ) {\n    downloadItem.state.progress()\n  } else {\n    1.0f\n  }\n  Box(\n    modifier = Modifier.padding(8.dp).clip(RoundedCornerShape(32.dp)).width(90.dp).background(\n      brush = Brush.horizontalGradient(\n        0.0f to MaterialTheme.colorScheme.primary,\n        progress to MaterialTheme.colorScheme.primary,\n        progress to MaterialTheme.colorScheme.primary.copy(alpha = 0.3f),\n        1.0f to MaterialTheme.colorScheme.primary.copy(alpha = 0.3f),\n      )\n    ).padding(vertical = 8.dp).clickableWithNoEffect { onClick() },\n    contentAlignment = Alignment.Center\n  ) {\n    AutoResizeTextContainer(modifier = Modifier.fillMaxWidth()) {\n      Text(\n        text = showText,\n        softWrap = false,\n        color = MaterialTheme.colorScheme.background,\n        maxLines = 1,\n        overflow = TextOverflow.Clip,\n        modifier = Modifier.align(Alignment.Center)\n      )\n    }\n  }\n}"},{"language":"kotlin","path":"web/ui/BrowserMenuPanel.kt","content":"package org.dweb_browser.browser.web.ui\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.AddToHomeScreen\nimport androidx.compose.material.icons.automirrored.filled.ArrowForwardIos\nimport androidx.compose.material.icons.automirrored.rounded.ArrowBackIos\nimport androidx.compose.material.icons.automirrored.rounded.ArrowForwardIos\nimport androidx.compose.material.icons.filled.Bookmark\nimport androidx.compose.material.icons.filled.BookmarkAdd\nimport androidx.compose.material.icons.filled.BookmarkRemove\nimport androidx.compose.material.icons.filled.FileDownload\nimport androidx.compose.material.icons.filled.History\nimport androidx.compose.material.icons.filled.PersonSearch\nimport androidx.compose.material.icons.filled.Policy\nimport androidx.compose.material.icons.filled.PrivateConnectivity\nimport androidx.compose.material.icons.filled.Share\nimport androidx.compose.material.icons.rounded.Refresh\nimport androidx.compose.material3.DropdownMenu\nimport androidx.compose.material3.DropdownMenuItem\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.material3.Switch\nimport androidx.compose.material3.SwitchDefaults\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.VerticalDivider\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserDrawResource\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserWebPage\nimport org.dweb_browser.dwebview.rememberHistoryCanGoBack\nimport org.dweb_browser.dwebview.rememberHistoryCanGoForward\nimport org.dweb_browser.helper.PrivacyUrl\nimport org.dweb_browser.helper.compose.ComposeWindowFocusOwnerEffect\nimport org.dweb_browser.helper.compose.ScalePopupContent\nimport squircleshape.CornerSmoothing\nimport squircleshape.SquircleShape\n\n@Composable\ninternal fun BrowserMenuPanel(scale: Float, modifier: Modifier = Modifier) {\n  val uiScope = rememberCoroutineScope()\n  val viewModel = LocalBrowserViewModel.current\n  val scope = LocalBrowserViewModel.current.browserNMM.getRuntimeScope()\n\n  val hide = { viewModel.showMore = false }\n  ComposeWindowFocusOwnerEffect(viewModel.showMore, hide)\n  DropdownMenu(\n    modifier = modifier,\n    expanded = viewModel.showMore,\n    onDismissRequest = hide,\n    shape = SquircleShape((16 * scale).dp, CornerSmoothing.Small),\n  ) {\n    val page = viewModel.focusedPage\n    /// 添加书签\n    if (page is BrowserWebPage) {\n      val added = page.isInBookmark\n      if (added) {\n        SettingListItem(title = BrowserI18nResource.browser_remove_bookmark(),\n          icon = Icons.Default.BookmarkRemove,\n          onClick = {\n            hide()\n            uiScope.launch { viewModel.removeBookmarkUI(page.url) }\n          })\n      } else {\n        SettingListItem(title = BrowserI18nResource.browser_add_bookmark(),\n          icon = Icons.Default.BookmarkAdd,\n          onClick = {\n            hide()\n            uiScope.launch { viewModel.addBookmarkUI(page) }\n          })\n      }\n    }\n    SettingListItem(\n      title = BrowserI18nResource.Bookmark.page_title(),\n      icon = Icons.Default.Bookmark,\n      onClick = {\n        hide()\n        uiScope.launch { viewModel.tryOpenUrlUI(\"about:bookmarks\") }\n      },\n      trailingIcon = Icons.AutoMirrored.Filled.ArrowForwardIos\n    )\n    // 分享\n    if (page is BrowserWebPage) {\n      HorizontalDivider()\n      SettingListItem(\n        title = BrowserI18nResource.browser_options_share(),\n        icon = Icons.Default.Share,\n        onClick = {\n          hide()\n          scope.launch { viewModel.shareWebSiteInfo(page) }\n        })\n      /// 添加到桌面\n      SettingListItem(title = BrowserI18nResource.browser_menu_add_to_desktop(), // stringResource(id = R.string.browser_options_privacy),\n        icon = Icons.AutoMirrored.Default.AddToHomeScreen, {\n          hide()\n          uiScope.launch { viewModel.addUrlToDesktopUI(page) }\n        })\n    }\n\n    HorizontalDivider()\n    // 无痕浏览\n    SettingListItem(\n      title = BrowserI18nResource.browser_options_noTrace(),\n      icon = Icons.Default.PrivateConnectivity,\n    ) {\n      Switch(checked = viewModel.isIncognitoOn,\n        onCheckedChange = { uiScope.launch { viewModel.updateIncognitoModeUI(it) } },\n        thumbContent = if (viewModel.isIncognitoOn) {\n          {\n            Icon(\n              imageVector = Icons.Filled.PrivateConnectivity,\n              contentDescription = null,\n              modifier = Modifier.size(SwitchDefaults.IconSize),\n            )\n          }\n        } else null)\n    }\n\n    // 隐私政策\n    SettingListItem(\n      title = BrowserI18nResource.browser_options_privacy(), // stringResource(id = R.string.browser_options_privacy),\n      icon = Icons.Default.Policy, onClick = {\n        hide()\n        uiScope.launch { viewModel.tryOpenUrlUI(PrivacyUrl) }\n      }, trailingIcon = Icons.AutoMirrored.Filled.ArrowForwardIos\n    )\n\n    // 扫码功能\n    SettingListItem(title = BrowserI18nResource.browser_menu_scanner(), // stringResource(id = R.string.browser_options_privacy),\n      leadingIcon = {\n        Icon(\n          BrowserDrawResource.Scanner.painter(),\n          contentDescription = \"Open Camera To Scan\",\n          tint = LocalContentColor.current,\n          modifier = Modifier.size(24.dp),\n        )\n      }, onClick = {\n        viewModel.showQRCodePanelUI()\n        hide()\n      })\n\n    HorizontalDivider()\n    // 搜索引擎\n    SettingListItem(\n      title = BrowserI18nResource.Engine.page_title(),\n      icon = Icons.Default.PersonSearch,\n      onClick = {\n        uiScope.launch { viewModel.tryOpenUrlUI(\"about:engines\") }\n        hide()\n      },\n      trailingIcon = Icons.AutoMirrored.Filled.ArrowForwardIos\n    )\n    // 下载管理界面\n    SettingListItem(\n      title = BrowserI18nResource.Download.page_title(),\n      icon = Icons.Default.FileDownload,\n      onClick = {\n        uiScope.launch { viewModel.tryOpenUrlUI(\"about:downloads\") }\n        hide()\n      },\n      trailingIcon = Icons.AutoMirrored.Filled.ArrowForwardIos\n    )\n    // 历史列表\n    SettingListItem(\n      title = BrowserI18nResource.History.page_title(),\n      icon = Icons.Default.History,\n      onClick = {\n        hide()\n        uiScope.launch { viewModel.tryOpenUrlUI(\"about:history\") }\n      },\n      trailingIcon = Icons.AutoMirrored.Filled.ArrowForwardIos\n    )\n\n    if (page is BrowserWebPage) {\n      HorizontalDivider()\n      ScalePopupContent {\n        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {\n          IconButton(\n            { page.webView.lifecycleScope.launch { page.webView.goBack() } },\n            enabled = page.webView.rememberHistoryCanGoBack()\n          ) {\n            Icon(Icons.AutoMirrored.Rounded.ArrowBackIos, \"go back\")\n          }\n          VerticalDivider()\n          IconButton(\n            { page.webView.lifecycleScope.launch { page.webView.historyGoForward() } },\n            enabled = page.webView.rememberHistoryCanGoForward()\n          ) {\n            Icon(Icons.AutoMirrored.Rounded.ArrowForwardIos, \"go forward\")\n          }\n          VerticalDivider()\n          IconButton(\n            { page.webView.lifecycleScope.launch { page.webView.reload() } },\n          ) {\n            Icon(Icons.Rounded.Refresh, \"reload web page\")\n          }\n        }\n      }\n    }\n  }\n}\n\n\n@Composable\nprivate fun SettingListItem(\n  title: String,\n  leadingIcon: @Composable () -> Unit,\n  onClick: () -> Unit = {},\n  trailingIcon: (@Composable (() -> Unit))? = null,\n) {\n  ScalePopupContent {\n    DropdownMenuItem(\n      text = { Text(title) },\n      onClick = onClick,\n      leadingIcon = leadingIcon,\n      trailingIcon = trailingIcon\n    )\n  }\n}\n\n@Composable\nprivate fun SettingListItem(\n  title: String,\n  icon: ImageVector,\n  onClick: () -> Unit = {},\n  trailingContent: (@Composable (() -> Unit))? = null,\n) {\n  SettingListItem(\n    title = title,\n    onClick = onClick,\n    leadingIcon = { Icon(icon, contentDescription = title) },\n    trailingIcon = trailingContent,\n  )\n}\n\n@Composable\nprivate fun SettingListItem(\n  title: String,\n  icon: ImageVector,\n  onClick: () -> Unit = {},\n  trailingIcon: ImageVector,\n) {\n  SettingListItem(title, icon, onClick) {\n    Icon(trailingIcon, contentDescription = title)\n  }\n}"},{"language":"kotlin","path":"web/ui/BrowserPagerTab.kt","content":"package org.dweb_browser.browser.web.ui\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.aspectRatio\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.rounded.ArrowBackIos\nimport androidx.compose.material.icons.automirrored.rounded.ArrowForwardIos\nimport androidx.compose.material.icons.rounded.Close\nimport androidx.compose.material.icons.rounded.Edit\nimport androidx.compose.material.icons.rounded.Refresh\nimport androidx.compose.material3.DropdownMenu\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.LinearProgressIndicator\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.input.pointer.PointerIcon\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.zIndex\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserDrawResource\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserHomePage\nimport org.dweb_browser.browser.web.model.page.BrowserPage\nimport org.dweb_browser.browser.web.model.page.BrowserWebPage\nimport org.dweb_browser.dwebview.rememberHistoryCanGoBack\nimport org.dweb_browser.dwebview.rememberHistoryCanGoForward\nimport org.dweb_browser.dwebview.rememberLoadingProgress\nimport org.dweb_browser.helper.compose.ComposeWindowFocusOwnerEffect\nimport org.dweb_browser.helper.compose.ScalePopupContent\nimport org.dweb_browser.helper.compose.ScalePopupPlaceholder\nimport org.dweb_browser.helper.compose.hoverCursor\nimport org.dweb_browser.helper.compose.pointerActions\nimport org.dweb_browser.helper.isDwebDeepLink\nimport org.dweb_browser.helper.toWebUrl\nimport org.dweb_browser.sys.window.render.AppIconContainer\n\nenum class SearchBoxTheme {\n  Focused, Unfocused,\n  ;\n}\n\n/// 用于搜索框的外部风格化，提供了阴影风格和边框风格\ninternal fun Modifier.pagerTabStyle(boxTheme: SearchBoxTheme) = composed {\n  when (boxTheme) {\n    SearchBoxTheme.Focused -> shadow(\n      elevation = dimenShadowElevation,\n      shape = browserShape,\n      ambientColor = LocalContentColor.current,\n      spotColor = LocalContentColor.current,\n    ).background(MaterialTheme.colorScheme.background)\n\n    SearchBoxTheme.Unfocused -> clip(browserShape).background(MaterialTheme.colorScheme.background)\n      .alpha(0.5f)\n  }\n}\n\n@Composable\ninternal fun PageTabWithToolTip(page: BrowserPage, modifier: Modifier) {\n  val viewModel = LocalBrowserViewModel.current\n  val uiScope = rememberCoroutineScope()\n  when (page) {\n    is BrowserWebPage -> {\n      var showActions by remember { mutableStateOf(false) }\n      Box {\n        PagerTab(\n          page, modifier = modifier.pointerActions(\n            onMenu = {\n              showActions = true\n            },\n            onTap = {\n              if (page == viewModel.focusedPage) {\n                viewModel.searchPanel.showSearchPanel(page)\n              } else {\n                uiScope.launch {\n                  viewModel.focusPageUI(page)\n                }\n              }\n            },\n          )\n        )\n        ScalePopupPlaceholder(page.scale) {\n          BrowserWebPageTabActions(\n            onDismissRequest = { showActions = false },\n            expanded = showActions,\n            page = page,\n          )\n        }\n      }\n    }\n\n    else -> PagerTab(page, modifier = modifier.pointerActions(onMenu = {\n      viewModel.searchPanel.showSearchPanel(page)\n    }, onTap = {\n      uiScope.launch {\n        // 如果当前点击的是当前界面，那么就显示搜索框；如果不是，那么进行focus操作\n        if (page == viewModel.focusedPage) {\n          viewModel.searchPanel.showSearchPanel(page)\n        } else {\n          viewModel.focusPageUI(page)\n        }\n      }\n    }))\n  }\n}\n\n@Composable\nprivate fun BrowserWebPageTabActions(\n  onDismissRequest: () -> Unit,\n  expanded: Boolean,\n  page: BrowserWebPage,\n  modifier: Modifier = Modifier,\n) {\n  fun scopeLaunch(action: suspend () -> Unit) {\n    page.webView.lifecycleScope.launch {\n      launch {\n        delay(150)\n        onDismissRequest()\n      }\n      action()\n    }\n  }\n  ComposeWindowFocusOwnerEffect(expanded, onDismissRequest)\n  DropdownMenu(\n    modifier = modifier,\n    expanded = expanded,\n    onDismissRequest = onDismissRequest,\n    containerColor = MaterialTheme.colorScheme.background,\n    shape = browserShape,\n  ) {\n    ScalePopupContent {\n      Row {\n        IconButton(\n          { scopeLaunch { page.browserController.viewModel.searchPanel.showSearchPanel(page) } },\n        ) {\n          Icon(Icons.Rounded.Edit, \"open search panel or edit url\")\n        }\n        IconButton(\n          { scopeLaunch { page.webView.goBack() } },\n          enabled = page.webView.rememberHistoryCanGoBack()\n        ) {\n          Icon(Icons.AutoMirrored.Rounded.ArrowBackIos, \"go back\")\n        }\n        IconButton(\n          { scopeLaunch { page.webView.historyGoForward() } },\n          enabled = page.webView.rememberHistoryCanGoForward()\n        ) {\n          Icon(Icons.AutoMirrored.Rounded.ArrowForwardIos, \"go forward\")\n        }\n        IconButton(\n          { scopeLaunch { page.webView.reload() } },\n        ) {\n          Icon(Icons.Rounded.Refresh, \"reload web page\")\n        }\n      }\n    }\n  }\n}\n\n@Composable\nprivate fun PagerTab(page: BrowserPage, modifier: Modifier = Modifier) {\n  val viewModel = LocalBrowserViewModel.current\n  val scope = viewModel.lifecycleScope\n  // 确认是否是聚焦的页面，如果Page模式是fill直接聚焦，另外就是如果page是当前页，需要突出显示\n  val isFocused = page == viewModel.focusedPage\n\n  Box(\n    modifier = modifier.fillMaxWidth().pagerTabStyle(\n      when {\n        isFocused -> SearchBoxTheme.Focused\n        viewModel.isTabFixedSize -> SearchBoxTheme.Unfocused\n        else -> SearchBoxTheme.Focused\n      }\n    ).hoverCursor(if (isFocused) PointerIcon.Text else PointerIcon.Hand)\n  ) {\n    if (page is BrowserWebPage) {\n      ShowLinearProgressIndicator(page)\n    }\n    val humanPageUrl = page.url.let { pageUrl -> remember(pageUrl) { pageUrlTransformer(pageUrl) } }\n    val pageTitle = page.title\n    val endIcon: (@Composable (Modifier) -> Unit)? =\n      if (viewModel.pageSize == 1 && page is BrowserHomePage) {\n        null\n      } else {\n        { modifier ->\n          IconButton(\n            onClick = { scope.launch { viewModel.closePageUI(page) } }, modifier = modifier\n          ) {\n            Icon(Icons.Rounded.Close, contentDescription = \"Close Page\")\n          }\n        }\n      }\n//      is BrowserWebPage -> {\n//        { modifier ->\n//          IconButton(\n//            onClick = { scope.launch { page.webView.reload() } }, modifier = modifier\n//          ) {\n//            Icon(Icons.Rounded.Refresh, contentDescription = \"Reload Web Page\")\n//          }\n//        }\n//      }\n//\n//      else -> if ( viewModel.isTabFixedSize && viewModel.pageSize > 1)  else null\n//    }\n    Row(\n      modifier = Modifier.fillMaxSize(),\n      verticalAlignment = Alignment.CenterVertically,\n      horizontalArrangement = if (endIcon == null) Arrangement.Center else Arrangement.SpaceBetween,\n    ) {\n      val emptyTheme = page is BrowserHomePage\n      /// 左边的图标，正方形大小，图标剧中\n      Box(Modifier.size(dimenSearchHeight), contentAlignment = Alignment.Center) {\n        val pageIcon = page.icon\n        val pageUrl = page.url\n        val painter: Painter\n        val colorFilter: ColorFilter?\n        when (remember(pageUrl) { pageUrl.isDwebDeepLink() }) {\n          true -> {\n            painter = BrowserDrawResource.Logo.painter()\n            colorFilter = BrowserDrawResource.Logo.getContentColorFilter()\n          }\n\n          else -> when (pageIcon) {\n            null -> {\n              painter = BrowserDrawResource.Web.painter()\n              colorFilter = BrowserDrawResource.Web.getContentColorFilter()\n            }\n\n            else -> {\n              painter = pageIcon\n              colorFilter = page.iconColorFilter\n            }\n          }\n        }\n        Box(\n          Modifier.aspectRatio(1f).clip(AppIconContainer.defaultShape),\n          contentAlignment = Alignment.Center\n        ) {\n          Image(\n            painter = painter,\n            colorFilter = colorFilter,\n            contentDescription = pageTitle,\n            modifier = Modifier.size(24.dp),\n          )\n        }\n      }\n      Text(\n        text = pageTitle.ifEmpty { humanPageUrl },\n        modifier = if (endIcon == null) Modifier.padding(end = 32.dp) else Modifier.weight(1f),\n        textAlign = TextAlign.Center,\n        maxLines = 1,\n        overflow = TextOverflow.Ellipsis,\n        style = MaterialTheme.typography.titleSmall\n      )\n      endIcon?.also {\n        endIcon(Modifier.hoverCursor())\n      }\n    }\n\n    /// 如果显示的标题不为空，那么就显示url到底部小字里\n    if (pageTitle.isNotEmpty()) {\n      Text(\n        humanPageUrl,\n        Modifier.fillMaxWidth().align(Alignment.BottomCenter).alpha(0.5f),\n        textAlign = TextAlign.Center,\n        fontSize = 5.sp,\n        lineHeight = 8.sp,\n        maxLines = 1,\n        overflow = TextOverflow.Ellipsis,\n        style = MaterialTheme.typography.labelSmall,\n      )\n    }\n  }\n}\n\n/**\n * 用于显示 WebView 加载进度\n */\n@Composable\nprivate fun BoxScope.ShowLinearProgressIndicator(page: BrowserWebPage) {\n  val loadingProgress = page.webView.rememberLoadingProgress()\n  AnimatedVisibility(\n    loadingProgress > 0 && loadingProgress < 1,\n    enter = fadeIn(),\n    exit = fadeOut(),\n    modifier = Modifier.zIndex(2f)\n  ) {\n    LinearProgressIndicator(\n      progress = { loadingProgress },\n      modifier = Modifier.fillMaxWidth().height(2.dp).align(Alignment.BottomCenter),\n      color = MaterialTheme.colorScheme.primary,\n    )\n  }\n}\n\n/**\n * 将合法的url，解析成需要显示的简要内容\n */\ninternal fun pageUrlTransformer(pageUrl: String, needHost: Boolean = true): String {\n  if (\n  // deeplink\n    pageUrl.startsWith(\"dweb:\")\n    // 内部页面\n    || pageUrl.startsWith(\"about:\") || pageUrl.startsWith(\"chrome:\")\n    // android 特定的链接，理论上不应该给予支持\n    || pageUrl.startsWith(\"file:///android_asset/\")\n  ) {\n    return pageUrl\n  }\n  // 尝试当成网址来解析\n  val url = pageUrl.toWebUrl() ?: return pageUrl\n  return if (needHost && url.host.isNotEmpty()) {\n    url.host.domainSimplify()\n  } else pageUrl\n}\n\n/**\n * 尝试剔除 www.\n */\nprivate fun String.domainSimplify() = if (startsWith(\"www.\") && split('.').size == 3) {\n  substring(4)\n} else this"},{"language":"kotlin","path":"web/ui/BrowserPreviewPanel.kt","content":"package org.dweb_browser.browser.web.ui\n\nimport androidx.compose.animation.core.Animatable\nimport androidx.compose.animation.core.EaseInQuad\nimport androidx.compose.animation.core.EaseOutQuad\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.spring\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\nimport androidx.compose.foundation.layout.FlowRow\nimport androidx.compose.foundation.layout.FlowRowOverflow\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.aspectRatio\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.requiredHeight\nimport androidx.compose.foundation.layout.requiredSize\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.wrapContentHeight\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material.icons.rounded.Close\nimport androidx.compose.material3.FilledTonalIconButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Alignment.Companion.CenterVertically\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.geometry.Rect\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.TransformOrigin\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.layout.onGloballyPositioned\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.lerp\nimport androidx.compose.ui.util.fastRoundToInt\nimport androidx.compose.ui.util.lerp\nimport androidx.compose.ui.zIndex\nimport kotlinx.coroutines.CompletableDeferred\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.model.BrowserViewModel\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserHomePage\nimport org.dweb_browser.browser.web.model.page.BrowserPage\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.helper.compose.div\nimport org.dweb_browser.helper.compose.hoverCursor\nimport org.dweb_browser.helper.getCompletedOrNull\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.platform.isDesktop\nimport org.dweb_browser.sys.window.core.LocalWindowController\nimport squircleshape.CornerSmoothing\nimport squircleshape.SquircleShape\n\nenum class PreviewPanelVisibleState(val isVisible: Boolean) {\n  DisplayGrid(true), Close(false), FastClose(false)/*不做动画，直接隐藏*/;\n}\n\nclass BrowserPreviewPanel(val viewModel: BrowserViewModel) {\n  val aniProgress = Animatable(0f)\n  private val aniFastInSpec = spring<Float>(Spring.DampingRatioLowBouncy, Spring.StiffnessMedium)\n  private val aniFastOutSpec = spring<Float>(Spring.DampingRatioNoBouncy, Spring.StiffnessMedium)\n  private val aniInSpec1 = tween<Float>(3000, easing = EaseInQuad)\n  private val aniOutSpec1 = tween<Float>(3000, easing = EaseOutQuad)\n  private val aniInSpec = spring<Float>(Spring.DampingRatioLowBouncy, Spring.StiffnessLow)\n  private val aniOutSpec = spring<Float>(Spring.DampingRatioNoBouncy, Spring.StiffnessLow)\n\n  var previewPanelVisible by mutableStateOf(PreviewPanelVisibleState.Close)\n  var previewReady by mutableStateOf(false)\n\n  /**\n   * 是否显示 Preview\n   */\n  val showPreview get() = previewPanelVisible == PreviewPanelVisibleState.DisplayGrid\n\n  /**\n   * Preview 是否不显示，同时 也不在 收起显示的动画中\n   */\n  val isPreviewInvisible get() = !showPreview && aniProgress.value == 0f\n  val isPreviewVisible get() = !isPreviewInvisible\n  fun toggleShowPreviewUI(state: PreviewPanelVisibleState) {\n    previewPanelVisible = state\n  }\n\n  var withoutAnimationOnFocus by mutableStateOf(false)\n\n  /**\n   * 隐藏BrowserPreview，并且将PageState滚动时不适用动画效果\n   */\n  fun hideBrowserPreviewWithoutAnimation() {\n    withoutAnimationOnFocus = true\n    toggleShowPreviewUI(PreviewPanelVisibleState.Close)\n  }\n\n  /**\n   * 显示多视图窗口\n   */\n  @OptIn(ExperimentalLayoutApi::class)\n  @Composable\n  fun Render(modifier: Modifier = Modifier): Boolean {\n    val viewModel = LocalBrowserViewModel.current\n    // 直到动画完成\n    if (isPreviewInvisible) {\n      return false\n    }\n    val uiScope = rememberCoroutineScope()\n    LocalWindowController.current.navigation.GoBackHandler {\n      toggleShowPreviewUI(PreviewPanelVisibleState.Close)\n    }\n\n    val focusPagePreviewBoundsDeferred = remember {\n      CompletableDeferred<Rect>().also {\n        previewReady = false\n        it.invokeOnCompletion { previewReady = true }\n      }\n    }\n\n    /// 绑定 aniProgress\n    LaunchedEffect(previewPanelVisible) {\n      when (previewPanelVisible) {\n        PreviewPanelVisibleState.DisplayGrid -> {\n          focusPagePreviewBoundsDeferred.await()\n          aniProgress.animateTo(1f, aniInSpec)\n        }\n\n        PreviewPanelVisibleState.Close -> {\n          focusPagePreviewBoundsDeferred.cancel()\n          aniProgress.animateTo(0f, aniOutSpec)\n        }\n\n        PreviewPanelVisibleState.FastClose -> {\n          focusPagePreviewBoundsDeferred.cancel()\n          aniProgress.snapTo(0f)\n        }\n      }\n    }\n    val p = aniProgress.value\n    /// 预览图 + 底部工具栏\n    Column(modifier) {\n      val focusedPageIndex = viewModel.focusedPageIndex\n      /// 预览图\n      BoxWithConstraints(\n        modifier = Modifier.weight(1f)\n          .background(if (previewReady) MaterialTheme.colorScheme.surfaceContainer else Color.Transparent)\n      ) {\n        val density = LocalDensity.current.density\n        val pageSize = viewModel.pageSize\n\n        val scrollState = rememberScrollState()\n        focusPagePreviewBoundsDeferred.getCompletedOrNull()?.also { rect ->\n          LaunchedEffect(rect) {\n            scrollState.scrollTo(((rect.top - 16) * density).fastRoundToInt())\n          }\n        }\n\n        fun calcCellSize(total: Float, count: Int, padding: Float = 16f, spacing: Float = 16f) =\n          (total - padding - padding - spacing * (count - 1)) / count\n\n        val containerWidth = maxWidth\n        val containerHeight = maxHeight\n        val itemModifier = when {\n          maxWidth.value < 240 -> Modifier.fillMaxWidth()\n          maxWidth.value < 500 -> Modifier.width(calcCellSize(containerWidth.value, 2).dp)\n          maxWidth.value < 800 -> Modifier.width(calcCellSize(containerWidth.value, 3).dp)\n          maxWidth.value < 1080 -> Modifier.width(calcCellSize(containerWidth.value, 4).dp)\n          else -> Modifier.width(250.dp)\n        }\n\n        FlowRow(\n          Modifier.fillMaxSize().verticalScroll(scrollState)\n            .padding(top = 16.dp, start = 16.dp, end = 16.dp),\n          horizontalArrangement = when (IPureViewController.isDesktop) {\n            true -> Arrangement.spacedBy(space = 16.dp, alignment = Alignment.Start)\n            else -> Arrangement.SpaceBetween\n          },\n//          horizontalArrangement = Arrangement.spacedBy(16.dp, Alignment.Start),\n//          verticalArrangement = Arrangement.spacedBy(16.dp, Alignment.Top),\n          overflow = FlowRowOverflow.Visible,\n        ) {\n          for (pageIndex in 0..<pageSize) {\n            val page = viewModel.getPage(pageIndex)\n            val isFocusedPage = focusedPageIndex == pageIndex\n            val cellClosable = pageSize > 1 || page !is BrowserHomePage\n\n            key(page.hashCode()) {\n              PagePreviewCell(\n                pageIndex = pageIndex,\n                page = page,\n                modifier = itemModifier.wrapContentHeight().padding(bottom = 16.dp)\n                  .zIndex(if (isFocusedPage) 3f else 1f),\n                closable = cellClosable,\n                focus = isFocusedPage,\n                containerWidth = containerWidth,\n                containerHeight = containerHeight,\n                focusPagePreviewBoundsDeferred = focusPagePreviewBoundsDeferred,\n              )\n            }\n          }\n        }\n      }\n\n      /// 底部工具栏\n      PreviewBottomBar(\n        uiScope = uiScope,\n        viewModel = viewModel,\n        focusedPageIndex = focusedPageIndex,\n        modifier = Modifier.alpha(alpha = p).background(MaterialTheme.colorScheme.surface)\n      )\n    }\n    return true\n  }\n\n  @Composable\n  private fun PagePreviewCell(\n    pageIndex: Int,\n    page: BrowserPage,\n    modifier: Modifier,\n    closable: Boolean,\n    focus: Boolean,\n    containerWidth: Dp,\n    containerHeight: Dp,\n    focusPagePreviewBoundsDeferred: CompletableDeferred<Rect>,\n  ) {\n    val viewModel = LocalBrowserViewModel.current\n    val scope = viewModel.browserNMM.getRuntimeScope()\n    val uiScope = rememberCoroutineScope()\n    val p = aniProgress.value\n\n    /// 预览图和标题 + 关闭按钮\n    Box(modifier) {\n      /// 预览图和标题\n      Column(Modifier.fillMaxWidth(), horizontalAlignment = Alignment.CenterHorizontally) {\n        /// 预览图\n        val defaultAspectRatio = containerWidth.value / containerHeight.value\n        var imageModifier = Modifier.fillMaxWidth()\n          // 为了过渡动画更加平滑，这里禁用涟漪效果\n          .clickableWithNoEffect {\n            uiScope.launch {\n              viewModel.focusPageUI(page)\n              hideBrowserPreviewWithoutAnimation()\n            }\n          }.hoverCursor()\n        if (focus) {\n          if (p != 1f) {\n            var rect by remember { mutableStateOf(Rect.Zero) }\n            val density = LocalDensity.current.density\n            imageModifier = imageModifier.onGloballyPositioned { coordinates ->\n              /**\n               * 这里与compose层级有很严格的依赖关系，如果不知道要使用几层parentLayoutCoordinates，可以开启下面代码进行打印调试\n               * ```kotlin\n               * var i = 1\n               * var parent = coordinates.parentLayoutCoordinates\n               * while (parent != null) {\n               *   val position = parent.localPositionOf(coordinates)\n               *   println(\"QAQ $i.position=$position\")\n               *   parent = parent.parentLayoutCoordinates\n               *   i += 1\n               * }\n               * ```\n               * 虽然理论上其它的更加标准的写法方案，但目前来说这种写法是最简单的有效的。除非有一种基于标记的方案：\n               * ```kotlin\n               * Modifier.markLayoutCoordinates(\"some-parent\")\n               *\n               * coordinates.parentLayoutCoordinates(\"some-parent\")?.localPositionOf(coordinates)\n               * ```\n               */\n              coordinates.parentLayoutCoordinates?.parentLayoutCoordinates?.parentLayoutCoordinates?.parentLayoutCoordinates?.localPositionOf(\n                coordinates\n              )?.also { position ->\n                focusPagePreviewBoundsDeferred.complete(Rect(\n                  position / density, coordinates.size.div(density)\n                ).also {\n                  rect = it\n                })\n              }\n            }\n            when (focusPagePreviewBoundsDeferred.getCompletedOrNull()) {\n              null -> {\n                imageModifier = imageModifier.alpha(0f)\n              }\n\n              else -> {\n                imageModifier = imageModifier.graphicsLayer {\n                  val startX = -rect.left * density\n                  val startY = -rect.top * density\n                  val endX = 0\n                  val endY = 0\n                  val startWidth = containerWidth.value\n                  val endWidth = rect.width\n                  val startHeight = containerHeight.value\n                  val endHeight = rect.height\n                  translationX = startX + (endX - startX) * p\n                  translationY = startY + (endY - startY) * p\n                  scaleX = (startWidth + (endWidth - startWidth) * p) / endWidth\n                  scaleY = (startHeight + (endHeight - startHeight) * p) / endHeight\n                  transformOrigin = TransformOrigin(0f, 0f)\n                }.zIndex(2f)\n              }\n            }\n          }\n        } else {\n          imageModifier = imageModifier.alpha(alpha = p)\n        }\n\n        BoxWithConstraints(\n          imageModifier,\n          contentAlignment = Alignment.TopCenter,\n        ) {\n          /// 预览图的动态阴影和圆角\n          val innerP = if (focus) p else 1f\n          val shadowColor = LocalContentColor.current.copy(alpha = innerP)\n          val shape = SquircleShape(\n            lerp(0.dp, 20.dp, innerP), lerp(CornerSmoothing.None, CornerSmoothing.Small, innerP)\n          )\n\n          val innerModifier = Modifier.fillMaxSize().aspectRatio(defaultAspectRatio).shadow(\n            elevation = if (focus) lerp(0.dp, 4.dp, innerP) else 1.dp,\n            shape = shape,\n            ambientColor = shadowColor,\n            spotColor = shadowColor,\n          ).clip(shape).background(MaterialTheme.colorScheme.surface)\n\n          page.PreviewRender(containerWidth = maxWidth, modifier = innerModifier)\n        }\n\n        /// 图标和标题\n        Row(\n          modifier = Modifier.wrapContentHeight().fillMaxWidth().padding(top = 4.dp)\n            .align(Alignment.CenterHorizontally).alpha(alpha = p),\n          horizontalArrangement = Arrangement.Center,\n          verticalAlignment = CenterVertically\n        ) {\n          Box(\n            Modifier.padding(end = 4.dp).requiredSize(16.dp).clip(CircleShape)\n              .background(MaterialTheme.colorScheme.surface),\n            contentAlignment = Alignment.Center,\n          ) {\n            Text(\n              \"${pageIndex + 1}\",\n              style = MaterialTheme.typography.bodySmall,\n              modifier = Modifier.scale(0.62f)\n            )\n          }\n\n          page.icon?.let { iconPainter ->\n            Image(\n              painter = iconPainter,\n              contentDescription = null,\n              modifier = Modifier.size(12.dp),\n              colorFilter = page.iconColorFilter\n            )\n            Spacer(modifier = Modifier.width(2.dp))\n          }\n          Text(\n            text = page.title,\n            maxLines = 1,\n            overflow = TextOverflow.Ellipsis,\n            style = MaterialTheme.typography.titleSmall\n          )\n        }\n      }\n      /// 关闭按钮\n      if (closable) {\n        val iconAni = remember { Animatable(0f) }\n        LaunchedEffect(showPreview, p == 1f) {\n          when {\n            (showPreview && p == 1f) -> iconAni.animateTo(1f, aniFastInSpec)\n            else -> iconAni.animateTo(0f, aniFastOutSpec)\n          }\n        }\n        FilledTonalIconButton(\n          onClick = {\n            scope.launch { viewModel.closePageUI(page) }\n          },\n          modifier = Modifier.align(Alignment.TopEnd).alpha(iconAni.value).scale(iconAni.value)\n            .hoverCursor().zIndex(3f),\n        ) {\n          Icon(Icons.Rounded.Close, \"Close Page\")\n        }\n      }\n    }\n  }\n\n  @Composable\n  private fun PreviewBottomBar(\n    uiScope: CoroutineScope,\n    viewModel: BrowserViewModel,\n    focusedPageIndex: Int,\n    modifier: Modifier,\n  ) {\n    Row(\n      modifier = modifier.fillMaxWidth().requiredHeight(dimenBottomHeight)\n        // 因为本质上和 tabsbar 层叠在一起渲染，所以这里拦截掉所有事件\n        .pointerInput(Unit) { awaitPointerEventScope { } }, verticalAlignment = CenterVertically\n    ) {\n      // 添加新页面按钮\n      IconButton(onClick = {\n        uiScope.launch {\n          toggleShowPreviewUI(PreviewPanelVisibleState.FastClose)\n          viewModel.addNewPageUI {\n            addIndex = focusedPageIndex + 1\n            focusPage = true\n          }\n        }\n      }) {\n        Icon(\n          imageVector = Icons.Default.Add, // ImageVector.vectorResource(id = R.drawable.ic_main_add),\n          contentDescription = \"Add New Page\",\n          tint = MaterialTheme.colorScheme.primary,\n        )\n      }\n      val content = BrowserI18nResource.browser_multi_count()\n      Text(\n        text = \"${viewModel.pageSize} $content\",\n        modifier = Modifier.weight(1f),\n        textAlign = TextAlign.Center\n      )\n      // 关闭 PreviewPanel 按钮\n      TextButton(onClick = {\n        toggleShowPreviewUI(PreviewPanelVisibleState.Close)\n      }) {\n        Text(\n          text = BrowserI18nResource.browser_multi_done(),\n          color = MaterialTheme.colorScheme.primary,\n          fontWeight = FontWeight.Bold\n        )\n      }\n    }\n  }\n}\n\n\nexpect fun calculateGridsCell(pageSize: Int, maxWidth: Dp, maxHeight: Dp): Triple<Int, Dp, Dp>\n"},{"language":"kotlin","path":"web/ui/BrowserSearchPanel.kt","content":"package org.dweb_browser.browser.web.ui\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.animation.slideInVertically\nimport androidx.compose.animation.slideOutVertically\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.interaction.MutableInteractionSource\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.heightIn\nimport androidx.compose.foundation.text.BasicTextField\nimport androidx.compose.foundation.text.KeyboardActions\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.foundation.text.input.clearText\nimport androidx.compose.foundation.text.input.rememberTextFieldState\nimport androidx.compose.foundation.text.input.setTextAndPlaceCursorAtEnd\nimport androidx.compose.foundation.text.input.setTextAndSelectAll\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Clear\nimport androidx.compose.material.icons.rounded.KeyboardArrowDown\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.LocalTextStyle\nimport androidx.compose.material3.SearchBarDefaults\nimport androidx.compose.material3.TextFieldDefaults\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.focus.focusRequester\nimport androidx.compose.ui.graphics.SolidColor\nimport androidx.compose.ui.platform.LocalFocusManager\nimport androidx.compose.ui.text.TextRange\nimport androidx.compose.ui.text.input.ImeAction\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.text.input.VisualTransformation\nimport kotlinx.coroutines.delay\nimport org.dweb_browser.browser.web.model.BrowserViewModel\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserPage\nimport org.dweb_browser.browser.web.ui.search.SearchSuggestion\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.platform.isDesktop\nimport org.dweb_browser.sys.window.core.LocalWindowController\nimport org.dweb_browser.sys.window.helper.LocalWindowsImeVisible\n\nclass BrowserSearchPanel(val viewModel: BrowserViewModel) {\n  private var showSearchPage by mutableStateOf<BrowserPage?>(null) // 用于显示搜索框的\n  val showPanel get() = showSearchPage != null\n\n  fun hideSearchPanel() {\n    showSearchPage = null\n  }\n\n  fun showSearchPanel(page: BrowserPage) {\n    showSearchPage = page\n  }\n\n  @OptIn(ExperimentalMaterial3Api::class)\n  @Composable\n  fun Render(modifier: Modifier = Modifier): Boolean {\n    val viewModel = LocalBrowserViewModel.current\n    AnimatedVisibility(\n      visible = showSearchPage != null,\n      modifier = modifier,\n      enter = remember { fadeIn(enterAnimationSpec()) + slideInVertically(enterAnimationSpec()) { it } },\n      exit = remember { fadeOut(exitAnimationSpec()) + slideOutVertically(exitAnimationSpec()) { it } },\n    ) {\n      val searchPage = showSearchPage ?: return@AnimatedVisibility\n      val focusManager = LocalFocusManager.current\n      val focusRequester = remember { FocusRequester() }\n      val hide = {\n        focusManager.clearFocus()\n        viewModel.hideAllPanel()\n      }\n      /// 返回关闭搜索\n      val win = LocalWindowController.current\n      win.navigation.GoBackHandler {\n        hide()\n      }\n      var searchTextField by remember(viewModel.searchKeyWord, searchPage.url) {\n        val text = viewModel.searchKeyWord ?: searchPage.url\n        mutableStateOf(\n          TextFieldValue(text = text, selection = TextRange(0, text.length))\n        )\n      }\n      val searchTextState = rememberTextFieldState(searchTextField.text)\n      remember(searchTextField) {\n        searchTextState.setTextAndSelectAll(searchTextField.text)\n      }\n      val searchText = searchTextState.text.toString()\n      val searchBarColors = SearchBarDefaults.colors()\n      val searchFieldColors = SearchBarDefaults.inputFieldColors()\n      var suggestionActions by remember { mutableStateOf<List<() -> Unit>>(emptyList()) }\n      Column(\n        modifier = Modifier.fillMaxSize().background(searchBarColors.containerColor),\n      ) {\n        /// 搜索框\n        LaunchedEffect(focusRequester) {\n          delay(100)\n          // MacOS桌面端会出现窗口失焦，导致无法直接输入\n          if (IPureViewController.isDesktop) {\n            win.focus()\n          }\n          focusRequester.requestFocus()\n        }\n        val showIme by LocalWindowsImeVisible.current\n        /// 键盘隐藏后，需要清除焦点，避免再次点击不显示键盘的问题\n        /// 键盘显示出来的时候，默认要进行全选操作\n        LaunchedEffect(showIme) {\n          if (!showIme) {\n            focusManager.clearFocus()\n          } else {\n            if (searchTextState.selection.start != 0 || searchTextState.selection.end != searchTextState.text.length) {\n              searchTextState.setTextAndSelectAll(searchText)\n            }\n          }\n        }\n        val interactionSource = remember { MutableInteractionSource() }\n        /**\n         * TODO 完成自动完成的功能\n         * 1. 搜索历史\n         * 2. 浏览器访问记录，尝试匹配 title 与 url，并提供 icon、title、url等基本信息进行显示\n         */\n        BasicTextField(\n          value = searchTextField,\n          onValueChange = { searchTextField = it },\n          modifier = Modifier.fillMaxWidth(\n          ).heightIn(min = SearchBarDefaults.InputFieldHeight).focusRequester(focusRequester),\n          singleLine = true,\n          maxLines = 1,\n          textStyle = LocalTextStyle.current.copy(color = searchFieldColors.focusedTextColor),\n          cursorBrush = SolidColor(searchFieldColors.cursorColor),\n          interactionSource = interactionSource,\n          keyboardOptions = KeyboardOptions(\n            keyboardType = KeyboardType.Uri,\n            imeAction = ImeAction.Search,\n          ),\n          keyboardActions = KeyboardActions(\n            onSearch = {\n              focusManager.clearFocus()\n              suggestionActions.firstOrNull()?.invoke()\n//              hide()\n//              viewModel.doIOSearchUrl(searchTextField.text.trim().trim('\\u200B').trim())\n            },\n          ),\n          decorationBox = { innerTextField ->\n            TextFieldDefaults.DecorationBox(\n              value = searchText,\n              innerTextField = innerTextField,\n              enabled = true,\n              singleLine = true,\n              visualTransformation = VisualTransformation.None,\n              interactionSource = interactionSource,\n              leadingIcon = {\n                // leadingIcon\n                IconButton(onClick = hide) {\n                  Icon(Icons.Rounded.KeyboardArrowDown, \"close search panel\")\n                }\n              },\n              trailingIcon = {\n                // trailingIcon 清除文本的按钮\n                IconButton(onClick = {\n                  // 清空文本之后再次点击需要还原文本内容并对输入框失焦\n                  if (searchText.isEmpty()) {\n                    searchTextState.setTextAndPlaceCursorAtEnd(searchPage.url)\n                    hide()\n                  } else {\n                    searchTextState.clearText()\n                  }\n                }) {\n                  Icon(Icons.Default.Clear, contentDescription = \"Clear Input Text\")\n                }\n              },\n            )\n          })\n\n        HorizontalDivider(color = searchBarColors.dividerColor)\n        /// 面板内容\n        SearchSuggestion(\n          searchTextState = searchTextState,\n          modifier = Modifier.fillMaxSize(),\n          onClose = hide,\n          onSuggestionActions = { suggestionActions = it }\n        )\n      }\n    }\n    return showSearchPage != null\n  }\n}\n\n"},{"language":"kotlin","path":"web/ui/BrowserViewModelRender.kt","content":"package org.dweb_browser.browser.web.ui\n\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.requiredHeight\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.zIndex\nimport org.dweb_browser.browser.web.model.BrowserViewModel\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.helper.compose.IosLeaveEasing\nimport org.dweb_browser.helper.compose.LocalCompositionChain\nimport org.dweb_browser.sys.window.core.WindowContentRenderScope\nimport org.dweb_browser.sys.window.core.WindowSurface\nimport squircleshape.CornerSmoothing\nimport squircleshape.SquircleShape\n\ninternal val dimenTextFieldFontSize = 16.sp\ninternal val dimenSearchInnerHorizontal = 10.dp\ninternal val dimenSearchInnerVertical = 8.dp\ninternal val dimenSearchRoundedCornerShape = 8.dp\ninternal val dimenShadowElevation = 2.dp\ninternal val dimenHorizontalPagerHorizontal = 20.dp\ninternal val dimenPageHorizontal = 20.dp\ninternal val dimenBottomHeight = 60.dp\ninternal val dimenSearchHeight = 40.dp\ninternal val dimenNavigationHeight = 40.dp\ninternal val browserShape = SquircleShape(30, CornerSmoothing.Small)\ninternal val browserBigShape = SquircleShape(16.dp, CornerSmoothing.Small)\n\ninternal fun <T> enterAnimationSpec() = tween<T>(350, easing = IosLeaveEasing)\ninternal fun <T> exitAnimationSpec() = tween<T>(500, easing = IosLeaveEasing)\n\n@Composable\nfun BrowserRender(\n  viewModel: BrowserViewModel, modifier: Modifier, windowRenderScope: WindowContentRenderScope,\n) {\n  LocalCompositionChain.current.Provider(LocalBrowserViewModel provides viewModel) {\n    viewModel.ViewModelEffect(windowRenderScope)\n    windowRenderScope.WindowSurface {\n      /**\n       * 默认情况下这个浏览器层默认一直显示，但是桌面端例外，因为它的SwingPanel是置顶显示的，所以浏览器界面会一直盖在其它界面上面\n       */\n      BrowserPagePanel(Modifier.fillMaxSize().zIndex(1f), windowRenderScope.scale)\n      // 搜索界面考虑到窗口和全屏问题，显示的问题，需要控制modifier\n      when {\n        viewModel.previewPanel.Render(Modifier.fillMaxSize().zIndex(2f)) -> {}\n        viewModel.searchPanel.Render(Modifier.fillMaxSize().zIndex(2f)) -> {}\n        else -> {}\n      }\n    }\n  }\n}\n\n@Composable\nfun BrowserPagePanel(modifier: Modifier, contentScaled: Float) {\n  Column(modifier) {\n    // 网页主体\n    Box(modifier = Modifier.weight(1f)) {\n      BrowserContentPager(contentScaled)   // 中间网页主体\n    }\n    // 工具栏，包括搜索框和导航栏\n    BrowserBottomBar(contentScaled, Modifier.fillMaxWidth().requiredHeight(dimenBottomHeight))\n  }\n}\n\n"},{"language":"kotlin","path":"desk/render/activity/ActivityActionRender.kt","content":"package org.dweb_browser.browser.desk.render.activity\n\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.FilledTonalButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport org.dweb_browser.browser.desk.ActivityController\nimport org.dweb_browser.browser.desk.model.ActivityItem\nimport org.dweb_browser.browser.desk.model.ActivityItemRenderProp\nimport org.dweb_browser.core.std.dns.nativeFetch\n\n@Composable\nfun ActivityItem.Action.Render(\n  controller: ActivityController, renderProp: ActivityItemRenderProp\n) {\n  when (val action = this) {\n    is ActivityItem.CancelAction -> action.Render(controller, renderProp)\n    is ActivityItem.ConfirmAction -> action.Render(controller, renderProp)\n    is ActivityItem.LinkAction -> action.Render(controller, renderProp)\n  }\n}\n\n@Composable\nfun ActivityItem.CancelAction.Render(\n  controller: ActivityController, renderProp: ActivityItemRenderProp\n) {\n  FilledTonalButton(\n    onClick = {\n      uri?.also { uri ->\n        controller.deskNMM.scopeLaunch(cancelable = true) {\n          controller.deskNMM.nativeFetch(uri)\n        }\n      }\n      renderProp.open = false\n    },\n    colors = ButtonDefaults.filledTonalButtonColors(\n      containerColor = MaterialTheme.colorScheme.errorContainer,\n      contentColor = MaterialTheme.colorScheme.error,\n    ),\n  ) {\n    Text(text)\n  }\n}\n\n@Composable\nfun ActivityItem.ConfirmAction.Render(\n  controller: ActivityController, renderProp: ActivityItemRenderProp\n) {\n  FilledTonalButton(\n    onClick = {\n      uri?.also { uri ->\n        controller.deskNMM.scopeLaunch(cancelable = true) {\n          controller.deskNMM.nativeFetch(uri)\n        }\n      }\n      renderProp.open = false\n    },\n    colors = ButtonDefaults.filledTonalButtonColors(\n      containerColor = MaterialTheme.colorScheme.primaryContainer,\n      contentColor = MaterialTheme.colorScheme.primary,\n    ),\n  ) {\n    Text(text)\n  }\n}\n\n@Composable\nfun ActivityItem.LinkAction.Render(\n  controller: ActivityController, renderProp: ActivityItemRenderProp\n) {\n  TextButton(onClick = {\n    controller.deskNMM.scopeLaunch(cancelable = true) {\n      controller.deskNMM.nativeFetch(uri)\n    }\n    renderProp.open = false\n  }) {\n    Text(text)\n  }\n}\n"},{"language":"kotlin","path":"desk/render/activity/ActivityContentRender.kt","content":"package org.dweb_browser.browser.desk.render.activity\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.desk.model.ActivityItem\nimport org.dweb_browser.browser.desk.model.ActivityItemRenderProp\nimport org.dweb_browser.helper.compose.saveBlur\n\n@Composable\nfun ActivityItem.Content.Render(renderProp: ActivityItemRenderProp, modifier: Modifier = Modifier) {\n  when (val content = this) {\n    is ActivityItem.TextContent -> content.Render(renderProp, modifier)\n  }\n}\n\n@Composable\nfun ActivityItem.TextContent.Render(\n  renderProp: ActivityItemRenderProp,\n  modifier: Modifier = Modifier,\n) {\n  val p2 = renderProp.detailAni.value\n  Box(\n    modifier,\n    contentAlignment = Alignment.Center,\n  ) {\n    val p3 = 1 - p2\n    val blur = (8 * p3).coerceAtLeast(0f).dp\n    Text(\n      text = text,\n      color = Color.White,\n      style = MaterialTheme.typography.bodySmall,\n      maxLines = 1,\n      overflow = TextOverflow.Ellipsis,\n      modifier = when {\n        renderProp.detailAniFinished -> Modifier\n        else -> Modifier\n          .saveBlur(blur)\n          .graphicsLayer {\n            translationY = -8 * density * p3\n            alpha = p2.coerceAtLeast(0f)\n          }\n      }\n    )\n  }\n}\n"},{"language":"kotlin","path":"desk/render/activity/ActivityControllerRender.kt","content":"package org.dweb_browser.browser.desk.render.activity\n\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.rounded.Downloading\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.CircularProgressIndicator\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Slider\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.util.fastForEach\nimport org.dweb_browser.browser.desk.ActivityController\nimport org.dweb_browser.browser.desk.model.ActivityItem\nimport org.dweb_browser.browser.desk.model.ActivityStyle\nimport org.dweb_browser.helper.compose.animation.LazyList\nimport org.dweb_browser.helper.toFixed\n\n/**\n * 如果你是开发者，可以开启这个常量，来做对ActivityController的调试\n */\ninternal const val DEV_ACTIVITY_CONTROLLER = false\n\n@Composable\nexpect fun ActivityController.Render()\n\n@Composable\ninternal fun CommonActivityListRender(\n  controller: ActivityController,\n  activityStyle: ActivityStyle,\n) {\n  val activityList by controller.list.collectAsState()\n  LazyList(\n    activityList,\n    endAnimationFinished = { !it.renderProp.canView },\n    playEndAnimation = { it.renderProp.open = false },\n  ) { showList ->\n    showList.fastForEach { activity ->\n      key(activity.id) {\n        ActivityItemRender(controller, activity, activityStyle)\n      }\n    }\n  }\n}\n\n@Composable\ninternal fun ActivityDevPanel(\n  controller: ActivityController,\n  modifier: Modifier = Modifier\n) {\n  Column {\n    Text(\"动画刚性 ➗${animationStiffness.toFixed(2)}\")\n    Slider(animationStiffness, { animationStiffness = it }, valueRange = 1f..200f)\n    HorizontalDivider()\n    Row(modifier) {\n      val activityList = remember { mutableStateListOf<ActivityItem>() }\n      Button(\n        onClick = {\n          controller.request(\n            ActivityItem(\n              owner = controller.deskNMM,\n              leadingIcon = ActivityItem.ComposeIcon { modifier ->\n                Icon(Icons.Rounded.Downloading, contentDescription = null, modifier = modifier)\n              },\n              trailingIcon = ActivityItem.ComposeIcon { modifier ->\n                CircularProgressIndicator(modifier)\n              },\n              centerTitle = ActivityItem.TextContent(\"Hello Gaubee, This is Long Text!!!\"),\n              bottomActions = emptyList(),\n            ).also { activityList += it }\n          )\n        },\n        enabled = activityList.isEmpty()\n      ) {\n        Text(text = \"创建活动\")\n      }\n      Button(\n        onClick = {\n          activityList.first().apply {\n            controller.end(owner = owner, id = id)\n            activityList -= this\n          }\n        },\n        enabled = activityList.isNotEmpty()\n      ) {\n        Text(text = \"销毁活动\")\n      }\n    }\n  }\n}"},{"language":"kotlin","path":"desk/render/activity/ActivityIconRender.kt","content":"package org.dweb_browser.browser.desk.render.activity\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport coil3.compose.rememberAsyncImagePainter\nimport org.dweb_browser.browser.desk.ActivityController\nimport org.dweb_browser.browser.desk.model.ActivityItem\nimport org.dweb_browser.browser.desk.model.ActivityItemRenderProp\nimport org.dweb_browser.pure.image.compose.LocalCoilImageLoader\nimport org.dweb_browser.pure.image.compose.PureImageLoader\nimport org.dweb_browser.pure.image.compose.SmartLoad\n\n@Composable\nfun ActivityItem.Icon.Render(\n  controller: ActivityController,\n  renderProp: ActivityItemRenderProp,\n  modifier: Modifier = Modifier,\n) {\n  when (val icon = this) {\n    is ActivityItem.ImageIcon -> icon.Render(controller, renderProp, modifier)\n    is ActivityItem.ComposeIcon -> icon.Render(controller, renderProp, modifier)\n    ActivityItem.NoneIcon -> {}\n  }\n}\n\n@Composable\nfun ActivityItem.ImageIcon.Render(\n  controller: ActivityController,\n  renderProp: ActivityItemRenderProp,\n  modifier: Modifier = Modifier,\n) {\n  PureImageLoader.SmartLoad(\n    url = url,\n    maxWidth = 128.dp,\n    maxHeight = 128.dp,\n    currentColor = null,\n//    hook = controller.deskNMM.blobFetchHook,\n  ).with {\n    coilImageRequest?.also { imageRequest ->\n      val painter = rememberAsyncImagePainter(\n        model = imageRequest,\n        imageLoader = LocalCoilImageLoader.current.loader()\n      )\n      Image(painter = painter, contentDescription = null, modifier = modifier)\n    } ?: Image(bitmap = it, contentDescription = null, modifier = modifier)\n  }\n}\n\n@Composable\nfun ActivityItem.ComposeIcon.Render(\n  controller: ActivityController,\n  renderProp: ActivityItemRenderProp,\n  modifier: Modifier = Modifier,\n) {\n  content(modifier)\n}"},{"language":"kotlin","path":"desk/render/activity/ActivityItemRender.kt","content":"package org.dweb_browser.browser.desk.render.activity\n\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.gestures.detectVerticalDragGestures\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.requiredHeight\nimport androidx.compose.foundation.layout.requiredSize\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.layout.wrapContentSize\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.material3.LocalTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.composed\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.util.lerp\nimport kotlinx.coroutines.delay\nimport org.dweb_browser.browser.desk.ActivityController\nimport org.dweb_browser.browser.desk.model.ActivityItem\nimport org.dweb_browser.browser.desk.model.ActivityItemRenderProp\nimport org.dweb_browser.browser.desk.model.ActivityStyle\nimport org.dweb_browser.core.std.file.ext.blobFetchHook\nimport org.dweb_browser.helper.compose.clickableWithNoEffect\nimport org.dweb_browser.helper.compose.saveBlur\nimport org.dweb_browser.sys.window.render.AppLogo\nimport squircleshape.CornerSmoothing\nimport squircleshape.SquircleShape\n\n@Composable\ninternal fun ActivityItemRender(\n  controller: ActivityController,\n  item: ActivityItem,\n  style: ActivityStyle,\n) {\n  val renderProp = item.renderProp\n  val p1 = renderProp.viewAni.value\n\n  LaunchedEffect(renderProp.open) {\n    if (renderProp.open) {\n      renderProp.viewAni.animateTo(1f, activityEnterAnimationSpec())\n    } else {\n      renderProp.viewAni.animateTo(0f, activityExitAnimationSpec())\n    }\n  }\n  if (!renderProp.canView) {\n    return\n  }\n  /**\n   * viewAni == 0 -> openScreenMarginTop\n   * detailAni == 1 -> openScreenMarginTop\n   *\n   * viewAni == 1 -> screenMarginTop\n   * detailAni == 0 -> screenMarginTop\n   */\n  val offset = lerp(style.screenMarginTop, style.openScreenMarginTop, renderProp.detailAni.value)\n  style.containerBox(\n    ActivityStyle.ContainerScope(\n      lerp(\n        style.openScreenMarginTop,\n        offset,\n        renderProp.viewAni.value\n      ).dp\n    )\n  ) {\n    val toastModifier: Modifier = when {\n      renderProp.viewAniFinished -> Modifier\n      else -> {\n        val blur = lerp(16f, 0f, renderProp.viewAni.value).coerceAtLeast(0f)\n        Modifier\n          .graphicsLayer {\n            translationY = (1 - p1) * -style.screenMarginTop * density\n            alpha = when {\n              renderProp.open -> 0.5f + 0.5f * p1\n              else -> 0.2f + 0.8f * p1\n            }\n            val scale = when {\n              renderProp.open -> 0.5f + 0.5f * p1\n              else -> 0.2f + 0.8f * p1\n            }\n            scaleX = scale\n            scaleY = scale\n          }\n          .saveBlur(blur.dp)\n          .padding(blur.coerceAtLeast(0f).dp)\n      }\n    }\n    val contentPadding = 16f\n    val innerPadding1 = contentPadding / 2\n    val innerPadding2 = innerPadding1 / 2\n    val innerPaddingDp = lerp(innerPadding2, innerPadding1, renderProp.detailAni.value).dp\n    val elevation =\n      lerp(style.shadowElevation, style.openShadowElevation, renderProp.detailAni.value)\n    val shape = SquircleShape(\n      lerp(style.radius, style.openRadius, renderProp.detailAni.value).dp,\n      CornerSmoothing.Medium\n    )\n\n    style.contentBox(\n      ActivityStyle.ContentScope(\n        toastModifier\n          .shadow(elevation.dp, shape = shape)\n          .background(Color.Black, shape = shape)\n      )\n    ) {\n      Box(\n        Modifier\n          .wrapContentSize()\n          .let { modifier ->\n            when {\n              renderProp.viewAniFinished -> modifier\n              p1 < 0.5f -> {\n                modifier\n                  .animateContentSize()\n                  .size(0.dp)\n                  .alpha(0f)\n              }\n\n              else -> modifier\n                .animateContentSize()\n                .alpha((p1 - 0.5f) * 2)\n            }\n          }\n          .padding(innerPaddingDp)\n          .composed {\n            var dragMove by remember { mutableFloatStateOf(0f) }\n            pointerInput(Unit) {\n              detectVerticalDragGestures(onDragEnd = {\n                renderProp.open = dragMove > 0\n                if (renderProp.open) {\n                  renderProp.showDetail = true\n                }\n              }) { change, dragAmount ->\n                change.consume()\n                dragMove += dragAmount\n              }\n            }\n          }\n          .clickableWithNoEffect {\n            renderProp.showDetail = !renderProp.showDetail\n          },\n        contentAlignment = Alignment.Center,\n      ) {\n        ActivityItemLayout(\n          controller = controller,\n          item = item,\n          style = style,\n          innerPaddingDp = innerPaddingDp,\n        )\n      }\n    }\n  }\n}\n\n@Composable\ninternal fun ActivityItemLayout(\n  controller: ActivityController,\n  item: ActivityItem,\n  style: ActivityStyle,\n  innerPaddingDp: Dp,\n) {\n  val renderProp = item.renderProp\n  ActivityItemContentEffect(renderProp)\n  CompositionLocalProvider(\n    LocalContentColor provides Color.White,\n    LocalTextStyle provides MaterialTheme.typography.bodySmall,\n  ) {\n    val centerWidthDp = lerp(\n      style.centerWidth,\n      style.openCenterWidth,\n      renderProp.detailAni.value\n    ).dp\n    Column(horizontalAlignment = Alignment.CenterHorizontally) {\n      Box(\n        Modifier.height(\n          lerp(\n            style.overlayCutoutHeight,\n            style.openOverlayCutoutHeight,\n            renderProp.detailAni.value\n          ).coerceAtLeast(0f).dp\n        )\n      )\n      Row(\n        horizontalArrangement = Arrangement.SpaceBetween,\n        verticalAlignment = Alignment.CenterVertically,\n      ) {\n        val minSize = lerp(24f, 48f, renderProp.detailAni.value).dp\n        Box(\n          modifier = Modifier\n            .padding(innerPaddingDp)\n            .requiredSize(minSize)\n        ) {\n          AppLogo.from(\n            resource = item.appIcon,\n            fetchHook = controller.deskNMM.blobFetchHook,\n          ).Render(Modifier.fillMaxWidth())\n          val marginDp = lerp(24f * 0.13f, 0f, renderProp.detailAni.value).coerceAtLeast(0f).dp\n          item.leadingIcon.Render(\n            controller,\n            renderProp,\n            modifier = Modifier\n              .align(Alignment.BottomEnd)\n              .requiredSize(lerp(0f, 24f, renderProp.detailAni.value).dp)\n              .padding(end = marginDp, bottom = marginDp)\n          )\n        }\n        Box(modifier = Modifier.width(centerWidthDp))\n\n        Box(\n          modifier = Modifier\n            .padding(innerPaddingDp)\n            .requiredSize(minSize)\n        ) {\n          item.trailingIcon.Render(controller, renderProp, Modifier.fillMaxSize())\n        }\n      }\n      val aniHeight = lerp(0f, innerPaddingDp.value * 2 + 24, renderProp.detailAni.value)\n      if (aniHeight > 0f) {\n        Box(Modifier.requiredHeight(aniHeight.dp)) {\n          item.centerTitle.Render(\n            renderProp,\n            modifier = Modifier\n              .padding(innerPaddingDp)\n              .requiredSize(centerWidthDp, 24.dp)\n              .graphicsLayer { scaleY = renderProp.detailAni.value },\n          )\n        }\n      }\n      if (item.bottomActions.isNotEmpty() && renderProp.canViewDetail) {\n        Row {\n          for (action in item.bottomActions) {\n            key(action) {\n              action.Render(controller, renderProp)\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n@Composable\ninternal fun ActivityItemContentEffect(renderProp: ActivityItemRenderProp) {\n  LaunchedEffect(renderProp.showDetail) {\n    if (renderProp.showDetail) {\n      renderProp.detailAni.animateTo(1f, activityEnterAnimationSpec())\n      delay(5000)\n      renderProp.showDetail = false\n    } else {\n      renderProp.detailAni.animateTo(0f, activityExitAnimationSpec())\n    }\n  }\n}"},{"language":"kotlin","path":"desk/render/activity/activityAnimation.kt","content":"package org.dweb_browser.browser.desk.render.activity\n\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.spring\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.setValue\n\ninternal var animationStiffness by mutableFloatStateOf(1f)\ninternal fun <T> activityEnterAnimationSpec() = spring<T>(\n  dampingRatio = Spring.DampingRatioLowBouncy,\n  stiffness = Spring.StiffnessMedium / animationStiffness,\n)\n\ninternal fun <T> activityExitAnimationSpec() = spring<T>(\n  dampingRatio = Spring.DampingRatioNoBouncy,\n  stiffness = Spring.StiffnessLow / animationStiffness,\n)\n"},{"language":"kotlin","path":"jmm/render/app/AppIntroductionView.kt","content":"package org.dweb_browser.browser.jmm.render.app\n\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.jmm.JmmI18nResource\nimport org.dweb_browser.browser.jmm.render.HorizontalPadding\nimport org.dweb_browser.browser.jmm.render.VerticalPadding\nimport org.dweb_browser.core.help.types.JmmAppInstallManifest\n\n/**\n * 应用介绍描述部分\n */\n@Composable\ninternal fun AppIntroductionView(jmmAppInstallManifest: JmmAppInstallManifest) {\n  Column(modifier = Modifier.padding(horizontal = HorizontalPadding, vertical = VerticalPadding)) {\n    Text(\n      text = JmmI18nResource.install_introduction(),\n      style = MaterialTheme.typography.titleMedium,\n    )\n    Spacer(Modifier.size(16.dp))\n    Box(modifier = Modifier.animateContentSize()) {\n      Text(\n        text = jmmAppInstallManifest.description ?: \"\",\n        style = MaterialTheme.typography.bodySmall,\n      )\n    }\n  }\n}"},{"language":"kotlin","path":"jmm/render/app/NewVersionInfoView.kt","content":"package org.dweb_browser.browser.jmm.render.app\n\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.jmm.JmmI18nResource\nimport org.dweb_browser.browser.jmm.render.HorizontalPadding\nimport org.dweb_browser.browser.jmm.render.VerticalPadding\nimport org.dweb_browser.core.help.types.JmmAppInstallManifest\n\n/**\n * 应用新版本信息部分\n */\n@Composable\ninternal fun NewVersionInfoView(\n  jmmAppInstallManifest: JmmAppInstallManifest,\n  modifier: Modifier = Modifier,\n) {\n  Column(\n    modifier = modifier.padding(horizontal = HorizontalPadding, vertical = VerticalPadding)\n      .animateContentSize()\n  ) {\n    Text(\n      text = JmmI18nResource.install_info(),\n      style = MaterialTheme.typography.titleMedium,\n    )\n    Spacer(Modifier.size(16.dp))\n    Text(\n      text = JmmI18nResource.install_version() + \" ${jmmAppInstallManifest.version}\",\n      style = MaterialTheme.typography.labelSmall,\n    )\n    Text(\n      text = jmmAppInstallManifest.change_log,\n      style = MaterialTheme.typography.bodySmall,\n    )\n  }\n//  Card(onClick = { expanded.value = !expanded.value },\n//    modifier = Modifier\n//      .animateContentSize().clickable { expanded.value = !expanded.value }) {\n//    Column(Modifier.padding(horizontal = HorizontalPadding, vertical = VerticalPadding)) {\n//      Text(\n//        text = JmmI18nResource.install_update_log(),\n//        style = MaterialTheme.typography.labelMedium,\n//        modifier = Modifier.padding(vertical = 6.dp)\n//      )\n//      // TODO Markdown Support\n//      Text(\n//        text = jmmAppInstallManifest.change_log,\n//        maxLines = if (expanded.value) Int.MAX_VALUE else 2,\n//        overflow = TextOverflow.Ellipsis,\n//        style = MaterialTheme.typography.bodyMedium,\n//      )\n//    }\n//  }\n}"},{"language":"kotlin","path":"jmm/render/app/OtherInfoView.kt","content":"package org.dweb_browser.browser.jmm.render.app\n\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.outlined.Verified\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.jmm.JmmI18nResource\nimport org.dweb_browser.browser.jmm.LocalJmmDetailController\nimport org.dweb_browser.browser.jmm.render.HorizontalPadding\nimport org.dweb_browser.browser.jmm.render.VerticalPadding\nimport org.dweb_browser.core.CoreI18nResource\nimport org.dweb_browser.core.help.types.JmmAppInstallManifest\nimport org.dweb_browser.core.help.types.MICRO_MODULE_CATEGORY\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.helper.buildUrlString\nimport org.dweb_browser.helper.toSpaceSize\n\n/**\n * 应用的其他相关内容\n */\n@Composable\ninternal fun OtherInfoView(\n  jmmAppInstallManifest: JmmAppInstallManifest,\n  modifier: Modifier = Modifier,\n) {\n  Column(modifier = modifier.padding(horizontal = HorizontalPadding, vertical = VerticalPadding)) {\n    Text(\n      text = JmmI18nResource.tab_param(),\n      style = MaterialTheme.typography.titleMedium,\n    )\n    Spacer(Modifier.size(16.dp))\n    Row(\n      modifier = Modifier.fillMaxWidth().padding(vertical = 8.dp),\n      verticalAlignment = Alignment.CenterVertically,\n      horizontalArrangement = Arrangement.SpaceBetween,\n    ) {\n      Label(JmmI18nResource.install_mmid())\n\n      Row(\n        verticalAlignment = Alignment.CenterVertically,\n      ) {\n        // TODO: 验证成功失败，使用不同的图标\n        Icon(\n          imageVector = Icons.Outlined.Verified, // Icons.Outlined.Dangerous\n          contentDescription = BrowserI18nResource.IconDescription.verified.text,\n          modifier = Modifier.size(14.dp),\n          tint = Color.Blue\n        )\n        Spacer(modifier = Modifier.width(8.dp))\n        Info(jmmAppInstallManifest.id)\n      }\n    }\n    HorizontalDivider()\n    OtherItemView(\n      type = JmmI18nResource.install_version(), content = jmmAppInstallManifest.version\n    )\n    HorizontalDivider()\n    OtherItemView(\n      type = JmmI18nResource.install_info_dev(),\n      content = jmmAppInstallManifest.author.joinToString(\", \")\n    )\n    HorizontalDivider()\n    jmmAppInstallManifest.homepage_url?.also { homepage_url ->\n      val controller = LocalJmmDetailController.current\n      OtherItemView(\n        modifier = Modifier.clickable {\n          controller.jmmNMM.scopeLaunch(cancelable = true) {\n            controller.jmmNMM.nativeFetch(buildUrlString(\"dweb://openinbrowser\") {\n              parameters[\"url\"] = homepage_url\n            })\n            controller.closeBottomSheet()\n          }\n        },\n        type = JmmI18nResource.install_info_homepage(),\n        content = homepage_url,\n        contentTextStyle = TextStyle(color = MaterialTheme.colorScheme.primary)\n      )\n    }\n    HorizontalDivider()\n    OtherItemView(\n      type = JmmI18nResource.install_info_size(),\n      content = jmmAppInstallManifest.bundle_size.toSpaceSize()\n    )\n    HorizontalDivider()\n    OtherItemView(\n      type = JmmI18nResource.install_info_type(),\n      content = jmmAppInstallManifest.categories.print()\n    )\n    HorizontalDivider()\n    OtherItemView(\n      type = JmmI18nResource.install_info_copyright(),\n      content = jmmAppInstallManifest.author.firstOrNull() ?: jmmAppInstallManifest.name\n    )\n  }\n}\n\n/**\n * @param largeContent 该字段如果有数据，表示允许展开，查看详细信息\n */\n@Composable\nprivate fun OtherItemView(\n  modifier: Modifier = Modifier,\n  type: String,\n  content: String,\n  contentModifier: Modifier = Modifier,\n  contentTextStyle: TextStyle? = null,\n  largeContent: String? = null,\n  onClick: (() -> Unit)? = null,\n) {\n  Row(\n    modifier = modifier.fillMaxWidth().padding(vertical = 8.dp),\n    verticalAlignment = Alignment.CenterVertically,\n    horizontalArrangement = Arrangement.SpaceBetween,\n  ) {\n    Label(type)\n    Info(content, contentModifier, contentTextStyle)\n  }\n}\n\n@Composable\nprivate fun RowScope.Label(\n  text: String,\n  modifier: Modifier = Modifier,\n  textStyle: TextStyle? = null,\n) = Text(\n  text = text, color = MaterialTheme.colorScheme.outline,\n  modifier = modifier.weight(1f, false),\n  style = MaterialTheme.typography.labelSmall.merge(textStyle),\n)\n\n@Composable\nprivate fun RowScope.Info(\n  content: String,\n  modifier: Modifier = Modifier,\n  textStyle: TextStyle? = null,\n) = Text(\n  text = content,\n  modifier = modifier.weight(1f, false),\n  color = MaterialTheme.colorScheme.onSurface,\n  textAlign = TextAlign.End,\n  style = MaterialTheme.typography.bodyMedium.merge(textStyle),\n  maxLines = 1,\n  overflow = TextOverflow.Ellipsis,\n)\n\nfun List<MICRO_MODULE_CATEGORY>.print(): String {\n  return joinToString(\", \") { category ->\n    CoreI18nResource.Category.ALL[category]?.res?.text ?: category.name\n  }\n}"},{"language":"kotlin","path":"web/model/page/BrowserBookmarkPage.kt","content":"package org.dweb_browser.browser.web.model.page\n\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.ColorFilter\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.BrowserController\nimport org.dweb_browser.browser.web.data.WebSiteInfo\nimport org.dweb_browser.browser.web.ui.page.BrowserBookmarkPageRender\n\nclass BrowserBookmarkPage(browserController: BrowserController) : BrowserPage(browserController) {\n  companion object {\n    fun isBookmarkUrl(url: String) = BrowserPageType.Bookmark.isMatchUrl(url)\n  }\n\n  override val icon\n    @Composable get() = BrowserPageType.Bookmark.iconPainter()\n  override val iconColorFilter\n    @Composable get() = ColorFilter.tint(LocalContentColor.current)\n\n  init {\n    url = BrowserPageType.Bookmark.url // \"about:bookmarks\"\n  }\n\n  var isInEditMode by mutableStateOf(false)\n  var editingBookmark by mutableStateOf<WebSiteInfo?>(null)\n  val selectedBookmarks = mutableStateListOf<WebSiteInfo>()\n\n  override fun isUrlMatch(url: String) = isBookmarkUrl(url)\n\n  @Composable\n  override fun Render(modifier: Modifier) {\n    title = BrowserI18nResource.Bookmark.page_title()\n    BrowserBookmarkPageRender(this, modifier)\n  }\n\n  override suspend fun destroy() {\n  }\n}"},{"language":"kotlin","path":"web/model/page/BrowserDownloadPage.kt","content":"package org.dweb_browser.browser.web.model.page\n\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.ColorFilter\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.BrowserController\nimport org.dweb_browser.browser.web.data.BrowserDownloadItem\nimport org.dweb_browser.browser.web.ui.page.BrowserDownloadPageRender\n\nclass BrowserDownloadPage(browserController: BrowserController) : BrowserPage(browserController) {\n  companion object {\n    fun isDownloadUrl(url: String) =\n      BrowserPageType.Download.isMatchUrl(url) // isAboutPage(url, \"downloads\")\n  }\n\n  override val icon\n    @Composable get() = BrowserPageType.Download.iconPainter() // rememberVectorPainter(Icons.TwoTone.Download)\n  override val iconColorFilter\n    @Composable get() = ColorFilter.tint(LocalContentColor.current)\n\n  init {\n    url = BrowserPageType.Download.url // \"about:downloads\"\n  }\n\n  private val downloadController = browserController.downloadController\n  val saveDownloadList = downloadController.downloadList\n  val saveCompleteList = downloadController.completeList\n\n  override fun isUrlMatch(url: String) = isDownloadUrl(url)\n\n  @Composable\n  override fun Render(modifier: Modifier) {\n    title = BrowserI18nResource.Download.page_title()\n    BrowserDownloadPageRender(modifier)\n  }\n\n  override suspend fun destroy() {\n  }\n\n  /**\n   * 用于响应点击列表的按钮\n   */\n  fun clickDownloadButton(downloadItem: BrowserDownloadItem) =\n    downloadController.clickDownloadButton(downloadItem)\n\n  fun shareDownloadItem(downloadItem: BrowserDownloadItem) =\n    browserController.lifecycleScope.launch {\n      downloadController.shareDownloadItem(downloadItem)\n    }\n\n  fun deleteDownloadItems(list: List<BrowserDownloadItem>) =\n    downloadController.deleteDownloadItems(list)\n\n  fun openFileOnDownload(downloadItem: BrowserDownloadItem) =\n    browserController.lifecycleScope.launch {\n      downloadController.openFileOnDownload(downloadItem)\n    }\n}"},{"language":"kotlin","path":"web/model/page/BrowserEnginePage.kt","content":"package org.dweb_browser.browser.web.model.page\n\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.ColorFilter\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.BrowserController\nimport org.dweb_browser.browser.web.ui.page.BrowserEnginePageRender\n\nclass BrowserEnginePage(browserController: BrowserController) : BrowserPage(browserController) {\n  companion object {\n    fun isEngineUrl(url: String) =\n      BrowserPageType.Engine.isMatchUrl(url) // isAboutPage(url, \"engines\")\n  }\n\n  override val icon\n    @Composable get() = BrowserPageType.Engine.iconPainter() // rememberVectorPainter(Icons.TwoTone.PersonSearch)\n  override val iconColorFilter\n    @Composable get() = ColorFilter.tint(LocalContentColor.current)\n\n  init {\n    url = BrowserPageType.Engine.url // \"about:engines\"\n  }\n\n  override fun isUrlMatch(url: String) = isEngineUrl(url)\n\n  @Composable\n  override fun Render(modifier: Modifier) {\n    title = BrowserI18nResource.Engine.page_title()\n    BrowserEnginePageRender(this, modifier)\n  }\n\n  override suspend fun destroy() {\n  }\n}"},{"language":"kotlin","path":"web/model/page/BrowserHistoryPage.kt","content":"package org.dweb_browser.browser.web.model.page\n\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.ColorFilter\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.BrowserController\nimport org.dweb_browser.browser.web.data.WebSiteInfo\nimport org.dweb_browser.browser.web.ui.page.BrowserHistoryPageRender\n\nclass BrowserHistoryPage(browserController: BrowserController) : BrowserPage(browserController) {\n  companion object {\n    fun isHistoryUrl(url: String) =\n      BrowserPageType.History.isMatchUrl(url) // isAboutPage(url, \"history\")\n  }\n\n  override val icon\n    @Composable get() = BrowserPageType.History.iconPainter() // rememberVectorPainter(Icons.TwoTone.History)\n  override val iconColorFilter\n    @Composable get() = ColorFilter.tint(LocalContentColor.current)\n\n  init {\n    url = BrowserPageType.History.url // \"about:history\"\n  }\n\n  override fun isUrlMatch(url: String) = isHistoryUrl(url)\n\n  var isInEditMode by mutableStateOf(false)\n  val selectedHistories = mutableStateListOf<WebSiteInfo>()\n\n  @Composable\n  override fun Render(modifier: Modifier) {\n    title = BrowserI18nResource.History.page_title()\n    BrowserHistoryPageRender(this, modifier)\n  }\n\n  override suspend fun destroy() {\n  }\n}"},{"language":"kotlin","path":"web/model/page/BrowserHomePage.kt","content":"package org.dweb_browser.browser.web.model.page\n\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.ColorFilter\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.BrowserController\nimport org.dweb_browser.browser.web.ui.page.BrowserHomePageRender\n\nclass BrowserHomePage(browserController: BrowserController) : BrowserPage(browserController) {\n  companion object {\n    fun isNewTabUrl(url: String) = url.isEmpty() || BrowserPageType.Home.isMatchUrl(url)\n  }\n\n  override val icon\n    @Composable get() = BrowserPageType.Home.iconPainter() // BrowserDrawResource.Star.painter()\n  override val iconColorFilter\n    @Composable get() = ColorFilter.tint(LocalContentColor.current)// BrowserDrawResource.Star.getContentColorFilter()\n\n  init {\n    url = BrowserPageType.Home.url // \"about:newtab\"\n  }\n\n  override fun isUrlMatch(url: String) = isNewTabUrl(url)\n\n  @Composable\n  override fun Render(modifier: Modifier) {\n    title = BrowserI18nResource.Home.page_title()\n    BrowserHomePageRender(modifier)\n  }\n\n  override suspend fun destroy() {\n  }\n\n  val browserPageList = listOf(\n    BrowserPageType.Bookmark,\n    BrowserPageType.History,\n    BrowserPageType.Engine,\n    BrowserPageType.Download\n  )\n}\n\n"},{"language":"kotlin","path":"web/model/page/BrowserPage.kt","content":"package org.dweb_browser.browser.web.model.page\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.aspectRatio\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.twotone.Bookmarks\nimport androidx.compose.material.icons.twotone.BrokenImage\nimport androidx.compose.material.icons.twotone.Download\nimport androidx.compose.material.icons.twotone.History\nimport androidx.compose.material.icons.twotone.PersonSearch\nimport androidx.compose.material.icons.twotone.Settings\nimport androidx.compose.material.icons.twotone.Star\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableFloatStateOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.graphics.ImageBitmap\nimport androidx.compose.ui.graphics.painter.BitmapPainter\nimport androidx.compose.ui.graphics.painter.Painter\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.graphics.vector.rememberVectorPainter\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.unit.Dp\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.BrowserController\nimport org.dweb_browser.browser.web.debugBrowser\nimport org.dweb_browser.helper.SimpleSignal\nimport org.dweb_browser.helper.capturable.CaptureV2Controller\nimport org.dweb_browser.helper.compose.SimpleI18nResource\nimport org.dweb_browser.helper.globalDefaultScope\n\nsealed class BrowserPage(val browserController: BrowserController) {\n  abstract fun isUrlMatch(url: String): Boolean\n  open fun updateUrl(url: String) {\n    this.url = url\n  }\n\n  var url by mutableStateOf(\"\")\n    internal set\n  open var title by mutableStateOf(\"\")\n    internal set\n  open val icon: Painter? @Composable get() = null\n  open val iconColorFilter: ColorFilter? @Composable get() = null\n\n  var scale by mutableFloatStateOf(1f)\n\n  open fun isWebViewCompose(): Boolean = false // 用于标识是否是webview需要缩放，还是原生的compose需要缩放\n\n  /**\n   * 截图器\n   */\n  val captureController = CaptureV2Controller()\n\n  /**\n   * 缩略图\n   */\n  internal var thumbnail by mutableStateOf<ImageBitmap?>(null)\n  open val previewContent: Painter?\n    @Composable get() = remember(thumbnail) {\n      thumbnail?.let { BitmapPainter(it) }\n    }\n\n  @Composable\n  fun PreviewRender(containerWidth: Dp, modifier: Modifier) {\n    val page = this\n    val pageTitle = page.title\n    val pageIcon = page.icon\n    val pageIconColorFilter = page.iconColorFilter\n    val pagePreview = page.previewContent\n    if (pagePreview != null) {\n      Image(\n        painter = pagePreview,\n        contentDescription = pageTitle,\n        modifier = modifier,\n        contentScale = ContentScale.FillWidth,\n        alignment = Alignment.Center,\n      )\n    } else {\n      // 如果没有预览图，那么尝试显示图标作为预览图的替代，如果没有图标，那么使用备用Icon\n      Box(modifier) {\n        val iconModifier = Modifier.size(containerWidth / 3).aspectRatio(1f).align(Alignment.Center)\n        if (pageIcon != null) {\n          Image(\n            painter = pageIcon,\n            contentDescription = pageTitle,\n            colorFilter = pageIconColorFilter,\n            modifier = iconModifier,\n          )\n        } else {\n          Icon(\n            imageVector = Icons.TwoTone.BrokenImage,\n            contentDescription = pageTitle,\n            modifier = iconModifier,\n            tint = LocalContentColor.current.copy(alpha = 0.5f)\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 用来告知界面将要刷新\n   * 如果有内置的渲染器，可以override这个函数，从而辅助做到修改 thumbnail 的内容\n   *\n   * 比方说，IOS与Desktop是混合视图，因此可以重写这个函数，让webview进行截图，然后在 placeholderNode 背后绘制截图内容\n   * Android 这是调用 view.invalidate() 从而实现onDraw的触发，从而能够被 captureController 所捕捉到这一帧发生的变化\n   */\n  open fun onRequestCapture(): Boolean {\n    return true\n  }\n\n  suspend fun captureView(reason: String) {\n    captureViewInBackground(reason).join()\n  }\n\n  fun captureViewInBackground(reason: String) = globalDefaultScope.launch {\n    debugBrowser(\"captureViewInBackground\") { \"reason=$reason title=$title url=$url\" }\n    val preThumbnail = thumbnail\n    onRequestCapture()\n    if (preThumbnail == thumbnail) {\n      thumbnail = captureController.capture()\n    }\n  }\n\n  @Composable\n  internal abstract fun Render(modifier: Modifier)\n\n  private val destroySignal = SimpleSignal()\n  val onDestroy = destroySignal.toListener()\n  open suspend fun destroy() {\n    destroySignal.emitAndClear()\n  }\n\n  private val _isInBookmark by lazy {\n    mutableStateOf(false).also { state ->\n      val job = browserController.lifecycleScope.launch {\n        /// 只在这里修改，所以不用担心线程冲突，不需要走Effect\n        browserController.bookmarksStateFlow.collect { bookmarks ->\n          state.value = bookmarks.any { it.url == url }\n        }\n      }\n      onDestroy {\n        job.cancel()\n      }\n    }\n  }\n\n  /**\n   * 是否在书签中\n   */\n  val isInBookmark get() = _isInBookmark.value\n}\n\ninternal fun isMatchBaseUri(url: String, baseUri: String) = if (url == baseUri) true\nelse if (url.startsWith(baseUri)) url[baseUri.length].let { it == '/' || it == '?' || it == '#' }\nelse false\n\ninternal fun isAboutPage(url: String, name: String) =\n  isMatchBaseUri(url, \"chrome://$name\") || isMatchBaseUri(url, \"about:$name\")\n\nenum class BrowserPageType(\n  val url: String, val icon: ImageVector, val title: SimpleI18nResource,\n) {\n  Home(\n    \"about:newtab\", Icons.TwoTone.Star, BrowserI18nResource.Home.page_title\n  ),\n  Bookmark(\n    \"about:bookmarks\", Icons.TwoTone.Bookmarks, BrowserI18nResource.Bookmark.page_title\n  ),\n  Download(\n    \"about:downloads\", Icons.TwoTone.Download, BrowserI18nResource.Download.page_title\n  ),\n  History(\n    \"about:history\", Icons.TwoTone.History, BrowserI18nResource.History.page_title\n  ),\n  Engine(\n    \"about:engines\", Icons.TwoTone.PersonSearch, BrowserI18nResource.Engine.page_title\n  ),\n  Setting(\"about:settings\", Icons.TwoTone.Settings, BrowserI18nResource.Setting.page_title);\n\n  @Composable\n  fun iconPainter() = rememberVectorPainter(icon)\n\n  fun isMatchUrl(url: String) = isMatchBaseUri(url, this.url)\n\n  @Composable\n  fun pageTitle() = title()\n}"},{"language":"kotlin","path":"web/model/page/BrowserSettingPage.kt","content":"package org.dweb_browser.browser.web.model.page\n\nimport androidx.compose.material3.LocalContentColor\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.ColorFilter\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.BrowserController\n\nclass BrowserSettingPage(browserController: BrowserController) : BrowserPage(browserController) {\n  companion object {\n    fun isSettingUrl(url: String) =\n      BrowserPageType.Setting.isMatchUrl(url) // isAboutPage(url, \"settings\")\n  }\n\n  override val icon\n    @Composable get() = BrowserPageType.Setting.iconPainter() // rememberVectorPainter(Icons.TwoTone.Settings)\n  override val iconColorFilter\n    @Composable get() = ColorFilter.tint(LocalContentColor.current)\n\n  init {\n    url = BrowserPageType.Setting.url // \"about:settings\"\n  }\n\n  override fun isUrlMatch(url: String) = isSettingUrl(url)\n\n  @Composable\n  override fun Render(modifier: Modifier) {\n    title = BrowserI18nResource.Setting.page_title()\n  }\n\n  override suspend fun destroy() {\n  }\n}"},{"language":"kotlin","path":"web/model/page/BrowserWebPage.kt","content":"package org.dweb_browser.browser.web.model.page\n\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.painter.BitmapPainter\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.search.SearchEngine\nimport org.dweb_browser.browser.web.BrowserController\nimport org.dweb_browser.browser.web.ui.page.BrowserWebPageRender\nimport org.dweb_browser.dwebview.IDWebView\nimport org.dweb_browser.helper.format\nimport org.dweb_browser.helper.isWebUrlOrWithoutProtocol\nimport org.dweb_browser.helper.toWebUrlOrWithoutProtocol\n\nclass BrowserWebPage(val webView: IDWebView, browserController: BrowserController) :\n  BrowserPage(browserController) {\n  companion object {\n    fun isWebUrl(url: String) = url.isWebUrlOrWithoutProtocol()\n  }\n\n  //   override var icon by mutableStateOf<Painter?>(null)\n//    internal set\n  override val icon\n    @Composable get() = webView.iconBitmapFlow.collectAsState().value?.let {\n      BitmapPainter(it)\n    }\n//  private class WebIcon(val icon: ImageBitmap) {\n//    val painter = BitmapPainter(icon)\n//  }\n\n  override fun isUrlMatch(url: String) = this.url == url\n\n  override fun updateUrl(url: String) {\n    // 自动补充协议头\n    val safeUrl = (url.toWebUrlOrWithoutProtocol() ?: return).toString()\n\n    superUpdateUrl(safeUrl)\n    webView.lifecycleScope.launch {\n      superUpdateUrl(webView.loadUrl(safeUrl))\n    }\n  }\n\n  override fun onRequestCapture(): Boolean {\n    if (isDestroy) return false\n    requestCaptureInCompose()\n    return true\n  }\n\n  internal fun superUpdateUrl(url: String) {\n    super.updateUrl(url)\n  }\n\n  @Composable\n  override fun Render(modifier: Modifier) {\n    BrowserWebPageRender(modifier)\n  }\n\n  private var isDestroy = false\n\n  override suspend fun destroy() {\n    isDestroy = true\n    webView.destroy()\n  }\n\n  private val searchEngine: SearchEngine? = null\n\n  // 根据url来搜索\n  fun loadUrl(url: String) {\n    // 判断 url 是否是 webUrl，如果是，直接loadUrl；如果不是，判断之前使用的搜索引擎将关键字替换了，进行搜索\n    if (isWebUrl(url)) {\n      updateUrl(url)\n    } else {\n      searchEngine?.let { updateUrl(searchEngine.searchLinks.first().format(url)) }\n    }\n  }\n\n  override fun isWebViewCompose() = true // 用于判断webview的缩放，还是Compose原生的缩放\n}\n\nexpect fun BrowserWebPage.requestCaptureInCompose(): Unit"},{"language":"kotlin","path":"web/ui/common/BrowserTopBar.kt","content":"package org.dweb_browser.browser.web.ui.common\n\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.ArrowBackIos\nimport androidx.compose.material3.CenterAlignedTopAppBar\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.material3.TopAppBarScrollBehavior\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.text.style.TextOverflow\n\n/**\n * 统一规划顶部工具栏的显示\n */\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun BrowserTopBar(\n  title: String,\n  navigationIcon: @Composable () -> Unit = {},\n  actions: (@Composable RowScope.() -> Unit) = {},\n  scrollBehavior: TopAppBarScrollBehavior? = null,\n) {\n  CenterAlignedTopAppBar(\n    windowInsets = WindowInsets(0, 0, 0, 0), // 顶部\n    colors = TopAppBarDefaults.topAppBarColors(\n      containerColor = MaterialTheme.colorScheme.primaryContainer,\n      titleContentColor = MaterialTheme.colorScheme.primary,\n    ),\n    title = { Text(text = title, overflow = TextOverflow.Ellipsis) },\n    navigationIcon = navigationIcon,\n    actions = actions,\n    scrollBehavior = scrollBehavior\n  )\n}\n\n/**\n * 统一规划顶部工具栏的显示\n */\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun BrowserTopBar(\n  title: String,\n  enableNavigation: Boolean = true,\n  onNavigationBack: () -> Unit = {},\n  actions: (@Composable RowScope.() -> Unit) = {},\n  scrollBehavior: TopAppBarScrollBehavior? = null,\n) {\n  CenterAlignedTopAppBar(\n    windowInsets = WindowInsets(0, 0, 0, 0), // 顶部\n    colors = TopAppBarDefaults.topAppBarColors(\n      containerColor = MaterialTheme.colorScheme.primaryContainer,\n      titleContentColor = MaterialTheme.colorScheme.primary,\n    ),\n    title = { Text(text = title, overflow = TextOverflow.Ellipsis) },\n    navigationIcon = {\n      if (enableNavigation) {\n        IconButton(onClick = onNavigationBack) {\n          Icon(\n            imageVector = Icons.AutoMirrored.Filled.ArrowBackIos,\n            contentDescription = \"Back to list\"\n          )\n        }\n      }\n    },\n    actions = actions,\n    scrollBehavior = scrollBehavior\n  )\n}"},{"language":"kotlin","path":"web/ui/page/BrowserBookmarkPage.kt","content":"package org.dweb_browser.browser.web.ui.page\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.WindowInsets\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight\nimport androidx.compose.material.icons.filled.Bookmark\nimport androidx.compose.material.icons.filled.Delete\nimport androidx.compose.material.icons.filled.Edit\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Checkbox\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.ListItem\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.material3.TextField\nimport androidx.compose.material3.TopAppBarDefaults\nimport androidx.compose.material3.rememberTopAppBarState\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.input.nestedscroll.nestedScroll\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserBookmarkPage\nimport org.dweb_browser.browser.web.ui.common.BrowserTopBar\nimport org.dweb_browser.helper.compose.NoDataRender\nimport org.dweb_browser.sys.toast.ToastPositionType\nimport org.dweb_browser.sys.window.core.LocalWindowController\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun BrowserBookmarkPageRender(\n  page: BrowserBookmarkPage,\n  modifier: Modifier,\n) {\n  val scrollBehavior = TopAppBarDefaults.pinnedScrollBehavior(rememberTopAppBarState())\n  val isInEditMode = page.isInEditMode\n  LocalWindowController.current.navigation.GoBackHandler(isInEditMode) {\n    page.isInEditMode = false\n  }\n  val viewModal = LocalBrowserViewModel.current\n  val uiScope = rememberCoroutineScope()\n  Scaffold(\n    modifier = modifier.nestedScroll(scrollBehavior.nestedScrollConnection),\n    contentWindowInsets = WindowInsets(0),\n    topBar = {\n      BrowserTopBar(\n        title = BrowserI18nResource.Bookmark.page_title(),\n        enableNavigation = isInEditMode,\n        onNavigationBack = { page.isInEditMode = false },\n        actions = { /// 右上角功能按钮\n          if (isInEditMode) {\n            IconButton(enabled = page.selectedBookmarks.isNotEmpty(), onClick = {\n              uiScope.launch {\n                viewModal.removeBookmarkUI(items = page.selectedBookmarks.toTypedArray())\n                page.isInEditMode = false\n              }\n            }) {\n              Icon(\n                imageVector = Icons.Filled.Delete, contentDescription = \"Delete Selects\"\n              )\n            }\n          } else {\n            IconButton(onClick = {\n              page.isInEditMode = true\n              page.selectedBookmarks.clear()\n              viewModal.showToastMessage(\n                BrowserI18nResource.Bookmark.tip_edit.text,\n                position = ToastPositionType.TOP\n              )\n            }) {\n              Icon(\n                imageVector = Icons.Filled.Edit, contentDescription = \"Go to Edit\"\n              )\n            }\n          }\n        },\n        scrollBehavior = scrollBehavior,\n      )\n    },\n  ) { innerPadding ->\n    BrowserBookmarkListPage(page, Modifier.padding(innerPadding))\n  }\n}\n\n@Composable\nfun BrowserBookmarkListPage(page: BrowserBookmarkPage, modifier: Modifier) {\n  val isInEditMode = page.isInEditMode\n  val viewModel = LocalBrowserViewModel.current\n  val bookmarks = viewModel.getBookmarks()\n  val uiScope = rememberCoroutineScope()\n  if (bookmarks.isEmpty()) {\n    NoDataRender(BrowserI18nResource.browser_empty_list(), modifier = modifier)\n  } else {\n    BrowserBookmarkItemEditDialog(page)\n    LazyColumn(modifier = modifier.fillMaxSize()) {\n      items(bookmarks) { bookmark ->\n        val openInNewPage = remember(viewModel, bookmark) {\n          {\n            uiScope.launch { viewModel.tryOpenUrlUI(bookmark.url) }\n            Unit\n          }\n        }\n\n        ListItem(\n          // 图标\n          leadingContent = {\n\n            bookmark.iconImage?.also { imageBitmap ->\n              Image(\n                bitmap = imageBitmap,\n                contentDescription = bookmark.title,\n                modifier = Modifier.padding(horizontal = 12.dp).size(28.dp)\n              )\n            } ?: Icon(\n              imageVector = Icons.Default.Bookmark,// ImageVector.vectorResource(R.drawable.ic_main_book),\n              contentDescription = bookmark.title,\n              modifier = Modifier.padding(horizontal = 12.dp).size(28.dp),\n              tint = MaterialTheme.colorScheme.onSurface\n            )\n          },\n          // 绑定点击行为，弹出编辑对话框、或者跳转\n          modifier = Modifier.clickable {\n            if (isInEditMode) {\n              page.editingBookmark = bookmark\n            } else {\n              openInNewPage()\n            }\n          }, headlineContent = {\n            Text(text = bookmark.title, overflow = TextOverflow.Ellipsis)\n          }, supportingContent = {\n            Text(text = bookmark.url, overflow = TextOverflow.Ellipsis)\n          }, trailingContent = {\n            if (isInEditMode) {\n              Checkbox(checked = page.selectedBookmarks.contains(bookmark), {\n                when (it) {\n                  true -> page.selectedBookmarks.add(bookmark)\n                  else -> page.selectedBookmarks.remove(bookmark)\n                }\n              })\n            } else {\n              IconButton(openInNewPage) {\n                Icon(\n                  imageVector = Icons.AutoMirrored.Filled.KeyboardArrowRight, // ImageVector.vectorResource(R.drawable.ic_more),\n                  contentDescription = \"Open In New Page\",\n                  tint = MaterialTheme.colorScheme.outlineVariant\n                )\n              }\n            }\n          })\n      }\n    }\n  }\n}\n\n\n@Composable\nfun BrowserBookmarkItemEditDialog(page: BrowserBookmarkPage, modifier: Modifier = Modifier) {\n  val editingBookmark = page.editingBookmark ?: return\n  var editedBookmark by remember(editingBookmark) { mutableStateOf(editingBookmark.copy()) }\n  val viewModel = LocalBrowserViewModel.current\n  val uiScope = rememberCoroutineScope()\n\n  AlertDialog(icon = {\n    Icon(\n      Icons.Default.Edit,\n      contentDescription = BrowserI18nResource.browser_bookmark_edit_dialog_title()\n    )\n  }, title = {\n    Text(BrowserI18nResource.browser_bookmark_edit_dialog_title())\n  }, text = {\n    Column {\n      TextField(value = editedBookmark.title,\n        onValueChange = { editedBookmark = editedBookmark.copy(title = it) },\n        label = { Text(BrowserI18nResource.browser_bookmark_title()) })\n      TextField(value = editedBookmark.url,\n        onValueChange = { editedBookmark = editedBookmark.copy(url = it) },\n        label = { Text(BrowserI18nResource.browser_bookmark_url()) })\n    }\n  }, onDismissRequest = {\n    page.editingBookmark = null\n  }, confirmButton = {\n    TextButton(enabled = editingBookmark != editedBookmark, onClick = {\n      uiScope.launch {\n        viewModel.updateBookmarkUI(editingBookmark, editedBookmark)\n      }\n    }) {\n      Text(BrowserI18nResource.button_name_confirm())\n    }\n  }, dismissButton = {\n    TextButton(onClick = {\n      page.editingBookmark = null\n    }) {\n      Text(BrowserI18nResource.button_name_cancel())\n    }\n  })\n}\n\n"},{"language":"kotlin","path":"web/ui/page/BrowserDownloadPage.kt","content":"package org.dweb_browser.browser.web.ui.page\n\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.gestures.detectTapGestures\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.PaddingValues\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.LazyRow\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Close\nimport androidx.compose.material.icons.filled.Delete\nimport androidx.compose.material.icons.filled.FileDownload\nimport androidx.compose.material.icons.filled.MoreHoriz\nimport androidx.compose.material.icons.filled.Pause\nimport androidx.compose.material.icons.filled.PlayArrow\nimport androidx.compose.material.icons.filled.Share\nimport androidx.compose.material3.DropdownMenu\nimport androidx.compose.material3.DropdownMenuItem\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.FilterChip\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.ListItem\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.drawscope.Stroke\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.download.model.DownloadState\nimport org.dweb_browser.browser.download.model.DownloadStateEvent\nimport org.dweb_browser.browser.web.data.BrowserDownloadItem\nimport org.dweb_browser.browser.web.data.BrowserDownloadType\nimport org.dweb_browser.browser.web.model.page.BrowserDownloadPage\nimport org.dweb_browser.browser.web.ui.common.BrowserTopBar\nimport org.dweb_browser.helper.compose.NoDataRender\nimport org.dweb_browser.helper.toSpaceSize\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun BrowserDownloadPage.BrowserDownloadPageRender(modifier: Modifier) {\n  // 分为顶部的 Chip 和 下面的下载内容列表\n  var chipType by remember { mutableStateOf(BrowserDownloadType.All) }\n  Column(modifier = modifier) {\n    BrowserTopBar(\n      title = BrowserI18nResource.Download.page_title_manage(), enableNavigation = false\n    )\n    TopChipBar { chipType = it }\n    ContentDownloadManage(chipType)\n  }\n}\n\n@Composable\nprivate fun BrowserDownloadPage.TopChipBar(onClick: (chipType: BrowserDownloadType) -> Unit) {\n  // 获取列表中的类型，存在至少两个类型，才需要显示当前Chip\n  val filterMap = remember(saveDownloadList, saveCompleteList) {\n    (saveDownloadList + saveCompleteList).associateBy({ it.fileType }, { false }).toMutableMap()\n  }\n  if (filterMap.size > 1) {\n    filterMap.getOrPut(BrowserDownloadType.All) { true }\n    val filterList = filterMap.toList().sortedBy { it.first.ordinal } // 增加all标签\n    LazyRow(\n      contentPadding = PaddingValues(horizontal = 8.dp),\n      horizontalArrangement = Arrangement.spacedBy(8.dp),\n      verticalAlignment = Alignment.CenterVertically\n    ) {\n      items(filterList, key = { it.first }) { item ->\n        FilterChip(\n          selected = item.second,\n          onClick = {\n            filterMap.forEach { (key, _) -> filterMap[key] = false } // 所有都置 false\n            filterMap[item.first] = true // 当前点击的为 true\n            onClick(item.first)\n          },\n          label = {\n            Text(item.first.title())\n          },\n          leadingIcon = {\n            Image(\n              painter = item.first.painter(),\n              contentDescription = item.first.title(),\n              modifier = Modifier.size(24.dp)\n            )\n          }\n        )\n      }\n    }\n  }\n}\n\n@Composable\nprivate fun BrowserDownloadPage.ContentDownloadManage(chipType: BrowserDownloadType) {\n  if (saveDownloadList.isEmpty() && saveCompleteList.isEmpty()) {\n    NoDataRender(BrowserI18nResource.Download.tip_empty())\n    return\n  }\n  val downloadList: List<BrowserDownloadItem>\n  val completeList: List<BrowserDownloadItem>\n  if (chipType == BrowserDownloadType.All) {\n    downloadList = saveDownloadList\n    completeList = saveCompleteList\n  } else {\n    downloadList = saveDownloadList.filter { it.fileType == chipType }\n    completeList = saveCompleteList.filter { it.fileType == chipType }\n  }\n  LazyColumn {\n    items(downloadList) { item ->\n      DownloadItemManage(item)\n    }\n    items(completeList) { item ->\n      DownloadItemManage(item)\n    }\n  }\n}\n\n@Composable\nprivate fun BrowserDownloadPage.DownloadItemManage(downloadItem: BrowserDownloadItem) {\n  ListItem(\n    modifier = Modifier.fillMaxWidth().height(56.dp).pointerInput(downloadItem) {\n      detectTapGestures(\n        onPress = { openFileOnDownload(downloadItem) },\n        onTap = { openFileOnDownload(downloadItem) },\n        onLongPress = { /** TODO 这边实现 长按 后当前界面改为删除选择模式 */ }\n      )\n    },\n    headlineContent = {\n      Column {\n        Text(text = downloadItem.fileName, style = MaterialTheme.typography.bodyMedium)\n        Text(\n          text = \"${downloadItem.state.current.toSpaceSize()} / ${downloadItem.state.total.toSpaceSize()} • ${downloadItem.state.state.name}\",\n          style = MaterialTheme.typography.bodySmall\n        )\n      }\n    },\n    leadingContent = {\n      if (downloadItem.state.state == DownloadState.Completed) {\n        Image(\n          painter = downloadItem.fileType.painter(),\n          contentDescription = downloadItem.fileType.name,\n          modifier = Modifier.size(40.dp)\n        )\n      } else {\n        // 下载进度显示\n        DownloadProgressIndicator(downloadItem.state) { clickDownloadButton(downloadItem) }\n      }\n    },\n    trailingContent = {\n      if (downloadItem.state.state == DownloadState.Completed) {\n        DownloadMoreDropMenu(\n          onShare = { shareDownloadItem(downloadItem) },\n          onDelete = { deleteDownloadItems(listOf(downloadItem)) }\n        )\n      } else {\n        Icon(\n          imageVector = Icons.Default.Close,\n          contentDescription = \"Close\"\n        )\n      }\n    }\n  )\n}\n\n@Composable\nprivate fun DownloadProgressIndicator(event: DownloadStateEvent, onClick: () -> Unit) {\n  val primary = MaterialTheme.colorScheme.primary\n  Box(\n    modifier = Modifier.size(40.dp).clip(CircleShape)\n      .background(primary.copy(0.2f)).clickable { onClick() },\n    contentAlignment = Alignment.Center\n  ) {\n    when (event.state) {\n      DownloadState.Downloading -> Icon(\n        imageVector = Icons.Default.Pause,\n        contentDescription = \"Downloading\",\n        modifier = Modifier.size(32.dp)\n      )\n\n      DownloadState.Paused -> Icon(\n        imageVector = Icons.Default.PlayArrow,\n        contentDescription = \"Pause\",\n        modifier = Modifier.size(32.dp)\n      )\n\n      else -> Icon(\n        imageVector = Icons.Default.FileDownload,\n        contentDescription = \"download\",\n        modifier = Modifier.size(32.dp)\n      )\n    }\n    Canvas(modifier = Modifier.fillMaxSize()) {\n      drawArc(\n        color = primary,\n        startAngle = -90f,\n        sweepAngle = event.progress() * 360f,\n        useCenter = false,\n        style = Stroke(width = 8f)\n      )\n    }\n  }\n}\n\n/**\n * 下载完成后，右边显示更多按钮\n */\n@Composable\nprivate fun DownloadMoreDropMenu(onDelete: () -> Unit, onShare: () -> Unit) {\n  var expandMenu by remember { mutableStateOf(false) }\n  Box {\n    Icon(\n      imageVector = Icons.Default.MoreHoriz,\n      contentDescription = \"More\",\n      modifier = Modifier.clickable { expandMenu = true }\n    )\n    DropdownMenu(\n      expanded = expandMenu,\n      onDismissRequest = { expandMenu = false }\n    ) {\n      DropdownMenuItem(text = {\n        Text(text = BrowserI18nResource.Download.dropdown_share())\n      }, onClick = onShare, leadingIcon = {\n        Icon(imageVector = Icons.Default.Share, contentDescription = \"Share\")\n      })\n//      DropdownMenuItem(onClick = onDelete) {\n//        Icon(imageVector = Icons.Default.Replay, contentDescription = \"Rename\")\n//        Spacer(modifier = Modifier.width(8.dp))\n//        Text(text = BrowserI18nResource.Download.dropdown_rename())\n//      }\n      DropdownMenuItem(text = {\n        Text(text = BrowserI18nResource.Download.dropdown_delete())\n      }, onClick = onDelete, leadingIcon = {\n        Icon(imageVector = Icons.Default.Delete, contentDescription = \"Delete\")\n      })\n    }\n  }\n}"},{"language":"kotlin","path":"web/ui/page/BrowserEnginePage.kt","content":"package org.dweb_browser.browser.web.ui.page\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.outlined.Search\nimport androidx.compose.material.icons.outlined.SearchOff\nimport androidx.compose.material3.DropdownMenu\nimport androidx.compose.material3.DropdownMenuItem\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.ListItem\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.search.SearchEngine\nimport org.dweb_browser.browser.web.model.BrowserViewModel\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserEnginePage\nimport org.dweb_browser.browser.web.ui.common.BrowserTopBar\nimport org.dweb_browser.helper.compose.NoDataRender\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun BrowserEnginePageRender(enginePage: BrowserEnginePage, modifier: Modifier) {\n  Column(modifier = modifier) {\n    BrowserTopBar(\n      title = BrowserI18nResource.Engine.page_title(),\n      enableNavigation = false\n    )\n    BrowserSearchEngineListPage(enginePage = enginePage)\n  }\n}\n\n@Composable\nprivate fun BrowserSearchEngineListPage(\n  modifier: Modifier = Modifier,\n  enginePage: BrowserEnginePage,\n) {\n  val viewModel = LocalBrowserViewModel.current\n  val list = viewModel.filterAllEngines\n  if (list.isEmpty()) {\n    NoDataRender(BrowserI18nResource.browser_empty_list(), modifier = modifier)\n    return\n  }\n\n  LazyColumn(modifier = Modifier.fillMaxSize()) {\n    items(list) { engineItem ->\n      ListItem(\n        modifier = Modifier.fillMaxWidth().height(56.dp),\n        headlineContent = {\n          Text(text = engineItem.displayName)\n        },\n        supportingContent = {\n          Text(text = engineItem.homeLink)\n        },\n        leadingContent = {\n          Image(painter = engineItem.painter(), contentDescription = engineItem.name)\n        },\n        trailingContent = {\n          SearchEngineToggleButton(engineItem, viewModel)\n        }\n      )\n    }\n  }\n}\n\n@Composable\nfun SearchEngineToggleButton(\n  engineItem: SearchEngine,\n  viewModel: BrowserViewModel,\n  modifier: Modifier = Modifier,\n) {\n  var isShowMenu by remember { mutableStateOf(false) }\n  IconButton({ isShowMenu = true }, modifier = modifier) {\n    Icon(\n      imageVector = if (engineItem.enable) Icons.Outlined.Search else Icons.Outlined.SearchOff,\n      contentDescription = if (engineItem.enable) \"Search\" else \"SearchOff\",\n      tint =\n      if (engineItem.enable) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary,\n    )\n  }\n  DropdownMenu(expanded = isShowMenu, onDismissRequest = { isShowMenu = false }) {\n    DropdownMenuItem(\n      onClick = {\n        isShowMenu = false\n        if (!engineItem.enable) viewModel.enableSearchEngine(engineItem)\n      },\n      text = { Text(text = BrowserI18nResource.Engine.status_enable()) },\n      leadingIcon = {\n        Icon(\n          imageVector = Icons.Outlined.Search,\n          contentDescription = \"Enable\",\n          tint = MaterialTheme.colorScheme.primary\n        )\n      }\n    )\n    DropdownMenuItem(\n      onClick = {\n        isShowMenu = false\n        if (engineItem.enable) viewModel.disableSearchEngine(engineItem)\n      },\n      text = { Text(text = BrowserI18nResource.Engine.status_disable()) },\n      leadingIcon = {\n        Icon(\n          imageVector = Icons.Outlined.SearchOff,\n          contentDescription = \"Disable\",\n          tint = MaterialTheme.colorScheme.secondary\n        )\n      }\n    )\n  }\n}\n"},{"language":"kotlin","path":"web/ui/page/BrowserHistoryPage.kt","content":"package org.dweb_browser.browser.web.ui.page\n\nimport androidx.compose.foundation.ExperimentalFoundationApi\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight\nimport androidx.compose.material.icons.filled.Delete\nimport androidx.compose.material.icons.filled.Edit\nimport androidx.compose.material3.Checkbox\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.ListItem\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.data.formatToStickyName\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserHistoryPage\nimport org.dweb_browser.browser.web.ui.common.BrowserTopBar\nimport org.dweb_browser.helper.compose.NoDataRender\nimport org.dweb_browser.helper.datetimeNowToEpochDay\nimport org.dweb_browser.sys.window.core.LocalWindowController\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun BrowserHistoryPageRender(historyPage: BrowserHistoryPage, modifier: Modifier) {\n  LocalWindowController.current.navigation.GoBackHandler(historyPage.isInEditMode) {\n    historyPage.isInEditMode = false\n  }\n  val uiScope = rememberCoroutineScope()\n  val viewModel = LocalBrowserViewModel.current\n  Column(modifier = modifier) {\n    BrowserTopBar(title = BrowserI18nResource.History.page_title(),\n      enableNavigation = historyPage.isInEditMode,\n      onNavigationBack = { historyPage.isInEditMode = false },\n      actions = {\n        if (historyPage.isInEditMode) {\n          IconButton(enabled = historyPage.selectedHistories.isNotEmpty(), onClick = {\n            uiScope.launch {\n              viewModel.removeHistoryLink(historyPage.selectedHistories.toList())\n              historyPage.isInEditMode = false\n            }\n          }) {\n            Icon(imageVector = Icons.Filled.Delete, contentDescription = \"Delete Selects\")\n          }\n        } else {\n          IconButton(onClick = {\n            historyPage.isInEditMode = true\n            historyPage.selectedHistories.clear()\n          }) {\n            Icon(\n              imageVector = Icons.Filled.Edit, contentDescription = \"Go to Edit\"\n            )\n          }\n        }\n      })\n    BrowserHistoryListPage(historyPage = historyPage)\n  }\n}\n\n@OptIn(ExperimentalFoundationApi::class)\n@Composable\nfun BrowserHistoryListPage(modifier: Modifier = Modifier, historyPage: BrowserHistoryPage) {\n  val uiScope = rememberCoroutineScope()\n  val viewModel = LocalBrowserViewModel.current\n  val historyMap = viewModel.getHistoryLinks()\n  if (historyMap.isEmpty()) {\n    NoDataRender(BrowserI18nResource.browser_empty_list(), modifier = modifier)\n    return\n  }\n\n  val currentDay = datetimeNowToEpochDay()\n\n  LazyColumn(\n    modifier.background(MaterialTheme.colorScheme.background).padding(horizontal = 16.dp)\n  ) {\n    for (day in currentDay downTo currentDay - 6) {\n      val historyList = historyMap[day.toString()] ?: continue\n      stickyHeader(key = day) {\n        Text(\n          text = day.formatToStickyName(),\n          modifier = Modifier.fillMaxWidth().background(MaterialTheme.colorScheme.background)\n            .padding(vertical = 12.dp),\n          fontWeight = FontWeight(500),\n          fontSize = 15.sp,\n          color = MaterialTheme.colorScheme.outline\n        )\n      }\n\n      items(historyList) { historyItem ->\n        val openInNewPage: () -> Unit = remember(viewModel, historyItem) {\n          {\n            uiScope.launch { viewModel.tryOpenUrlUI(historyItem.url) }\n          }\n        }\n        ListItem(headlineContent = {\n          Text(text = historyItem.title, overflow = TextOverflow.Ellipsis, maxLines = 1)\n        }, modifier = Modifier.clickable {\n          if (!historyPage.isInEditMode) {\n            openInNewPage()\n          }\n        }, supportingContent = {\n          Text(text = historyItem.url, overflow = TextOverflow.Ellipsis, maxLines = 2)\n        }, trailingContent = {\n          if (historyPage.isInEditMode) {\n            Checkbox(checked = historyPage.selectedHistories.contains(historyItem), {\n              when (it) {\n                true -> historyPage.selectedHistories.add(historyItem)\n                else -> historyPage.selectedHistories.remove(historyItem)\n              }\n            })\n          } else {\n            Icon(\n              imageVector = Icons.AutoMirrored.Filled.KeyboardArrowRight,\n              contentDescription = \"Open In New Page\",\n              tint = MaterialTheme.colorScheme.outlineVariant\n            )\n          }\n        })\n      }\n    }\n  }\n}\n"},{"language":"kotlin","path":"web/ui/page/BrowserHomePage.kt","content":"package org.dweb_browser.browser.web.ui.page\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\nimport androidx.compose.foundation.layout.FlowRow\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.sizeIn\nimport androidx.compose.material3.FilledIconButton\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserDrawResource\nimport org.dweb_browser.browser.web.BrowserNMM\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserHomePage\nimport org.dweb_browser.core.std.dns.DnsNMM\nimport org.dweb_browser.core.std.file.FileNMM\nimport org.dweb_browser.helper.compose.hoverCursor\nimport org.dweb_browser.sys.window.render.AppIconContainer\nimport org.jetbrains.compose.ui.tooling.preview.Preview\n\n@OptIn(ExperimentalLayoutApi::class)\n@Composable\nfun BrowserHomePage.BrowserHomePageRender(modifier: Modifier = Modifier) {\n  val viewModel = LocalBrowserViewModel.current\n  val scope = rememberCoroutineScope()\n  Column(\n    modifier = modifier,\n    horizontalAlignment = Alignment.CenterHorizontally,\n    verticalArrangement = Arrangement.spacedBy(32.dp, Alignment.CenterVertically)\n  ) {\n    Column(\n      Modifier.weight(1f, false).padding(top = 32.dp).fillMaxWidth(),\n      horizontalAlignment = Alignment.CenterHorizontally,\n      verticalArrangement = Arrangement.spacedBy(16.dp, Alignment.Bottom)\n    ) {\n      Image(\n        painter = BrowserDrawResource.Logo.painter(),\n        contentDescription = \"Dweb Browser\",\n        modifier = Modifier.weight(1f).sizeIn(\n          minWidth = 64.dp, minHeight = 64.dp, maxWidth = 280.dp, maxHeight = 280.dp\n        ).fillMaxSize(),\n        contentScale = ContentScale.Fit,\n        alignment = Alignment.Center\n      )\n      Text(\n        text = \"Dweb Browser\", style = MaterialTheme.typography.titleMedium\n      )\n    }\n\n    FlowRow(\n      Modifier.padding(horizontal = 16.dp).weight(1.618f).sizeIn(maxWidth = 480.dp).fillMaxWidth(),\n      horizontalArrangement = Arrangement.SpaceEvenly\n    ) {\n      browserPageList.forEach { pageType ->\n        val onClick: () -> Unit = { scope.launch { viewModel.tryOpenUrlUI(pageType.url) } }\n        Box(\n          Modifier.clip(AppIconContainer.defaultShape).clickable(onClick = onClick).hoverCursor()\n        ) {\n          Column(\n            Modifier.size(size = 80.dp),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            // verticalArrangement = Arrangement.spacedBy(8.dp),\n          ) {\n            FilledIconButton(onClick, shape = AppIconContainer.defaultShape) {\n              Icon(\n                painter = pageType.iconPainter(),\n                contentDescription = pageType.pageTitle()\n              )\n            }\n            Text(\n              text = pageType.pageTitle(),\n              modifier = Modifier.scale(0.8f),\n              textAlign = TextAlign.Center,\n              style = MaterialTheme.typography.bodySmall,\n              overflow = TextOverflow.Ellipsis\n            )\n          }\n        }\n      }\n    }\n  }\n}\n\n@Preview\n@Composable\nfun BrowserHomePagePreview() {\n  val dnsNMM = DnsNMM()\n  var browserHomePage by mutableStateOf<BrowserHomePage?>(null)\n  LaunchedEffect(Unit) {\n    val browserNMM = BrowserNMM()\n    val fileNMM = FileNMM()\n    dnsNMM.install(browserNMM)\n    dnsNMM.install(fileNMM)\n    val dnsRuntime = dnsNMM.bootstrap()\n    val browserRuntime = dnsRuntime.open(browserNMM.mmid) as BrowserNMM.BrowserRuntime\n    browserHomePage = BrowserHomePage(browserRuntime.browserController)\n  }\n\n  browserHomePage?.BrowserHomePageRender()\n}"},{"language":"kotlin","path":"web/ui/page/BrowserWebPage.kt","content":"package org.dweb_browser.browser.web.ui.page\n\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Modifier\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.common.WindowControllerBinding\nimport org.dweb_browser.browser.web.data.WebSiteType\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserWebPage\nimport org.dweb_browser.browser.web.model.toWebSiteInfo\nimport org.dweb_browser.dwebview.RenderWithScale\nimport org.dweb_browser.helper.platform.IPureViewController\nimport org.dweb_browser.helper.platform.isDesktop\nimport org.dweb_browser.helper.withScope\nimport org.dweb_browser.sys.window.core.LocalWindowController\n\n@Composable\ninternal fun BrowserWebPage.Effect() {\n  val webPage = this\n  val viewModel = LocalBrowserViewModel.current\n  val uiScope = rememberCoroutineScope()\n\n  /// 和窗口控制器的绑定\n  webPage.webView.WindowControllerBinding()\n\n  /// 绑定title\n  webView.titleFlow.collectAsState().value.also {\n    title = it.ifEmpty {\n      when (webView.loadingProgressFlow.collectAsState().value) {\n        1f -> BrowserI18nResource.Web.page_title()\n        else -> BrowserI18nResource.Web.web_page_loading()\n      }\n    }\n  }\n\n  /// 绑定URL\n  LaunchedEffect(webPage) {\n    webView.urlStateFlow.collect { url ->\n      withScope(uiScope) {\n        // 完成一次页面加载，保存到历史访问记录中\n        viewModel.addHistoryLinkUI(webView.toWebSiteInfo(WebSiteType.History, url))\n        // 更新当前url\n        superUpdateUrl(url)\n      }\n    }\n  }\n\n  /// 返回按钮拦截\n  key(viewModel) {\n    val canGoBack by webView.canGoBackStateFlow.collectAsState()\n    val enable = viewModel.focusedPage == webPage\n    // 先判断是否聚焦，如果聚焦了，必定是可以返回的，在返回的时候判断是webview返回，还是关闭WebPage\n    LocalWindowController.current.navigation.GoBackHandler(enable) {\n      if (canGoBack) {\n        webView.goBack()\n      } else {\n        viewModel.closePageUI(webPage)\n      }\n    }\n  }\n}\n\n@Composable\ninternal fun BrowserWebPage.BrowserWebPageRender(modifier: Modifier) {\n  val webPage = this\n  webPage.Effect()\n  val viewModel = webPage.browserController.viewModel\n//  val focusedPage = viewModel.focusedPage\n//  if (focusedPage != webPage) {\n//    LaunchedEffect(Unit) {\n//      delay(200)\n//      webPage.captureViewInBackground(\"web view invisible\")\n//    }\n//  }\n  /**\n   * 默认情况下这个WebView默认一直显示，但是桌面端例外，因为它的SwingPanel是置顶显示的，所以浏览器界面会一直盖在其它界面上面\n   * 所以在这种情况下，我们显示截图就好\n   */\n  if (IPureViewController.isDesktop &&\n    (viewModel.previewPanel.isPreviewVisible || viewModel.searchPanel.showPanel)\n  ) {\n    BoxWithConstraints(modifier) {\n      webPage.PreviewRender(containerWidth = maxWidth, modifier = Modifier.fillMaxSize())\n    }\n  } else {\n    ///\n    webView.WindowControllerBinding()\n    webView.RenderWithScale(scale, modifier)\n  }\n}\n"},{"language":"kotlin","path":"web/ui/search/PanelTitle.kt","content":"package org.dweb_browser.browser.web.ui.search\n\nimport androidx.compose.foundation.horizontalScroll\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.RowScope\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.material3.FilterChip\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.web.ui.dimenPageHorizontal\n\n@Composable\ninternal fun PanelTitle(\n  titleText: String,\n  titleIcon: (@Composable () -> Unit)? = null,\n  enabled: Boolean = true,\n  trailingContent: (@Composable RowScope.() -> Unit)? = null,\n) {\n  Row(\n    modifier = Modifier.padding(horizontal = dimenPageHorizontal)\n      .horizontalScroll(rememberScrollState()),\n    horizontalArrangement = Arrangement.spacedBy(8.dp),\n    verticalAlignment = Alignment.CenterVertically,\n  ) {\n    FilterChip(\n      onClick = {},\n      enabled = enabled,\n      selected = true,\n      label = { Text(titleText) },\n      leadingIcon = titleIcon,\n    )\n    trailingContent?.invoke(this)\n  }\n}"},{"language":"kotlin","path":"web/ui/search/SearchChat.kt","content":"package org.dweb_browser.browser.web.ui.search\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.heightIn\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.AutoAwesome\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.unit.dp\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.model.BrowserViewModel\n\n/**\n * AI 搜索\n */\n@Composable\ninternal fun SearchChat(\n  viewModel: BrowserViewModel,\n  searchText: String,\n  onDismissRequest: () -> Unit,\n  onSuggestionActions: OnSuggestionActions,\n) {\n  Box(Modifier.fillMaxWidth().heightIn(min = 320.dp), contentAlignment = Alignment.Center) {\n    // TODO 接入能访问互联网的AI，让它能搜索当前网页，或者能自己在后台访问当前站点其它的链接\n    Column(\n      modifier = Modifier.alpha(0.6f),\n      horizontalAlignment = Alignment.CenterHorizontally,\n      verticalArrangement = Arrangement.spacedBy(8.dp)\n    ) {\n      Icon(\n        Icons.Default.AutoAwesome,\n        contentDescription = \"developing\",\n        modifier = Modifier.size(64.dp),\n      )\n      Text(\n        BrowserI18nResource.browser_search_comingSoon(),\n        style = MaterialTheme.typography.bodySmall,\n      )\n    }\n  }\n}"},{"language":"kotlin","path":"web/ui/search/SearchSuggestion.kt","content":"package org.dweb_browser.browser.web.ui.search\n\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.pager.HorizontalPager\nimport androidx.compose.foundation.pager.rememberPagerState\nimport androidx.compose.foundation.text.input.TextFieldState\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.twotone.Diversity3\nimport androidx.compose.material.icons.twotone.Forum\nimport androidx.compose.material.icons.twotone.Http\nimport androidx.compose.material.icons.twotone.TravelExplore\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.SecondaryTabRow\nimport androidx.compose.material3.Tab\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.DisposableEffect\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateMapOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.input.pointer.PointerEventType\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.platform.LocalFocusManager\nimport androidx.compose.ui.zIndex\nimport kotlinx.coroutines.CancellationException\nimport kotlinx.coroutines.SupervisorJob\nimport kotlinx.coroutines.cancel\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.job\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.model.LocalBrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserWebPage\nimport org.dweb_browser.helper.humanTrim\n\ninternal enum class TabId {\n  Chat,\n  WebPage,\n  Web2,\n  Web3\n}\n\ninternal data class TabInfo(\n  val id: TabId,\n  val title: String,\n  val enabled: Boolean = true,\n  val icon: @Composable () -> Unit,\n  val content: @Composable () -> Unit,\n)\ntypealias OnSuggestionActions = (SuggestionActions) -> Unit\ntypealias SuggestionAction = () -> Unit\ntypealias SuggestionActions = List<SuggestionAction>\n\n/**\n * 输入搜索内容后，显示的搜索建议\n */\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\ninternal fun SearchSuggestion(\n  searchTextState: TextFieldState,\n  modifier: Modifier = Modifier,\n  onClose: () -> Unit,\n  onSuggestionActions: OnSuggestionActions,\n) {\n  val searchText = searchTextState.text.toString()\n  val viewModel = LocalBrowserViewModel.current\n  val focusManager = LocalFocusManager.current\n  Column(modifier = modifier.fillMaxSize().zIndex(1f).pointerInput(Unit) {\n    awaitPointerEventScope {\n      while (true) {\n        val event = awaitPointerEvent()\n        if (event.type == PointerEventType.Press) {\n          // 用户开始交互，关闭键盘，避免遮挡\n          focusManager.clearFocus()\n        }\n      }\n    }\n  }) {\n    val scope = rememberCoroutineScope()\n    val currentWebPage = viewModel.focusedPage?.let { it as? BrowserWebPage }\n    var web3Searcher by remember {\n      mutableStateOf<Web3Searcher?>(null)\n    }\n    DisposableEffect(searchText) {\n      web3Searcher?.cancel(CancellationException(\"Cancel search\"))\n      val job = scope.launch {\n        delay(150)// 防抖\n        val keyword = searchText.humanTrim()\n        web3Searcher = when {\n          keyword.isEmpty() -> null\n          else -> {\n            val parentScope = viewModel.browserNMM.getRuntimeScope()\n            Web3Searcher(\n              coroutineContext = parentScope.coroutineContext + SupervisorJob(parentScope.coroutineContext.job),\n              searchText = keyword\n            )\n          }\n        }\n      }\n      onDispose {\n        job.cancel()\n        web3Searcher?.cancel(CancellationException(\"Cancel search\"))\n        web3Searcher = null\n      }\n    }\n    // TODO FIX ME 本地搜索会用到??\n    LaunchedEffect(searchText) { viewModel.getInjectList(searchText) }\n\n    val suggestionActionsMap = remember { mutableStateMapOf<TabId, List<() -> Unit>>() }\n    val tabs = mutableListOf(\n      TabInfo(\n        id = TabId.Chat,\n        title = BrowserI18nResource.browser_search_chat(),\n        enabled = false,\n        icon = { Icon(Icons.TwoTone.Forum, \"\") },\n      ) {\n        SearchChat(\n          viewModel = viewModel,\n          searchText = searchText, onDismissRequest = onClose,\n          onSuggestionActions = {\n            suggestionActionsMap[TabId.Chat] = it\n          },\n        )\n      },\n      TabInfo(\n        id = TabId.Web2,\n        title = BrowserI18nResource.browser_search_web2(),\n        icon = { Icon(Icons.TwoTone.TravelExplore, \"\") },\n      ) {\n        SearchWeb2(\n          viewModel = viewModel,\n          searchTextState = searchTextState,\n          onDismissRequest = onClose,\n          onSuggestionActions = {\n            suggestionActionsMap[TabId.Web2] = it\n          },\n        )\n      },\n      TabInfo(\n        id = TabId.Web3,\n        title = BrowserI18nResource.browser_search_web3(),\n        icon = { Icon(Icons.TwoTone.Diversity3, \"\") },\n      ) {\n        SearchWeb3(\n          viewModel = viewModel,\n          web3Searcher = web3Searcher,\n          onDismissRequest = onClose,\n          onSuggestionActions = {\n            suggestionActionsMap[TabId.Web3] = it\n          },\n        )\n      },\n    )\n    if (currentWebPage != null) {\n      val webPageTabInfo = TabInfo(\n        id = TabId.WebPage,\n        title = BrowserI18nResource.browser_search_web_page(),\n        icon = { Icon(Icons.TwoTone.Http, \"\") },\n      ) {\n        SearchWebPage(\n          viewModel = viewModel,\n          webPage = currentWebPage,\n          searchTextState = searchTextState,\n          onDismissRequest = onClose,\n          onSuggestionActions = {\n            suggestionActionsMap[TabId.WebPage] = it\n          },\n        )\n      }\n      tabs.add(1, webPageTabInfo)\n    }\n    val state = rememberPagerState(1) { tabs.size }\n    val suggestionActions = suggestionActionsMap[tabs[state.currentPage].id]\n    LaunchedEffect(suggestionActions) {\n      onSuggestionActions(suggestionActions ?: emptyList())\n    }\n    SecondaryTabRow(\n      state.currentPage, Modifier.fillMaxWidth(), containerColor = Color.Transparent\n    ) {\n      tabs.forEachIndexed { index, tab ->\n        Tab(\n          selected = state.currentPage == index,\n          onClick = {\n            scope.launch { state.scrollToPage(index) }\n          },\n          enabled = tab.enabled,\n          icon = { tab.icon() },\n          text = { Text(tab.title) },\n          modifier = if (tab.enabled) Modifier else Modifier.alpha(0.6f)\n        )\n      }\n    }\n    HorizontalPager(state, Modifier.weight(1f).fillMaxWidth()) {\n      Box(\n        modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.TopStart // 内容置顶显示\n      ) {\n        tabs[it].content()\n      }\n    }\n  }\n}\n\n"},{"language":"kotlin","path":"web/ui/search/SearchWeb2.kt","content":"package org.dweb_browser.browser.web.ui.search\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.itemsIndexed\nimport androidx.compose.foundation.text.input.TextFieldState\nimport androidx.compose.foundation.text.input.setTextAndPlaceCursorAtEnd\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.rounded.ArrowForwardIos\nimport androidx.compose.material.icons.filled.Error\nimport androidx.compose.material.icons.filled.FindInPage\nimport androidx.compose.material.icons.filled.TravelExplore\nimport androidx.compose.material.icons.rounded.Edit\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.InputChip\nimport androidx.compose.material3.ListItem\nimport androidx.compose.material3.ListItemDefaults\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.key\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.model.BrowserViewModel\nimport org.dweb_browser.browser.web.ui.page.SearchEngineToggleButton\nimport org.dweb_browser.helper.isWebUrlOrWithoutProtocol\nimport org.dweb_browser.helper.mapFindNoNull\nimport org.dweb_browser.helper.toWebUrl\n\n@Composable\ninternal fun SearchWeb2(\n  viewModel: BrowserViewModel,\n  searchTextState: TextFieldState,\n  onDismissRequest: () -> Unit,\n  onSuggestionActions: OnSuggestionActions,\n) {\n  val searchText = searchTextState.text.toString()\n  val urlAsKeyword = remember(searchText) {\n    searchText.toWebUrl()?.let { url ->\n      viewModel.filterAllEngines.mapFindNoNull { it.queryKeyWordValue(url) }\n    }\n  }\n  LaunchedEffect(urlAsKeyword, searchText) {\n    onSuggestionActions(listOf {\n      viewModel.lifecycleScope.launch {\n        launch {\n          onDismissRequest()\n        }\n        viewModel.doIOSearchUrl(searchText)\n      }\n    })\n  }\n  LazyColumn(Modifier.fillMaxSize()) {\n    val list = viewModel.filterAllEngines\n    // 标题\n    item {\n      PanelTitle(\n        BrowserI18nResource.browser_search_engine(),\n        titleIcon = { Icon(Icons.Default.TravelExplore, \"\") },\n      ) {\n        urlAsKeyword?.also {\n          InputChip(\n            selected = false,\n            onClick = {\n              searchTextState.setTextAndPlaceCursorAtEnd(it)\n            },\n            label = { Text(it) },\n            trailingIcon = { Icon(Icons.Rounded.Edit, \"fill to search input\") },\n          )\n        }\n      }\n    }\n    val keyword = urlAsKeyword ?: searchText\n\n    itemsIndexed(list) { index, searchEngine ->\n      key(searchEngine.host) {\n        if (index > 0) HorizontalDivider()\n        val colors = ListItemDefaults.colors()\n        ListItem(\n          colors = colors,\n          modifier = Modifier.clickable(enabled = searchEngine.enable) {\n            viewModel.doIOSearchUrl(searchEngine, keyword)\n            onDismissRequest()\n          },\n          leadingContent = {\n            Image(\n              painter = searchEngine.painter(),\n              contentDescription = searchEngine.displayName,\n              modifier = Modifier.size(36.dp),\n            )\n          },\n          headlineContent = {\n            if (searchEngine.enable) {\n              Text(\n                text = BrowserI18nResource.browser_search_keyword(keyword),\n                maxLines = 1,\n                overflow = TextOverflow.Ellipsis\n              )\n            } else {\n              Text(\n                text = BrowserI18nResource.browser_engine_inactive(),\n                color = colors.disabledHeadlineColor\n              )\n            }\n          },\n          supportingContent = {\n            Text(\n              text = \"${searchEngine.displayName} ${searchEngine.host}\",\n              maxLines = 1,\n              overflow = TextOverflow.Ellipsis,\n            )\n          },\n          trailingContent = {\n            if (searchEngine.enable) {\n              Icon(\n                imageVector = Icons.AutoMirrored.Rounded.ArrowForwardIos,\n                contentDescription = null,\n              )\n            } else {\n              SearchEngineToggleButton(engineItem = searchEngine, viewModel)\n            }\n          },\n        )\n      }\n    }\n    val disableLocalSearch = true\n    if (disableLocalSearch) {\n      return@LazyColumn\n    }\n    val injectList = viewModel.searchInjectList\n    /// 标题\n    item {\n      PanelTitle(\n        BrowserI18nResource.browser_search_local_resources(),\n        titleIcon = { Icon(Icons.Default.FindInPage, \"\") },\n      )\n    }\n\n    if (injectList.isEmpty()) {\n      item {\n        ListItem(\n          modifier = Modifier.fillMaxWidth(),\n          headlineContent = {\n            Text(text = BrowserI18nResource.browser_search_noFound())\n          },\n          leadingContent = {\n            Icon(\n              imageVector = Icons.Default.Error,\n              contentDescription = null,\n              modifier = Modifier.size(40.dp)\n            )\n          },\n        )\n      }\n      return@LazyColumn\n    }\n    itemsIndexed(injectList) { index, searchInject ->\n      if (index > 0) HorizontalDivider()\n      ListItem(\n        headlineContent = {\n          Text(text = searchInject.name, maxLines = 1, overflow = TextOverflow.Ellipsis)\n        },\n        modifier = Modifier.clickable {\n          // TODO\n          onDismissRequest()\n        },\n        supportingContent = {\n          Text(text = searchText, maxLines = 1, overflow = TextOverflow.Ellipsis)\n        },\n        leadingContent = {\n          Image(searchInject.iconPainter(), contentDescription = searchInject.name)\n        },\n      )\n    }\n  }\n}"},{"language":"kotlin","path":"web/ui/search/SearchWeb3.kt","content":"package org.dweb_browser.browser.web.ui.search\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.heightIn\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.rounded.ArrowForwardIos\nimport androidx.compose.material.icons.automirrored.rounded.ReceiptLong\nimport androidx.compose.material.icons.filled.AppShortcut\nimport androidx.compose.material.icons.rounded.ExpandLess\nimport androidx.compose.material.icons.rounded.ExpandMore\nimport androidx.compose.material3.AssistChip\nimport androidx.compose.material3.HorizontalDivider\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.ListItem\nimport androidx.compose.material3.LocalTextStyle\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport io.ktor.http.headers\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.jmm.ui.IconRender\nimport org.dweb_browser.browser.web.model.BrowserViewModel\nimport org.dweb_browser.core.std.dns.nativeFetch\nimport org.dweb_browser.helper.encodeURIComponent\nimport org.dweb_browser.helper.toSpaceSize\nimport org.dweb_browser.pure.http.PureClientRequest\nimport org.dweb_browser.pure.http.PureHeaders\nimport org.dweb_browser.pure.http.PureMethod\n\n@Composable\ninternal fun SearchWeb3(\n  viewModel: BrowserViewModel,\n  web3Searcher: Web3Searcher?,\n  onDismissRequest: () -> Unit,\n  onSuggestionActions: OnSuggestionActions,\n) {\n  LaunchedEffect(web3Searcher) {\n    web3Searcher?.doSearchDwebapps?.invoke()\n  }\n  LazyColumn {\n    /// 日志信息\n    item {\n      var isOpen by remember { mutableStateOf(false) }\n\n      Column(Modifier.fillMaxWidth()) {\n        val logs = web3Searcher?.logList ?: emptyList()\n        ListItem(\n          leadingContent = {\n            Icon(Icons.AutoMirrored.Rounded.ReceiptLong, \"\")\n          },\n          headlineContent = {\n            Text(BrowserI18nResource.browser_web3_search_logs())\n          },\n          supportingContent = {\n            Text(\n              when {\n                isOpen -> web3Searcher?.previewLog?.value ?: \"\"\n                else -> logs.lastOrNull() ?: \"\"\n              },\n              style = MaterialTheme.typography.bodySmall,\n              maxLines = 1,\n              overflow = TextOverflow.Ellipsis,\n            )\n          },\n          trailingContent = {\n            IconButton({ isOpen = !isOpen }) {\n              Icon(\n                when {\n                  isOpen -> Icons.Rounded.ExpandLess\n                  else -> Icons.Rounded.ExpandMore\n                }, \"\"\n              )\n            }\n          },\n        )\n        if (isOpen) {\n          LazyColumn(\n            Modifier.fillMaxWidth().heightIn(max = 360.dp)\n              .background(MaterialTheme.colorScheme.surfaceContainer)\n          ) {\n            items(logs.size) {\n              val log = logs[logs.size - it - 1]\n              val first = it == 0\n              val last = it == logs.size - 1\n              Text(\n                log,\n                style = MaterialTheme.typography.bodySmall,\n                modifier = Modifier.padding(horizontal = 8.dp).padding(\n                  top = if (first) 8.dp else 0.dp,\n                  bottom = if (last) 8.dp else 0.dp,\n                )\n              )\n              if (!last) {\n                HorizontalDivider()\n              }\n            }\n          }\n        }\n        HorizontalDivider()\n      }\n    }\n    /// 标题和概览\n    val dwebappsEntries = (web3Searcher?.dwebappMap ?: emptyMap()).toList()\n    item {\n      PanelTitle(\n        titleText = BrowserI18nResource.browser_search_dwebapp(),\n        titleIcon = { Icon(Icons.Default.AppShortcut, \"\") },\n        enabled = web3Searcher != null,\n        trailingContent = {\n          if (dwebappsEntries.isNotEmpty()) {\n            Text(\n              BrowserI18nResource.browser_web3_found_dwebapps(dwebappsEntries.size.toString()),\n              style = MaterialTheme.typography.labelSmall,\n              modifier = Modifier.alpha(0.6f)\n            )\n          }\n        },\n      )\n    }\n    /// 找到的应用列表\n    items(dwebappsEntries.size) {\n      val (_, apps) = dwebappsEntries[it]\n      val info = apps.first()\n      val app = info.app\n      val first = it == 0\n      val last = it == dwebappsEntries.size - 1\n      if (!first) {\n        HorizontalDivider()\n      }\n      ListItem(\n        modifier = Modifier.clickable {\n          viewModel.browserNMM.scopeLaunch(cancelable = true) {\n            viewModel.browserNMM.nativeFetch(\n              PureClientRequest(\n                \"dweb://install?url=${info.manifestUrl.encodeURIComponent()}\",\n                PureMethod.GET,\n                headers = PureHeaders(headers = headers {\n                  \"Referrer\" to info.originUrl\n                })\n              )\n            )\n          }\n        },\n        leadingContent = {\n          app.IconRender(64.dp)\n        },\n        headlineContent = {\n          Column {\n            // overline content\n            Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n              CompositionLocalProvider(LocalTextStyle provides MaterialTheme.typography.bodySmall) {\n                Text(app.id)\n                Text(\"v\" + app.version)\n              }\n            }\n            // headline content\n            Text(app.name)\n          }\n        },\n        supportingContent = {\n          Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n            AssistChip({}, label = { Text(app.bundle_size.toSpaceSize()) })\n            /// 一些认证信息的徽章\n            // FilterChip()\n            // SuggestionChip()\n          }\n        },\n        trailingContent = {\n          Icon(Icons.AutoMirrored.Rounded.ArrowForwardIos, \"Go To Detail\")\n        },\n      )\n      if (!last) {\n        HorizontalDivider()\n      }\n    }\n  }\n}\n"},{"language":"kotlin","path":"web/ui/search/SearchWebPage.kt","content":"package org.dweb_browser.browser.web.ui.search\n\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.ExperimentalLayoutApi\nimport androidx.compose.foundation.layout.FlowRow\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.text.input.TextFieldState\nimport androidx.compose.foundation.text.input.setTextAndPlaceCursorAtEnd\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.automirrored.rounded.ArrowBackIos\nimport androidx.compose.material.icons.automirrored.rounded.ArrowForwardIos\nimport androidx.compose.material.icons.filled.BookmarkAdd\nimport androidx.compose.material.icons.filled.BookmarkRemove\nimport androidx.compose.material.icons.filled.Edit\nimport androidx.compose.material.icons.filled.Share\nimport androidx.compose.material.icons.rounded.ContentCopy\nimport androidx.compose.material.icons.rounded.Link\nimport androidx.compose.material.icons.rounded.Public\nimport androidx.compose.material.icons.rounded.Refresh\nimport androidx.compose.material3.Button\nimport androidx.compose.material3.ButtonDefaults\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.IconButton\nimport androidx.compose.material3.ListItem\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.unit.dp\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.launch\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.browser.web.model.BrowserViewModel\nimport org.dweb_browser.browser.web.model.page.BrowserWebPage\nimport org.dweb_browser.browser.web.ui.dimenPageHorizontal\nimport org.dweb_browser.dwebview.rememberHistoryCanGoBack\nimport org.dweb_browser.dwebview.rememberHistoryCanGoForward\nimport org.dweb_browser.helper.isWebUrlOrWithoutProtocol\nimport org.dweb_browser.sys.clipboard.ext.clipboardWriteText\n\ninternal fun BrowserWebPage.launchInLifecycle(action: suspend CoroutineScope.() -> Unit) {\n  webView.lifecycleScope.launch {\n    action()\n  }\n}\n\n@OptIn(ExperimentalLayoutApi::class)\n@Composable\ninternal fun SearchWebPage(\n  viewModel: BrowserViewModel,\n  webPage: BrowserWebPage,\n  searchTextState: TextFieldState,\n  onDismissRequest: () -> Unit,\n  onSuggestionActions: OnSuggestionActions,\n) {\n  val scope = rememberCoroutineScope()\n  val searchText = searchTextState.text.toString()\n  LaunchedEffect(searchText) {\n    val suggestionActions: SuggestionActions = when {\n      searchText == webPage.url -> listOf {\n        webPage.launchInLifecycle {\n          onDismissRequest()\n          webPage.webView.reload()\n        }\n      }\n\n      searchText.isWebUrlOrWithoutProtocol() -> listOf {\n        onDismissRequest()\n        viewModel.doIOSearchUrl(searchText)\n      }\n\n      else -> emptyList()\n    }\n    onSuggestionActions(suggestionActions)\n  }\n  LazyColumn {\n    item {\n      PanelTitle(\n        webPage.title,\n        titleIcon = {\n          webPage.icon?.let { Image(it, \"\", modifier = Modifier.size(18.dp)) }\n            ?: Icon(Icons.Rounded.Public, \"\")\n        },\n      )\n    }\n    /// 关于URL的信息以及一些操作\n    item {\n      ListItem(\n        modifier = Modifier.fillMaxWidth(),\n        leadingContent = {\n          Icon(\n            imageVector = Icons.Rounded.Link,\n            contentDescription = null,\n          )\n        },\n        overlineContent = {\n          Text(text = webPage.url)\n        },\n        headlineContent = {\n          Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {\n            IconButton({\n              scope.launch {\n                viewModel.browserNMM.clipboardWriteText(webPage.url)\n              }\n            }) {\n              Icon(Icons.Rounded.ContentCopy, \"copy url\")\n            }\n            IconButton({\n              searchTextState.setTextAndPlaceCursorAtEnd(webPage.url)\n            }) {\n              Icon(Icons.Default.Edit, \"edit url\")\n            }\n            IconButton({\n              scope.launch {\n                viewModel.shareWebSiteInfo(webPage)\n              }\n            }) {\n              Icon(Icons.Default.Share, \"shared link\")\n            }\n            val added = webPage.isInBookmark\n            IconButton({\n              scope.launch {\n                when {\n                  added -> viewModel.removeBookmarkUI(webPage.url)\n                  else -> viewModel.addBookmarkUI(webPage)\n                }\n              }\n            }) {\n              Icon(\n                when {\n                  added -> Icons.Default.BookmarkRemove\n                  else -> Icons.Default.BookmarkAdd\n                }, \"bookmark\"\n              )\n            }\n          }\n        },\n      )\n    }\n    /// 关于网页的一些其它操作\n    item {\n      FlowRow(\n        modifier = Modifier.padding(horizontal = dimenPageHorizontal).padding(top = 8.dp),\n        horizontalArrangement = Arrangement.spacedBy(8.dp),\n      ) {\n        @Composable\n        fun ActionButton(\n          onClick: suspend () -> Unit,\n          text: String,\n          icon: ImageVector,\n          enabled: Boolean = true,\n        ) {\n          Button(\n            {\n              webPage.launchInLifecycle {\n                onDismissRequest()\n                onClick()\n              }\n            },\n            contentPadding = ButtonDefaults.ButtonWithIconContentPadding,\n            enabled = enabled,\n          ) {\n            Icon(icon, \"\", modifier = Modifier.size(ButtonDefaults.IconSize))\n            Spacer(modifier = Modifier.width(8.dp))\n            Text(text)\n          }\n        }\n\n        ActionButton(\n          { webPage.webView.goBack() },\n          text = BrowserI18nResource.browser_web_go_back(),\n          icon = Icons.AutoMirrored.Rounded.ArrowBackIos,\n          enabled = webPage.webView.rememberHistoryCanGoBack()\n        )\n        ActionButton(\n          { webPage.webView.historyGoForward() },\n          text = BrowserI18nResource.browser_web_go_forward(),\n          icon = Icons.AutoMirrored.Rounded.ArrowForwardIos,\n          enabled = webPage.webView.rememberHistoryCanGoForward()\n        )\n        ActionButton(\n          { webPage.webView.reload() },\n          text = BrowserI18nResource.browser_web_refresh(),\n          icon = Icons.Rounded.Refresh,\n        )\n      }\n    }\n  }\n}"},{"language":"kotlin","path":"web/ui/search/Web3Searcher.kt","content":"package org.dweb_browser.browser.web.ui.search\n\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.mutableStateMapOf\nimport androidx.compose.runtime.mutableStateOf\nimport com.mohamedrejeb.ksoup.html.parser.KsoupHtmlHandler\nimport com.mohamedrejeb.ksoup.html.parser.KsoupHtmlParser\nimport io.ktor.http.Url\nimport io.ktor.http.headers\nimport io.ktor.http.protocolWithAuthority\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.flow.flow\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.sync.Semaphore\nimport kotlinx.coroutines.sync.withPermit\nimport org.dweb_browser.browser.BrowserI18nResource\nimport org.dweb_browser.core.help.types.JmmAppInstallManifest\nimport org.dweb_browser.core.std.dns.httpFetch\nimport org.dweb_browser.helper.Once\nimport org.dweb_browser.helper.consumeEachArrayRange\nimport org.dweb_browser.helper.hexString\nimport org.dweb_browser.helper.isNoProtocolWebUrl\nimport org.dweb_browser.helper.isWebUrl\nimport org.dweb_browser.helper.toWebUrl\nimport org.dweb_browser.helper.utf8String\nimport org.dweb_browser.pure.crypto.hash.sha256\nimport org.dweb_browser.pure.http.PureClientRequest\nimport org.dweb_browser.pure.http.PureHeaders\nimport org.dweb_browser.pure.http.PureMethod\nimport kotlin.coroutines.CoroutineContext\n\ninternal class Web3Searcher(\n  override val coroutineContext: CoroutineContext,\n  val searchTexts: List<String>,\n) : CoroutineScope {\n  constructor(coroutineContext: CoroutineContext, searchText: String) : this(\n    coroutineContext, when {\n      searchText.contains(' ') -> listOf(\n        searchText.replace(Regex(\"\\\\s+\"), \"-\"),\n        searchText.replace(Regex(\"\\\\s+\"), \"\"),\n      )\n\n      else -> listOf(searchText)\n    }\n  )\n\n  /**\n   * 这是新语法，如果你的IDE报错：\n   * In your IDE,\n   * go to Settings | Languages & Frameworks | Kotlin and select the Enable K2 mode option.\n   * The IDE will analyze your code using its K2 mode.\n   */\n//  val logList : List<String>\n//  field = mutableStateListOf()\n  val logList = mutableStateListOf<String>()\n  val previewLog = mutableStateOf<String>(\"\")\n\n  private fun log(log: String) {\n    logList.add(log)\n    previewLog.value =\n      BrowserI18nResource.Web3Search.preview_logs_lines.text(logList.size.toString())\n  }\n\n  val dwebappMap = mutableStateMapOf<String, MutableList<SearchedDwebAppInfo>>()\n//  private fun addApp(app: JmmAppInstallManifest) {\n//    dwebappList.add(app)\n//  }\n\n  private suspend fun tryParse(\n    originHref: String,\n    originUrl: Url,\n    metadataHref: String,\n    integrity: String?,\n  ) {\n    log(BrowserI18nResource.Web3Search.log_discover_dwebapps.text(originHref, metadataHref))\n    try {\n      val metadataRes = httpFetch(\n        PureClientRequest(\n          href = metadataHref,\n          method = PureMethod.GET,\n          headers = PureHeaders(headers {\n            \"Accept\" to \"application/json\"\n            \"Referer\" to originHref\n          }),\n        )\n      )\n      /// 验证跨域\n      metadataRes.headers.get(\"Access-Control-Allow-Origin\")?.also { allowOrigin ->\n        if (allowOrigin != \"*\" && allowOrigin != originUrl.protocolWithAuthority) {\n          log(BrowserI18nResource.Web3Search.log_error_cors_dwebapps.text(originHref))\n        }\n      }\n      /// 完整性验证\n      integrity?.lowercase()?.also { integrity ->\n        if (integrity.startsWith(\"sha256-\")) {\n          val hash = integrity.substringAfter(\"sha256-\")\n          if (sha256(metadataRes.binary()).hexString != hash) {\n            log(BrowserI18nResource.Web3Search.log_error_integrity_dwebapps.text(originHref))\n          }\n        }\n      }\n\n      /// 加入到列表中\n      val manifest = metadataRes.json<JmmAppInstallManifest>()\n      val apps = dwebappMap.getOrElse(manifest.id) { mutableStateListOf() }\n      apps.add(SearchedDwebAppInfo(manifest, metadataHref, originHref))\n      /// TODO 根据可信度、版本号进行排序\n      //  apps.sortedWith {  }\n\n      log(\n        BrowserI18nResource.Web3Search.log_success_found_dwebapps.text(\n          originHref, \"${manifest.name}(${manifest.id})\"\n        )\n      )\n      dwebappMap[manifest.id] = apps\n    } catch (e: Throwable) {\n      log(\n        BrowserI18nResource.Web3Search.log_error_dwebapps.text(\n          originHref, e.message ?: \"Unknown Reason\"\n        )\n      )\n    }\n  }\n\n  val doSearchDwebapps = Once {\n    launch(coroutineContext) {\n      log(BrowserI18nResource.Web3Search.log_start_dwebapps.text)\n      // 创建一个 Semaphore 来限制并发数为 5\n      val semaphore = Semaphore(5)\n      flow {\n        searchTexts.forEach { searchText ->\n          when {\n            searchText.isWebUrl() -> emit(searchText)\n            searchText.isNoProtocolWebUrl() -> {\n              emit(\"https://$searchText\")\n              emit(\"https://dweb.$searchText\")\n            }\n\n            else -> {\n              flow {\n                emit(\"com\")\n                emit(\"org\")\n                emit(\"net\")\n              }.collect { top ->\n                emit(\"https://$searchText.$top\")\n                emit(\"https://www.$searchText.$top\")\n                emit(\"https://dweb.$searchText.$top\")\n                emit(\"https://dweb-$searchText.$top\")\n                emit(\"https://$searchText-dweb.$top\")\n              }\n            }\n          }\n        }\n      }.collect { originHref ->\n          launch {\n            semaphore.withPermit {\n              val originUrl = originHref.toWebUrl() ?: return@withPermit\n              log(BrowserI18nResource.Web3Search.log_fetch_dwebapps.text(originHref))\n              val res = httpFetch(originHref)\n              if (!res.isOk || res.headers.get(\"Content-Type\")?.contains(\"text/html\") != true) {\n                log(BrowserI18nResource.Web3Search.log_fail_dwebapps.text(originHref))\n                return@withPermit\n              }\n              log(BrowserI18nResource.Web3Search.log_parse_dwebapps.text(originHref))\n              var headClose = false\n              val htmlParser = KsoupHtmlParser(handler = object : KsoupHtmlHandler {\n                override fun onCloseTag(name: String, isImplied: Boolean) {\n                  headClose = name == \"head\"\n                }\n\n                override fun onOpenTag(\n                  name: String,\n                  attributes: Map<String, String>,\n                  isImplied: Boolean,\n                ) {\n                  if (name != \"link\") return\n                  log(\n                    \"$originHref <$name ${\n                      attributes.map { \"${it.key}=\\\"${it.value}\\\"\" }.joinToString(\" \")\n                    }/>\"\n                  )\n                  if (attributes[\"rel\"] != \"dwebapp\") return\n                  val metadataHref = attributes[\"href\"] ?: return\n\n                  launch {\n                    tryParse(originHref, originUrl, metadataHref, attributes[\"integrity\"])\n                  }\n                }\n              })\n\n              res.body.toPureStream().getReader(\"read html to parser\")\n                .consumeEachArrayRange { chunk, last ->\n                  if (headClose) {\n                    this.breakLoop()\n                    return@consumeEachArrayRange\n                  }\n                  htmlParser.write(chunk.utf8String)\n                  if (last) {\n                    htmlParser.end()\n                  }\n                }\n            }\n          }\n        }\n    }.invokeOnCompletion {\n      log(BrowserI18nResource.Web3Search.log_end.text)\n    }\n  }\n}\n\ninternal data class SearchedDwebAppInfo(\n  val app: JmmAppInstallManifest,\n  val manifestUrl: String,\n  val originUrl: String,\n)"}]